---

---

<canvas id="c" class="w-full h-64"></canvas>

<script id="vertex-shader-2d" type="notjs">
    attribute vec4 a_position;
    void main(){
        gl_Position = a_position;
    }
</script>

<script id="fragment-shader-2d" type="notjs">
    precision mediump float;
    void main(){
        gl_FragColor = vec4(1, 0, 0.5, 1);
    }
</script>

<script>
const createShader = (gl,type,source)=>{
        const shader = gl.createShader(type);
        gl.shaderSource(shader,source);
        gl.compileShader(shader);
        const success = gl.getShaderParameter(shader,gl.COMPILE_STATUS);
        if(success){
            return shader;
        }
        gl.deleteShader(shader);
        
}
const createProgram = (gl,vertexShader,fragmentShader)=>{
    const program = gl.createProgram();
    gl.attachShader(program,vertexShader);
    gl.attachShader(program,fragmentShader);
    gl.linkProgram(program);
    const success = gl.getProgramParameter(program,gl.LINK_STATUS);
    if(success){
        return program;
    }
    gl.deleteProgram(program);
}
const resizeCanvas = (canvas) => {
    const displayWidth = canvas.clientWidth;
    const displayHeight = canvas.clientHeight;
    if (canvas.width !== displayWidth || canvas.height !== displayHeight) {
        canvas.width = displayWidth;
        canvas.height = displayHeight;
    }
};

const init = () => {
    const canvas = document.getElementById("c") as HTMLCanvasElement;
    resizeCanvas(canvas);
    const gl = canvas?.getContext("webgl");
    if (!gl) {
      console.error("WebGL not supported");
      return;
    }
    const vertexShaderSource = document.getElementById("vertex-shader-2d").textContent;
    const fragmentShaderSource = document.getElementById("fragment-shader-2d").textContent;
    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
    console.log(vertexShader, fragmentShader);
    const program = createProgram(gl, vertexShader, fragmentShader);
    const positionAttributeLocation = gl.getAttribLocation(program, "a_position");
    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);

    const positions = new Float32Array([
        0, 0,
        0, 1,
        1, 0,
        1, 1,
    ]);
    gl.bufferData(gl.ARRAY_BUFFER, positions, gl.STATIC_DRAW);
    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    gl.clearColor(0, 0, 0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);
    gl.useProgram(program);
    gl.enableVertexAttribArray(positionAttributeLocation);

    // Bind the position buffer.
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    const size = 2;
    const type = gl.FLOAT;
    const normalize = false;
    const stride = 0;
    const offset = 0;
    gl.vertexAttribPointer(positionAttributeLocation, size, type, normalize, stride, offset);

    const primitiveType = gl.TRIANGLES;
    const offset2 = 0;
    const count = 4;
    gl.drawArrays(primitiveType, offset2, count);



}
const handleError = (fn)=>{
    try {
      fn();
    } catch (error) {
      console.error("Error:", error);
    }
}

document.addEventListener("DOMContentLoaded", handleError.bind(null, init));

  
</script>
