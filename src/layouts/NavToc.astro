---
import "@styles/navbar.css";
---

<script>
  const init = function () {
    const mediaQuery = window.matchMedia("(max-width: 640px)");
    const linkStarts = new WeakMap();
    const linkEnds = new WeakMap();
    let isMobile = false;

    // 通用 IntersectionObserver 回调
    const intersectionCallback = (entries) => {
      entries.forEach(entry => {
        entry.target.classList.toggle("active", entry.isIntersecting);
      });
    };

    // 处理媒体查询变化
    const handleMediaChange = (e) => {
      isMobile = !e.matches;
      if (isMobile) {
        drawPath();
        updatePath();
      }
    };

    mediaQuery.onchange = handleMediaChange;
    handleMediaChange(mediaQuery);

    if (document.getElementById("目录")) {
      addIntersectionObserver();
      addResizeObserver();
    }

    function addIntersectionObserver() {
      const observer = new IntersectionObserver(sections => {
        sections.forEach(heading => {
          const id = heading.target.getAttribute("id");
          const link = document.querySelector(`#目录+ul li a[href="#${id}"]`);
          if (link) {
            link.classList.toggle("active", heading.intersectionRatio > 0);
          }
        });
        updatePath();
      });

      // 观察所有标题元素
      document.querySelectorAll("h2, h3, h4, h5").forEach(section => {
        observer.observe(section);
      });

      // 观察目录和页脚
      const tocElement = document.getElementById("目录");
      const footerElement = document.querySelector("footer.mt-auto");
      
      if (tocElement) {
        new IntersectionObserver(intersectionCallback).observe(tocElement);
      }
      if (footerElement) {
        new IntersectionObserver(intersectionCallback).observe(footerElement);
      }
    }

    function initSvg() {
      const appElement = document.querySelector("#目录+ul");
      if (!appElement) return;

      const svgElement = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "svg"
      );
      const pathElement = document.createElementNS(
        "http://www.w3.org/2000/svg",
        "path"
      );

      svgElement.classList.add("toc-progress");
      svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");

      pathElement.classList.add("toc-marker");
      pathElement.setAttribute("fill", "none");
      pathElement.setAttribute("stroke", "currentColor");
      pathElement.setAttribute("stroke-linecap", "round");
      pathElement.setAttribute("stroke-width", "2");
      pathElement.setAttribute("stroke-dashoffset", "1");
      pathElement.setAttribute("stroke-linejoin", "round");

      svgElement.appendChild(pathElement);
      appElement.appendChild(svgElement);
    }

    function addResizeObserver() {
      initSvg();
      if (!document.querySelector("#目录+ul")) return;
      const observer = new ResizeObserver(() => {
        if (isMobile) {
          drawPath();
          updatePath();
        }
      });
      observer.observe(document.querySelector("#目录+ul"));
    }

    function drawPath() {
      const path = document.querySelector("path.toc-marker");
      if (!path) return;

      const links = Array.from(document.querySelectorAll("#目录+ul a"));
      if (!links.length) {
        path.setAttribute("d", "M 0 0 L 0 20");
        return;
      }

      let pathData = [];
      let left = 0;

      links.forEach((link, i) => {
        const x = (link as HTMLElement).offsetLeft;
        const y = (link as HTMLElement).offsetTop;
        const height = (link as HTMLElement).offsetHeight;

        if (i === 0) {
          pathData.push("M", x, y, "L", x, y + height);
        } else {
          if (left !== x) pathData.push("L", left, y);
          pathData.push("L", x, y);
        }

        path.setAttribute("d", pathData.join(" "));
        linkStarts.set(link, i === 0 ? 0 : (path as SVGPathElement).getTotalLength());
        pathData.push("L", x, y + height);
        left = x;
        linkEnds.set(link, (path as SVGPathElement).getTotalLength());
      });
    }

    function updatePath() {
      const path = document.querySelector("path.toc-marker");
      if (!path) return;

      const pathLength = (path as SVGPathElement).getTotalLength();
      const activeLinks = document.querySelectorAll("#目录+ul a.active");

      if (activeLinks.length === 0) {
        (path as SVGPathElement).style.display = "inline";
        path.setAttribute("stroke-dasharray", `0 ${pathLength}`);
        return;
      }

      let [linkStart, linkEnd] = Array.from(activeLinks).reduce(
        ([min, max], link) => [
          Math.min(min, linkStarts.get(link)),
          Math.max(max, linkEnds.get(link))
        ],
        [pathLength, 0]
      );

      (path as SVGPathElement).style.display = "inline";
      path.setAttribute(
        "stroke-dasharray",
        `1 ${linkStart} ${linkEnd - linkStart} ${pathLength}`
      );
    }
  };

  init();
  document.addEventListener("astro:after-swap", init);
</script>

<style is:inline>
  svg.toc-progress {
    pointer-events: none;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  path.toc-marker {
    transition: stroke-dasharray 0.3s ease;
  }
</style>
