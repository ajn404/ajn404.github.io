{"version":3,"file":"CesiumComponent.CwqwGC6o.js","sources":["../../node_modules/.pnpm/@cesium+engine@17.0.0/node_modules/@cesium/engine/Source/Scene/ConditionsExpression.js","../../node_modules/.pnpm/@cesium+engine@17.0.0/node_modules/@cesium/engine/Source/Scene/Cesium3DTileStyle.js","../../node_modules/.pnpm/@cesium+engine@17.0.0/node_modules/@cesium/engine/Source/Scene/createOsmBuildingsAsync.js","../../src/components/react/little/CesiumComponent.tsx"],"sourcesContent":["import clone from \"../Core/clone.js\";\nimport defined from \"../Core/defined.js\";\nimport Expression from \"./Expression.js\";\n\n/**\n * An expression for a style applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates a conditions expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n * </p>\n * <p>\n * Implements the {@link StyleExpression} interface.\n * </p>\n *\n * @alias ConditionsExpression\n * @constructor\n *\n * @param {object} [conditionsExpression] The conditions expression defined using the 3D Tiles Styling language.\n * @param {object} [defines] Defines in the style.\n *\n * @example\n * const expression = new Cesium.ConditionsExpression({\n *     conditions : [\n *         ['${Area} > 10, 'color(\"#FF0000\")'],\n *         ['${id} !== \"1\"', 'color(\"#00FF00\")'],\n *         ['true', 'color(\"#FFFFFF\")']\n *     ]\n * });\n * expression.evaluateColor(feature, result); // returns a Cesium.Color object\n */\nfunction ConditionsExpression(conditionsExpression, defines) {\n  this._conditionsExpression = clone(conditionsExpression, true);\n  this._conditions = conditionsExpression.conditions;\n  this._runtimeConditions = undefined;\n\n  setRuntime(this, defines);\n}\n\nObject.defineProperties(ConditionsExpression.prototype, {\n  /**\n   * Gets the conditions expression defined in the 3D Tiles Styling language.\n   *\n   * @memberof ConditionsExpression.prototype\n   *\n   * @type {object}\n   * @readonly\n   *\n   * @default undefined\n   */\n  conditionsExpression: {\n    get: function () {\n      return this._conditionsExpression;\n    },\n  },\n});\n\nfunction Statement(condition, expression) {\n  this.condition = condition;\n  this.expression = expression;\n}\n\nfunction setRuntime(expression, defines) {\n  const runtimeConditions = [];\n  const conditions = expression._conditions;\n  if (!defined(conditions)) {\n    return;\n  }\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    const cond = String(statement[0]);\n    const condExpression = String(statement[1]);\n    runtimeConditions.push(\n      new Statement(\n        new Expression(cond, defines),\n        new Expression(condExpression, defines),\n      ),\n    );\n  }\n  expression._runtimeConditions = runtimeConditions;\n}\n\n/**\n * Evaluates the result of an expression, optionally using the provided feature's properties. If the result of\n * the expression in the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}\n * is of type <code>Boolean</code>, <code>Number</code>, or <code>String</code>, the corresponding JavaScript\n * primitive type will be returned. If the result is a <code>RegExp</code>, a Javascript <code>RegExp</code>\n * object will be returned. If the result is a <code>Cartesian2</code>, <code>Cartesian3</code>, or <code>Cartesian4</code>,\n * a {@link Cartesian2}, {@link Cartesian3}, or {@link Cartesian4} object will be returned. If the <code>result</code> argument is\n * a {@link Color}, the {@link Cartesian4} value is converted to a {@link Color} and then returned.\n *\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {object} [result] The object onto which to store the result.\n * @returns {boolean|number|string|RegExp|Cartesian2|Cartesian3|Cartesian4|Color} The result of evaluating the expression.\n */\nConditionsExpression.prototype.evaluate = function (feature, result) {\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions)) {\n    return undefined;\n  }\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluate(feature, result);\n    }\n  }\n};\n\n/**\n * Evaluates the result of a Color expression, using the values defined by a feature.\n * <p>\n * This is equivalent to {@link ConditionsExpression#evaluate} but always returns a {@link Color} object.\n * </p>\n * @param {Cesium3DTileFeature} feature The feature whose properties may be used as variables in the expression.\n * @param {Color} [result] The object in which to store the result\n * @returns {Color} The modified result parameter or a new Color instance if one was not provided.\n */\nConditionsExpression.prototype.evaluateColor = function (feature, result) {\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions)) {\n    return undefined;\n  }\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    if (statement.condition.evaluate(feature)) {\n      return statement.expression.evaluateColor(feature, result);\n    }\n  }\n};\n\n/**\n * Gets the shader function for this expression.\n * Returns undefined if the shader function can't be generated from this expression.\n *\n * @param {string} functionSignature Signature of the generated function.\n * @param {object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {object} shaderState Stores information about the generated shader function, including whether it is translucent.\n * @param {string} returnType The return type of the generated function.\n *\n * @returns {string} The shader function.\n *\n * @private\n */\nConditionsExpression.prototype.getShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState,\n  returnType,\n) {\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions) || conditions.length === 0) {\n    return undefined;\n  }\n\n  let shaderFunction = \"\";\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n\n    const condition = statement.condition.getShaderExpression(\n      variableSubstitutionMap,\n      shaderState,\n    );\n    const expression = statement.expression.getShaderExpression(\n      variableSubstitutionMap,\n      shaderState,\n    );\n\n    // Build the if/else chain from the list of conditions\n    shaderFunction +=\n      `    ${i === 0 ? \"if\" : \"else if\"} (${condition})\\n` +\n      `    {\\n` +\n      `        return ${expression};\\n` +\n      `    }\\n`;\n  }\n\n  shaderFunction =\n    `${returnType} ${functionSignature}\\n` +\n    `{\\n${shaderFunction}    return ${returnType}(1.0);\\n` + // Return a default value if no conditions are met\n    `}\\n`;\n\n  return shaderFunction;\n};\n\n/**\n * Gets the variables used by the expression.\n *\n * @returns {string[]} The variables used by the expression.\n *\n * @private\n */\nConditionsExpression.prototype.getVariables = function () {\n  let variables = [];\n\n  const conditions = this._runtimeConditions;\n  if (!defined(conditions) || conditions.length === 0) {\n    return variables;\n  }\n\n  const length = conditions.length;\n  for (let i = 0; i < length; ++i) {\n    const statement = conditions[i];\n    variables.push.apply(variables, statement.condition.getVariables());\n    variables.push.apply(variables, statement.expression.getVariables());\n  }\n\n  // Remove duplicates\n  variables = variables.filter(function (variable, index, variables) {\n    return variables.indexOf(variable) === index;\n  });\n\n  return variables;\n};\n\nexport default ConditionsExpression;\n","import clone from \"../Core/clone.js\";\nimport Frozen from \"../Core/Frozen.js\";\nimport defined from \"../Core/defined.js\";\nimport DeveloperError from \"../Core/DeveloperError.js\";\nimport Resource from \"../Core/Resource.js\";\nimport ConditionsExpression from \"./ConditionsExpression.js\";\nimport Expression from \"./Expression.js\";\n\n/**\n * A style that is applied to a {@link Cesium3DTileset}.\n * <p>\n * Evaluates an expression defined using the\n * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n * </p>\n *\n * @alias Cesium3DTileStyle\n * @constructor\n *\n * @param {object} [style] An object defining a style.\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : {\n *         conditions : [\n *             ['${Height} >= 100', 'color(\"purple\", 0.5)'],\n *             ['${Height} >= 50', 'color(\"red\")'],\n *             ['true', 'color(\"blue\")']\n *         ]\n *     },\n *     show : '${Height} > 0',\n *     meta : {\n *         description : '\"Building id ${id} has height ${Height}.\"'\n *     }\n * });\n *\n * @example\n * tileset.style = new Cesium.Cesium3DTileStyle({\n *     color : 'vec4(${Temperature})',\n *     pointSize : '${Temperature} * 2.0'\n * });\n *\n * @see {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}\n */\nfunction Cesium3DTileStyle(style) {\n  this._style = {};\n  this._ready = false;\n\n  this._show = undefined;\n  this._color = undefined;\n  this._pointSize = undefined;\n  this._pointOutlineColor = undefined;\n  this._pointOutlineWidth = undefined;\n  this._labelColor = undefined;\n  this._labelOutlineColor = undefined;\n  this._labelOutlineWidth = undefined;\n  this._font = undefined;\n  this._labelStyle = undefined;\n  this._labelText = undefined;\n  this._backgroundColor = undefined;\n  this._backgroundPadding = undefined;\n  this._backgroundEnabled = undefined;\n  this._scaleByDistance = undefined;\n  this._translucencyByDistance = undefined;\n  this._distanceDisplayCondition = undefined;\n  this._heightOffset = undefined;\n  this._anchorLineEnabled = undefined;\n  this._anchorLineColor = undefined;\n  this._image = undefined;\n  this._disableDepthTestDistance = undefined;\n  this._horizontalOrigin = undefined;\n  this._verticalOrigin = undefined;\n  this._labelHorizontalOrigin = undefined;\n  this._labelVerticalOrigin = undefined;\n  this._meta = undefined;\n\n  this._colorShaderFunction = undefined;\n  this._showShaderFunction = undefined;\n  this._pointSizeShaderFunction = undefined;\n  this._colorShaderFunctionReady = false;\n  this._showShaderFunctionReady = false;\n  this._pointSizeShaderFunctionReady = false;\n\n  this._colorShaderTranslucent = false;\n\n  setup(this, style);\n}\n\nfunction setup(that, styleJson) {\n  styleJson = clone(styleJson, true) ?? that._style;\n  that._style = styleJson;\n\n  that.show = styleJson.show;\n  that.color = styleJson.color;\n  that.pointSize = styleJson.pointSize;\n  that.pointOutlineColor = styleJson.pointOutlineColor;\n  that.pointOutlineWidth = styleJson.pointOutlineWidth;\n  that.labelColor = styleJson.labelColor;\n  that.labelOutlineColor = styleJson.labelOutlineColor;\n  that.labelOutlineWidth = styleJson.labelOutlineWidth;\n  that.labelStyle = styleJson.labelStyle;\n  that.font = styleJson.font;\n  that.labelText = styleJson.labelText;\n  that.backgroundColor = styleJson.backgroundColor;\n  that.backgroundPadding = styleJson.backgroundPadding;\n  that.backgroundEnabled = styleJson.backgroundEnabled;\n  that.scaleByDistance = styleJson.scaleByDistance;\n  that.translucencyByDistance = styleJson.translucencyByDistance;\n  that.distanceDisplayCondition = styleJson.distanceDisplayCondition;\n  that.heightOffset = styleJson.heightOffset;\n  that.anchorLineEnabled = styleJson.anchorLineEnabled;\n  that.anchorLineColor = styleJson.anchorLineColor;\n  that.image = styleJson.image;\n  that.disableDepthTestDistance = styleJson.disableDepthTestDistance;\n  that.horizontalOrigin = styleJson.horizontalOrigin;\n  that.verticalOrigin = styleJson.verticalOrigin;\n  that.labelHorizontalOrigin = styleJson.labelHorizontalOrigin;\n  that.labelVerticalOrigin = styleJson.labelVerticalOrigin;\n\n  const meta = {};\n  if (defined(styleJson.meta)) {\n    const defines = styleJson.defines;\n    const metaJson = styleJson.meta ?? Frozen.EMPTY_OBJECT;\n    for (const property in metaJson) {\n      if (metaJson.hasOwnProperty(property)) {\n        meta[property] = new Expression(metaJson[property], defines);\n      }\n    }\n  }\n\n  that._meta = meta;\n\n  that._ready = true;\n}\n\nfunction getExpression(tileStyle, value) {\n  const defines = (tileStyle._style ?? Frozen.EMPTY_OBJECT).defines;\n\n  if (!defined(value)) {\n    return undefined;\n  } else if (typeof value === \"boolean\" || typeof value === \"number\") {\n    return new Expression(String(value));\n  } else if (typeof value === \"string\") {\n    return new Expression(value, defines);\n  } else if (defined(value.conditions)) {\n    return new ConditionsExpression(value, defines);\n  }\n  return value;\n}\n\nfunction getJsonFromExpression(expression) {\n  if (!defined(expression)) {\n    return undefined;\n  } else if (defined(expression.expression)) {\n    return expression.expression;\n  } else if (defined(expression.conditionsExpression)) {\n    return clone(expression.conditionsExpression, true);\n  }\n  return expression;\n}\n\nObject.defineProperties(Cesium3DTileStyle.prototype, {\n  /**\n   * Gets the object defining the style using the\n   * {@link https://github.com/CesiumGS/3d-tiles/tree/main/specification/Styling|3D Tiles Styling language}.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {object}\n   * @readonly\n   *\n   * @default {}\n   */\n  style: {\n    get: function () {\n      return this._style;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>show</code> property. Alternatively a boolean, string, or object defining a show style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return or convert to a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     show : '(regExp(\"^Chest\").test(${County})) && (${YearBuilt} >= 1970)'\n   * });\n   * style.show.evaluate(feature); // returns true or false depending on the feature's properties\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a custom function\n   * style.show = {\n   *     evaluate : function(feature) {\n   *         return true;\n   *     }\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a boolean\n   * style.show = true;\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a string\n   * style.show = '${Height} > 0';\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override show expression with a condition\n   * style.show = {\n   *     conditions: [\n   *         ['${height} > 2', 'false'],\n   *         ['true', 'true']\n   *     ];\n   * };\n   */\n  show: {\n    get: function () {\n      return this._show;\n    },\n    set: function (value) {\n      this._show = getExpression(this, value);\n      this._style.show = getJsonFromExpression(this._show);\n      this._showShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>color</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is applicable to all tile formats.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     color : '(${Temperature} > 90) ? color(\"red\") : color(\"white\")'\n   * });\n   * style.color.evaluateColor(feature, result); // returns a Cesium.Color object\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a custom function\n   * style.color = {\n   *     evaluateColor : function(feature, result) {\n   *         return Cesium.Color.clone(Cesium.Color.WHITE, result);\n   *     }\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a string\n   * style.color = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override color expression with a condition\n   * style.color = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  color: {\n    get: function () {\n      return this._color;\n    },\n    set: function (value) {\n      this._color = getExpression(this, value);\n      this._style.color = getJsonFromExpression(this._color);\n      this._colorShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointSize</code> property. Alternatively a string or object defining a point size style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile or a Point Cloud tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     pointSize : '(${Temperature} > 90) ? 2.0 : 1.0'\n   * });\n   * style.pointSize.evaluate(feature); // returns a Number\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a custom function\n   * style.pointSize = {\n   *     evaluate : function(feature) {\n   *         return 1.0;\n   *     }\n   * };\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a number\n   * style.pointSize = 1.0;\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a string\n   * style.pointSize = '${height} / 10';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointSize expression with a condition\n   * style.pointSize =  {\n   *     conditions : [\n   *         ['${height} > 2', '1.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  pointSize: {\n    get: function () {\n      return this._pointSize;\n    },\n    set: function (value) {\n      this._pointSize = getExpression(this, value);\n      this._style.pointSize = getJsonFromExpression(this._pointSize);\n      this._pointSizeShaderFunctionReady = false;\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a string\n   * style.pointOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineColor expression with a condition\n   * style.pointOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  pointOutlineColor: {\n    get: function () {\n      return this._pointOutlineColor;\n    },\n    set: function (value) {\n      this._pointOutlineColor = getExpression(this, value);\n      this._style.pointOutlineColor = getJsonFromExpression(\n        this._pointOutlineColor,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>pointOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a string\n   * style.pointOutlineWidth = '5';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override pointOutlineWidth expression with a condition\n   * style.pointOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  pointOutlineWidth: {\n    get: function () {\n      return this._pointOutlineWidth;\n    },\n    set: function (value) {\n      this._pointOutlineWidth = getExpression(this, value);\n      this._style.pointOutlineWidth = getJsonFromExpression(\n        this._pointOutlineWidth,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a string\n   * style.labelColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelColor expression with a condition\n   * style.labelColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelColor: {\n    get: function () {\n      return this._labelColor;\n    },\n    set: function (value) {\n      this._labelColor = getExpression(this, value);\n      this._style.labelColor = getJsonFromExpression(this._labelColor);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a string\n   * style.labelOutlineColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineColor expression with a condition\n   * style.labelOutlineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  labelOutlineColor: {\n    get: function () {\n      return this._labelOutlineColor;\n    },\n    set: function (value) {\n      this._labelOutlineColor = getExpression(this, value);\n      this._style.labelOutlineColor = getJsonFromExpression(\n        this._labelOutlineColor,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelOutlineWidth</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a string\n   * style.labelOutlineWidth = '5';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelOutlineWidth expression with a condition\n   * style.labelOutlineWidth = {\n   *     conditions : [\n   *         ['${height} > 2', '5'],\n   *         ['true', '0']\n   *     ]\n   * };\n   */\n  labelOutlineWidth: {\n    get: function () {\n      return this._labelOutlineWidth;\n    },\n    set: function (value) {\n      this._labelOutlineWidth = getExpression(this, value);\n      this._style.labelOutlineWidth = getJsonFromExpression(\n        this._labelOutlineWidth,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>font</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     font : '(${Temperature} > 90) ? \"30px Helvetica\" : \"24px Helvetica\"'\n   * });\n   * style.font.evaluate(feature); // returns a String\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override font expression with a custom function\n   * style.font = {\n   *     evaluate : function(feature) {\n   *         return '24px Helvetica';\n   *     }\n   * };\n   */\n  font: {\n    get: function () {\n      return this._font;\n    },\n    set: function (value) {\n      this._font = getExpression(this, value);\n      this._style.font = getJsonFromExpression(this._font);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>label style</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>LabelStyle</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     labelStyle : `(\\${Temperature} > 90) ? ${LabelStyle.FILL_AND_OUTLINE} : ${LabelStyle.FILL}`\n   * });\n   * style.labelStyle.evaluate(feature); // returns a LabelStyle\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelStyle expression with a custom function\n   * style.labelStyle = {\n   *     evaluate : function(feature) {\n   *         return LabelStyle.FILL;\n   *     }\n   * };\n   */\n  labelStyle: {\n    get: function () {\n      return this._labelStyle;\n    },\n    set: function (value) {\n      this._labelStyle = getExpression(this, value);\n      this._style.labelStyle = getJsonFromExpression(this._labelStyle);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelText</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     labelText : '(${Temperature} > 90) ? \">90\" : \"<=90\"'\n   * });\n   * style.labelText.evaluate(feature); // returns a String\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelText expression with a custom function\n   * style.labelText = {\n   *     evaluate : function(feature) {\n   *         return 'Example label text';\n   *     }\n   * };\n   */\n  labelText: {\n    get: function () {\n      return this._labelText;\n    },\n    set: function (value) {\n      this._labelText = getExpression(this, value);\n      this._style.labelText = getJsonFromExpression(this._labelText);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a string\n   * style.backgroundColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundColor expression with a condition\n   * style.backgroundColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  backgroundColor: {\n    get: function () {\n      return this._backgroundColor;\n    },\n    set: function (value) {\n      this._backgroundColor = getExpression(this, value);\n      this._style.backgroundColor = getJsonFromExpression(\n        this._backgroundColor,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundPadding</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundPadding expression with a string\n   * style.backgroundPadding = 'vec2(5.0, 7.0)';\n   * style.backgroundPadding.evaluate(feature); // returns a Cartesian2\n   */\n  backgroundPadding: {\n    get: function () {\n      return this._backgroundPadding;\n    },\n    set: function (value) {\n      this._backgroundPadding = getExpression(this, value);\n      this._style.backgroundPadding = getJsonFromExpression(\n        this._backgroundPadding,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>backgroundEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a string\n   * style.backgroundEnabled = 'true';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override backgroundEnabled expression with a condition\n   * style.backgroundEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  backgroundEnabled: {\n    get: function () {\n      return this._backgroundEnabled;\n    },\n    set: function (value) {\n      this._backgroundEnabled = getExpression(this, value);\n      this._style.backgroundEnabled = getJsonFromExpression(\n        this._backgroundEnabled,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>scaleByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override scaleByDistance expression with a string\n   * style.scaleByDistance = 'vec4(1.5e2, 2.0, 1.5e7, 0.5)';\n   * style.scaleByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  scaleByDistance: {\n    get: function () {\n      return this._scaleByDistance;\n    },\n    set: function (value) {\n      this._scaleByDistance = getExpression(this, value);\n      this._style.scaleByDistance = getJsonFromExpression(\n        this._scaleByDistance,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>translucencyByDistance</code> property. Alternatively a string or object defining a vec4 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian4</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override translucencyByDistance expression with a string\n   * style.translucencyByDistance = 'vec4(1.5e2, 1.0, 1.5e7, 0.2)';\n   * style.translucencyByDistance.evaluate(feature); // returns a Cartesian4\n   */\n  translucencyByDistance: {\n    get: function () {\n      return this._translucencyByDistance;\n    },\n    set: function (value) {\n      this._translucencyByDistance = getExpression(this, value);\n      this._style.translucencyByDistance = getJsonFromExpression(\n        this._translucencyByDistance,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>distanceDisplayCondition</code> property. Alternatively a string or object defining a vec2 style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Cartesian2</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override distanceDisplayCondition expression with a string\n   * style.distanceDisplayCondition = 'vec2(0.0, 5.5e6)';\n   * style.distanceDisplayCondition.evaluate(feature); // returns a Cartesian2\n   */\n  distanceDisplayCondition: {\n    get: function () {\n      return this._distanceDisplayCondition;\n    },\n    set: function (value) {\n      this._distanceDisplayCondition = getExpression(this, value);\n      this._style.distanceDisplayCondition = getJsonFromExpression(\n        this._distanceDisplayCondition,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>heightOffset</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a string\n   * style.heightOffset = '2.0';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override heightOffset expression with a condition\n   * style.heightOffset = {\n   *     conditions : [\n   *         ['${height} > 2', '4.0'],\n   *         ['true', '2.0']\n   *     ]\n   * };\n   */\n  heightOffset: {\n    get: function () {\n      return this._heightOffset;\n    },\n    set: function (value) {\n      this._heightOffset = getExpression(this, value);\n      this._style.heightOffset = getJsonFromExpression(this._heightOffset);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineEnabled</code> property. Alternatively a string or object defining a boolean style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Boolean</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a string\n   * style.anchorLineEnabled = 'true';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineEnabled expression with a condition\n   * style.anchorLineEnabled = {\n   *     conditions : [\n   *         ['${height} > 2', 'true'],\n   *         ['true', 'false']\n   *     ]\n   * };\n   */\n  anchorLineEnabled: {\n    get: function () {\n      return this._anchorLineEnabled;\n    },\n    set: function (value) {\n      this._anchorLineEnabled = getExpression(this, value);\n      this._style.anchorLineEnabled = getJsonFromExpression(\n        this._anchorLineEnabled,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>anchorLineColor</code> property. Alternatively a string or object defining a color style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Color</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a string\n   * style.anchorLineColor = 'color(\"blue\")';\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override anchorLineColor expression with a condition\n   * style.anchorLineColor = {\n   *     conditions : [\n   *         ['${height} > 2', 'color(\"cyan\")'],\n   *         ['true', 'color(\"blue\")']\n   *     ]\n   * };\n   */\n  anchorLineColor: {\n    get: function () {\n      return this._anchorLineColor;\n    },\n    set: function (value) {\n      this._anchorLineColor = getExpression(this, value);\n      this._style.anchorLineColor = getJsonFromExpression(\n        this._anchorLineColor,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>image</code> property. Alternatively a string or object defining a string style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>String</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     image : '(${Temperature} > 90) ? \"/url/to/image1\" : \"/url/to/image2\"'\n   * });\n   * style.image.evaluate(feature); // returns a String\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override image expression with a custom function\n   * style.image = {\n   *     evaluate : function(feature) {\n   *         return '/url/to/image';\n   *     }\n   * };\n   */\n  image: {\n    get: function () {\n      return this._image;\n    },\n    set: function (value) {\n      this._image = getExpression(this, value);\n      this._style.image = getJsonFromExpression(this._image);\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>disableDepthTestDistance</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>Number</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override disableDepthTestDistance expression with a string\n   * style.disableDepthTestDistance = '1000.0';\n   * style.disableDepthTestDistance.evaluate(feature); // returns a Number\n   */\n  disableDepthTestDistance: {\n    get: function () {\n      return this._disableDepthTestDistance;\n    },\n    set: function (value) {\n      this._disableDepthTestDistance = getExpression(this, value);\n      this._style.disableDepthTestDistance = getJsonFromExpression(\n        this._disableDepthTestDistance,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>horizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>HorizontalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     horizontalOrigin : HorizontalOrigin.LEFT\n   * });\n   * style.horizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override horizontalOrigin expression with a custom function\n   * style.horizontalOrigin = {\n   *     evaluate : function(feature) {\n   *         return HorizontalOrigin.CENTER;\n   *     }\n   * };\n   */\n  horizontalOrigin: {\n    get: function () {\n      return this._horizontalOrigin;\n    },\n    set: function (value) {\n      this._horizontalOrigin = getExpression(this, value);\n      this._style.horizontalOrigin = getJsonFromExpression(\n        this._horizontalOrigin,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>verticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     verticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.verticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override verticalOrigin expression with a custom function\n   * style.verticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  verticalOrigin: {\n    get: function () {\n      return this._verticalOrigin;\n    },\n    set: function (value) {\n      this._verticalOrigin = getExpression(this, value);\n      this._style.verticalOrigin = getJsonFromExpression(this._verticalOrigin);\n    },\n  },\n\n  /**\n   Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelHorizontalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n    * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n    * <p>\n    * The expression must return a <code>HorizontalOrigin</code>.\n    * </p>\n    * <p>\n    * This expression is only applicable to point features in a Vector tile.\n    * </p>\n    *\n    * @memberof Cesium3DTileStyle.prototype\n    *\n    * @type {StyleExpression}\n    *\n    * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n    *\n    * @example\n    * const style = new Cesium3DTileStyle({\n    *     labelHorizontalOrigin : HorizontalOrigin.LEFT\n    * });\n    * style.labelHorizontalOrigin.evaluate(feature); // returns a HorizontalOrigin\n    *\n    * @example\n    * const style = new Cesium.Cesium3DTileStyle();\n    * // Override labelHorizontalOrigin expression with a custom function\n    * style.labelHorizontalOrigin = {\n    *     evaluate : function(feature) {\n    *         return HorizontalOrigin.CENTER;\n    *     }\n    * };\n    */\n  labelHorizontalOrigin: {\n    get: function () {\n      return this._labelHorizontalOrigin;\n    },\n    set: function (value) {\n      this._labelHorizontalOrigin = getExpression(this, value);\n      this._style.labelHorizontalOrigin = getJsonFromExpression(\n        this._labelHorizontalOrigin,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the {@link StyleExpression} object used to evaluate the style's <code>labelVerticalOrigin</code> property. Alternatively a string or object defining a number style can be used.\n   * The getter will return the internal {@link Expression} or {@link ConditionsExpression}, which may differ from the value provided to the setter.\n   * <p>\n   * The expression must return a <code>VerticalOrigin</code>.\n   * </p>\n   * <p>\n   * This expression is only applicable to point features in a Vector tile.\n   * </p>\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @experimental This feature is using part of the 3D Tiles spec that is not final and is subject to change without Cesium's standard deprecation policy.\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     labelVerticalOrigin : VerticalOrigin.TOP\n   * });\n   * style.labelVerticalOrigin.evaluate(feature); // returns a VerticalOrigin\n   *\n   * @example\n   * const style = new Cesium.Cesium3DTileStyle();\n   * // Override labelVerticalOrigin expression with a custom function\n   * style.labelVerticalOrigin = {\n   *     evaluate : function(feature) {\n   *         return VerticalOrigin.CENTER;\n   *     }\n   * };\n   */\n  labelVerticalOrigin: {\n    get: function () {\n      return this._labelVerticalOrigin;\n    },\n    set: function (value) {\n      this._labelVerticalOrigin = getExpression(this, value);\n      this._style.labelVerticalOrigin = getJsonFromExpression(\n        this._labelVerticalOrigin,\n      );\n    },\n  },\n\n  /**\n   * Gets or sets the object containing application-specific expression that can be explicitly\n   * evaluated, e.g., for display in a UI.\n   *\n   * @memberof Cesium3DTileStyle.prototype\n   *\n   * @type {StyleExpression}\n   *\n   * @example\n   * const style = new Cesium3DTileStyle({\n   *     meta : {\n   *         description : '\"Building id ${id} has height ${Height}.\"'\n   *     }\n   * });\n   * style.meta.description.evaluate(feature); // returns a String with the substituted variables\n   */\n  meta: {\n    get: function () {\n      return this._meta;\n    },\n    set: function (value) {\n      this._meta = value;\n    },\n  },\n});\n\n/**\n * Asynchronously creates a Cesium3DTileStyle from a url.\n *\n * @param {Resource|string} url The url of the style to be loaded.\n *\n * @returns {Promise<Cesium3DTileStyle>} A promise which resolves to the created style\n *\n * @private\n */\nCesium3DTileStyle.fromUrl = function (url) {\n  //>>includeStart('debug', pragmas.debug);\n  if (!defined(url)) {\n    throw new DeveloperError(\"url is required\");\n  }\n  //>>includeEnd('debug');\n\n  const resource = Resource.createIfNeeded(url);\n  return resource.fetchJson(url).then(function (styleJson) {\n    return new Cesium3DTileStyle(styleJson);\n  });\n};\n\n/**\n * Gets the color shader function for this style.\n *\n * @param {string} functionSignature Signature of the generated function.\n * @param {object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {string} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getColorShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState,\n) {\n  if (this._colorShaderFunctionReady) {\n    shaderState.translucent = this._colorShaderTranslucent;\n    // Return the cached result, may be undefined\n    return this._colorShaderFunction;\n  }\n\n  this._colorShaderFunctionReady = true;\n  if (defined(this.color) && defined(this.color.getShaderFunction)) {\n    this._colorShaderFunction = this.color.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"vec4\",\n    );\n  } else {\n    this._colorShaderFunction = undefined;\n  }\n\n  this._colorShaderTranslucent = shaderState.translucent;\n  return this._colorShaderFunction;\n};\n\n/**\n * Gets the show shader function for this style.\n *\n * @param {string} functionSignature Signature of the generated function.\n * @param {object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {string} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getShowShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState,\n) {\n  if (this._showShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._showShaderFunction;\n  }\n\n  this._showShaderFunctionReady = true;\n\n  if (defined(this.show) && defined(this.show.getShaderFunction)) {\n    this._showShaderFunction = this.show.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"bool\",\n    );\n  } else {\n    this._showShaderFunction = undefined;\n  }\n  return this._showShaderFunction;\n};\n\n/**\n * Gets the pointSize shader function for this style.\n *\n * @param {string} functionSignature Signature of the generated function.\n * @param {object} variableSubstitutionMap Maps variable names to shader variable names.\n * @param {object} shaderState Stores information about the generated shader function, including whether it is translucent.\n *\n * @returns {string} The shader function.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getPointSizeShaderFunction = function (\n  functionSignature,\n  variableSubstitutionMap,\n  shaderState,\n) {\n  if (this._pointSizeShaderFunctionReady) {\n    // Return the cached result, may be undefined\n    return this._pointSizeShaderFunction;\n  }\n\n  this._pointSizeShaderFunctionReady = true;\n  if (defined(this.pointSize) && defined(this.pointSize.getShaderFunction)) {\n    this._pointSizeShaderFunction = this.pointSize.getShaderFunction(\n      functionSignature,\n      variableSubstitutionMap,\n      shaderState,\n      \"float\",\n    );\n  } else {\n    this._pointSizeShaderFunction = undefined;\n  }\n\n  return this._pointSizeShaderFunction;\n};\n\n/**\n * Gets the variables used by the style.\n *\n * @returns {string[]} The variables used by the style.\n *\n * @private\n */\nCesium3DTileStyle.prototype.getVariables = function () {\n  let variables = [];\n\n  if (defined(this.color) && defined(this.color.getVariables)) {\n    variables.push.apply(variables, this.color.getVariables());\n  }\n\n  if (defined(this.show) && defined(this.show.getVariables)) {\n    variables.push.apply(variables, this.show.getVariables());\n  }\n\n  if (defined(this.pointSize) && defined(this.pointSize.getVariables)) {\n    variables.push.apply(variables, this.pointSize.getVariables());\n  }\n\n  // Remove duplicates\n  variables = variables.filter(function (variable, index, variables) {\n    return variables.indexOf(variable) === index;\n  });\n\n  return variables;\n};\n\nexport default Cesium3DTileStyle;\n","import Color from \"../Core/Color.js\";\nimport Frozen from \"../Core/Frozen.js\";\nimport defined from \"../Core/defined.js\";\nimport Cesium3DTileset from \"./Cesium3DTileset.js\";\nimport Cesium3DTileStyle from \"./Cesium3DTileStyle.js\";\n\n/**\n * Creates a {@link Cesium3DTileset} instance for the\n * {@link https://cesium.com/content/cesium-osm-buildings/|Cesium OSM Buildings}\n * tileset.\n *\n * @function\n *\n * @param {object} [options] Construction options. Any options allowed by the {@link Cesium3DTileset} constructor\n *        may be specified here. In addition to those, the following properties are supported:\n * @param {Color} [options.defaultColor=Color.WHITE] The default color to use for buildings\n *        that do not have a color. This parameter is ignored if <code>options.style</code> is specified.\n * @param {Cesium3DTileStyle} [options.style] The style to use with the tileset. If not\n *        specified, a default style is used which gives each building or building part a\n *        color inferred from its OpenStreetMap <code>tags</code>. If no color can be inferred,\n *        <code>options.defaultColor</code> is used.\n * @param {boolean} [options.enableShowOutline=true] If true, enable rendering outlines. This can be set to false to avoid the additional processing of geometry at load time.\n * @param {boolean} [options.showOutline=true] Whether to show outlines around buildings. When true,\n *        outlines are displayed. When false, outlines are not displayed.\n * @returns {Promise<Cesium3DTileset>}\n *\n * @see Ion\n *\n * @example\n * // Create Cesium OSM Buildings with default styling\n * const viewer = new Cesium.Viewer(\"cesiumContainer\");\n * try {\n *   const tileset = await Cesium.createOsmBuildingsAsync();\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n *\n * @example\n * // Create Cesium OSM Buildings with a custom style highlighting\n * // schools and hospitals.\n * const viewer = new Cesium.Viewer(\"cesiumContainer\");\n * try {\n *   const tileset = await Cesium.createOsmBuildingsAsync({\n *     style: new Cesium.Cesium3DTileStyle({\n *       color: {\n *         conditions: [\n *           [\"${feature['building']} === 'hospital'\", \"color('#0000FF')\"],\n *           [\"${feature['building']} === 'school'\", \"color('#00FF00')\"],\n *           [true, \"color('#ffffff')\"]\n *         ]\n *       }\n *     })\n *   });\n *   viewer.scene.primitives.add(tileset));\n * } catch (error) {\n *   console.log(`Error creating tileset: ${error}`);\n * }\n */\nasync function createOsmBuildingsAsync(options) {\n  const tileset = await Cesium3DTileset.fromIonAssetId(96188, options);\n\n  options = options ?? Frozen.EMPTY_OBJECT;\n\n  let style = options.style;\n\n  if (!defined(style)) {\n    const color = (options.defaultColor ?? Color.WHITE).toCssColorString();\n    style = new Cesium3DTileStyle({\n      color: `Boolean(\\${feature['cesium#color']}) ? color(\\${feature['cesium#color']}) : ${color}`,\n    });\n  }\n\n  tileset.style = style;\n\n  return tileset;\n}\n\nexport default createOsmBuildingsAsync;\n","import React, { useEffect } from \"react\";\nimport {\n  Cartesian3,\n  Math as CesiumMath,\n  Terrain,\n  Viewer,\n  createOsmBuildingsAsync,\n  Ion,\n  Math,\n} from \"cesium\";\n\nimport * as Cesium from \"cesium\";\n\nimport \"cesium/Build/Cesium/Widgets/widgets.css\";\nconst token = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwOWRkMzFlYS0yMDVhLTRkNzYtYWJmMC1hMmE1NjljN2MyNjMiLCJpZCI6NzMzNDQsImlhdCI6MTYzNjgxNDEzNX0.Q2MfD_lkQgsJ-R3NPfYjS9QA9q_j4Py8DktYKsPmZNg`;\n\nconst CesiumComponent: React.FC = () => {\n  useEffect(() => {\n    Ion.defaultAccessToken = token;\n    const viewer = new Viewer(\"cesiumContainer\", {\n      infoBox: false,\n      terrain: Terrain.fromWorldTerrain(),\n    });\n    // 确保场景已加载完成\n    viewer.scene.globe.tileLoadProgressEvent.addEventListener(function (event) {\n      if (event.tilesLoaded === event.tilesToRender) {\n        // 场景已加载完成,可以切换到 2D 模式\n        //   viewer.scene.mode = SceneMode.SCENE2D;\n        // console.log(viewer.animation?.container);\n      }\n    });\n\n    viewer.entities.add({\n      rectangle: {\n        coordinates: Cesium.Rectangle.fromDegrees(\n          116.407,\n          39.904,\n          116.41,\n          39.914\n        ),\n        material: new Cesium.StripeMaterialProperty({\n          evenColor: Cesium.Color.BLACK,\n          oddColor: Cesium.Color.RED,\n          repeat: 5,\n        }),\n      },\n    });\n\n    viewer.camera.flyTo({\n      destination: Cartesian3.fromDegrees(116.4085, 39.896, 500),\n      orientation: {\n        heading: CesiumMath.toRadians(0.0),\n        pitch: CesiumMath.toRadians(-15.0),\n      },\n    });\n\n    viewer.camera.setView({\n      destination: Cartesian3.fromDegrees(116.404, 39.915, 1000000),\n      orientation: {\n        heading: Math.toRadians(0),\n        pitch: Math.toRadians(-90),\n        roll: Math.toRadians(0),\n      },\n    });\n\n    createOsmBuildingsAsync().then(buildingTileset => {\n      viewer.scene.primitives.add(buildingTileset);\n    });\n  }, []);\n\n  return (\n    <>\n      <div id=\"cesiumContainer\"></div>\n    </>\n  );\n};\n\nexport default CesiumComponent;\n"],"names":["ConditionsExpression","conditionsExpression","defines","clone","setRuntime","Statement","condition","expression","runtimeConditions","conditions","defined","length","i","statement","cond","condExpression","Expression","feature","result","functionSignature","variableSubstitutionMap","shaderState","returnType","shaderFunction","variables","variable","index","Cesium3DTileStyle","style","setup","that","styleJson","meta","metaJson","Frozen","property","getExpression","tileStyle","value","getJsonFromExpression","url","DeveloperError","Resource","createOsmBuildingsAsync","options","tileset","Cesium3DTileset","color","Color","token","CesiumComponent","useEffect","Ion","viewer","Viewer","Terrain","event","Cesium.Rectangle","Cesium.StripeMaterialProperty","Cesium.Color","Cartesian3","CesiumMath","Math","buildingTileset","jsx","Fragment"],"mappings":"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","x_google_ignoreList":[0,1,2]}