{"version":3,"file":"y.Bvvcn8Rw.js","sources":["../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/add.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/cover.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/data.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/extent.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/quad.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/find.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/remove.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/root.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/size.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/visit.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/visitAfter.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/x.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/y.js","../../node_modules/.pnpm/d3-quadtree@3.0.1/node_modules/d3-quadtree/src/quadtree.js","../../node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/constant.js","../../node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/jiggle.js","../../node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/link.js","../../node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/lcg.js","../../node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/simulation.js","../../node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/manyBody.js","../../node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/x.js","../../node_modules/.pnpm/d3-force@3.0.0/node_modules/d3-force/src/y.js"],"sourcesContent":["export default function(d) {\n  const x = +this._x.call(null, d),\n      y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0).cover(x1, y1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n      i = (y < y0) << 1 | (x < x0);\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z, y1 = y0 + z; break;\n        case 1: x0 = x1 - z, y1 = y0 + z; break;\n        case 2: x1 = x0 + z, y0 = y1 - z; break;\n        case 3: x0 = x1 - z, y0 = y1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n}\n","export default function(node, x0, y0, x1, y1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.x1 = x1;\n  this.y1 = y1;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1,\n      x,\n      y,\n      xm,\n      ym,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n    }\n  }\n  return this;\n}\n","import Quad from \"./quad.js\";\n\nexport default function(callback) {\n  var quads = [], next = [], q;\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\n  }\n  return this;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n","import tree_add, {addAll as tree_addAll} from \"./add.js\";\nimport tree_cover from \"./cover.js\";\nimport tree_data from \"./data.js\";\nimport tree_extent from \"./extent.js\";\nimport tree_find from \"./find.js\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove.js\";\nimport tree_root from \"./root.js\";\nimport tree_size from \"./size.js\";\nimport tree_visit from \"./visit.js\";\nimport tree_visitAfter from \"./visitAfter.js\";\nimport tree_x, {defaultX} from \"./x.js\";\nimport tree_y, {defaultY} from \"./y.js\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(random) {\n  return (random() - 0.5) * 1e-6;\n}\n","import constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\n\nfunction index(d) {\n  return d.index;\n}\n\nfunction find(nodeById, nodeId) {\n  var node = nodeById.get(nodeId);\n  if (!node) throw new Error(\"node not found: \" + nodeId);\n  return node;\n}\n\nexport default function(links) {\n  var id = index,\n      strength = defaultStrength,\n      strengths,\n      distance = constant(30),\n      distances,\n      nodes,\n      count,\n      bias,\n      random,\n      iterations = 1;\n\n  if (links == null) links = [];\n\n  function defaultStrength(link) {\n    return 1 / Math.min(count[link.source.index], count[link.target.index]);\n  }\n\n  function force(alpha) {\n    for (var k = 0, n = links.length; k < iterations; ++k) {\n      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {\n        link = links[i], source = link.source, target = link.target;\n        x = target.x + target.vx - source.x - source.vx || jiggle(random);\n        y = target.y + target.vy - source.y - source.vy || jiggle(random);\n        l = Math.sqrt(x * x + y * y);\n        l = (l - distances[i]) / l * alpha * strengths[i];\n        x *= l, y *= l;\n        target.vx -= x * (b = bias[i]);\n        target.vy -= y * b;\n        source.vx += x * (b = 1 - b);\n        source.vy += y * b;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n\n    var i,\n        n = nodes.length,\n        m = links.length,\n        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),\n        link;\n\n    for (i = 0, count = new Array(n); i < m; ++i) {\n      link = links[i], link.index = i;\n      if (typeof link.source !== \"object\") link.source = find(nodeById, link.source);\n      if (typeof link.target !== \"object\") link.target = find(nodeById, link.target);\n      count[link.source.index] = (count[link.source.index] || 0) + 1;\n      count[link.target.index] = (count[link.target.index] || 0) + 1;\n    }\n\n    for (i = 0, bias = new Array(m); i < m; ++i) {\n      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);\n    }\n\n    strengths = new Array(m), initializeStrength();\n    distances = new Array(m), initializeDistance();\n  }\n\n  function initializeStrength() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      strengths[i] = +strength(links[i], i, links);\n    }\n  }\n\n  function initializeDistance() {\n    if (!nodes) return;\n\n    for (var i = 0, n = links.length; i < n; ++i) {\n      distances[i] = +distance(links[i], i, links);\n    }\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.links = function(_) {\n    return arguments.length ? (links = _, initialize(), force) : links;\n  };\n\n  force.id = function(_) {\n    return arguments.length ? (id = _, force) : id;\n  };\n\n  force.iterations = function(_) {\n    return arguments.length ? (iterations = +_, force) : iterations;\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initializeStrength(), force) : strength;\n  };\n\n  force.distance = function(_) {\n    return arguments.length ? (distance = typeof _ === \"function\" ? _ : constant(+_), initializeDistance(), force) : distance;\n  };\n\n  return force;\n}\n","// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\nconst a = 1664525;\nconst c = 1013904223;\nconst m = 4294967296; // 2^32\n\nexport default function() {\n  let s = 1;\n  return () => (s = (a * s + c) % m) / m;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer} from \"d3-timer\";\nimport lcg from \"./lcg.js\";\n\nexport function x(d) {\n  return d.x;\n}\n\nexport function y(d) {\n  return d.y;\n}\n\nvar initialRadius = 10,\n    initialAngle = Math.PI * (3 - Math.sqrt(5));\n\nexport default function(nodes) {\n  var simulation,\n      alpha = 1,\n      alphaMin = 0.001,\n      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),\n      alphaTarget = 0,\n      velocityDecay = 0.6,\n      forces = new Map(),\n      stepper = timer(step),\n      event = dispatch(\"tick\", \"end\"),\n      random = lcg();\n\n  if (nodes == null) nodes = [];\n\n  function step() {\n    tick();\n    event.call(\"tick\", simulation);\n    if (alpha < alphaMin) {\n      stepper.stop();\n      event.call(\"end\", simulation);\n    }\n  }\n\n  function tick(iterations) {\n    var i, n = nodes.length, node;\n\n    if (iterations === undefined) iterations = 1;\n\n    for (var k = 0; k < iterations; ++k) {\n      alpha += (alphaTarget - alpha) * alphaDecay;\n\n      forces.forEach(function(force) {\n        force(alpha);\n      });\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        if (node.fx == null) node.x += node.vx *= velocityDecay;\n        else node.x = node.fx, node.vx = 0;\n        if (node.fy == null) node.y += node.vy *= velocityDecay;\n        else node.y = node.fy, node.vy = 0;\n      }\n    }\n\n    return simulation;\n  }\n\n  function initializeNodes() {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.index = i;\n      if (node.fx != null) node.x = node.fx;\n      if (node.fy != null) node.y = node.fy;\n      if (isNaN(node.x) || isNaN(node.y)) {\n        var radius = initialRadius * Math.sqrt(0.5 + i), angle = i * initialAngle;\n        node.x = radius * Math.cos(angle);\n        node.y = radius * Math.sin(angle);\n      }\n      if (isNaN(node.vx) || isNaN(node.vy)) {\n        node.vx = node.vy = 0;\n      }\n    }\n  }\n\n  function initializeForce(force) {\n    if (force.initialize) force.initialize(nodes, random);\n    return force;\n  }\n\n  initializeNodes();\n\n  return simulation = {\n    tick: tick,\n\n    restart: function() {\n      return stepper.restart(step), simulation;\n    },\n\n    stop: function() {\n      return stepper.stop(), simulation;\n    },\n\n    nodes: function(_) {\n      return arguments.length ? (nodes = _, initializeNodes(), forces.forEach(initializeForce), simulation) : nodes;\n    },\n\n    alpha: function(_) {\n      return arguments.length ? (alpha = +_, simulation) : alpha;\n    },\n\n    alphaMin: function(_) {\n      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;\n    },\n\n    alphaDecay: function(_) {\n      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;\n    },\n\n    alphaTarget: function(_) {\n      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;\n    },\n\n    velocityDecay: function(_) {\n      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;\n    },\n\n    randomSource: function(_) {\n      return arguments.length ? (random = _, forces.forEach(initializeForce), simulation) : random;\n    },\n\n    force: function(name, _) {\n      return arguments.length > 1 ? ((_ == null ? forces.delete(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);\n    },\n\n    find: function(x, y, radius) {\n      var i = 0,\n          n = nodes.length,\n          dx,\n          dy,\n          d2,\n          node,\n          closest;\n\n      if (radius == null) radius = Infinity;\n      else radius *= radius;\n\n      for (i = 0; i < n; ++i) {\n        node = nodes[i];\n        dx = x - node.x;\n        dy = y - node.y;\n        d2 = dx * dx + dy * dy;\n        if (d2 < radius) closest = node, radius = d2;\n      }\n\n      return closest;\n    },\n\n    on: function(name, _) {\n      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);\n    }\n  };\n}\n","import {quadtree} from \"d3-quadtree\";\nimport constant from \"./constant.js\";\nimport jiggle from \"./jiggle.js\";\nimport {x, y} from \"./simulation.js\";\n\nexport default function() {\n  var nodes,\n      node,\n      random,\n      alpha,\n      strength = constant(-30),\n      strengths,\n      distanceMin2 = 1,\n      distanceMax2 = Infinity,\n      theta2 = 0.81;\n\n  function force(_) {\n    var i, n = nodes.length, tree = quadtree(nodes, x, y).visitAfter(accumulate);\n    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length, node;\n    strengths = new Array(n);\n    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);\n  }\n\n  function accumulate(quad) {\n    var strength = 0, q, c, weight = 0, x, y, i;\n\n    // For internal nodes, accumulate forces from child quadrants.\n    if (quad.length) {\n      for (x = y = i = 0; i < 4; ++i) {\n        if ((q = quad[i]) && (c = Math.abs(q.value))) {\n          strength += q.value, weight += c, x += c * q.x, y += c * q.y;\n        }\n      }\n      quad.x = x / weight;\n      quad.y = y / weight;\n    }\n\n    // For leaf nodes, accumulate forces from coincident quadrants.\n    else {\n      q = quad;\n      q.x = q.data.x;\n      q.y = q.data.y;\n      do strength += strengths[q.data.index];\n      while (q = q.next);\n    }\n\n    quad.value = strength;\n  }\n\n  function apply(quad, x1, _, x2) {\n    if (!quad.value) return true;\n\n    var x = quad.x - node.x,\n        y = quad.y - node.y,\n        w = x2 - x1,\n        l = x * x + y * y;\n\n    // Apply the Barnes-Hut approximation if possible.\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (w * w / theta2 < l) {\n      if (l < distanceMax2) {\n        if (x === 0) x = jiggle(random), l += x * x;\n        if (y === 0) y = jiggle(random), l += y * y;\n        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n        node.vx += x * quad.value * alpha / l;\n        node.vy += y * quad.value * alpha / l;\n      }\n      return true;\n    }\n\n    // Otherwise, process points directly.\n    else if (quad.length || l >= distanceMax2) return;\n\n    // Limit forces for very close nodes; randomize direction if coincident.\n    if (quad.data !== node || quad.next) {\n      if (x === 0) x = jiggle(random), l += x * x;\n      if (y === 0) y = jiggle(random), l += y * y;\n      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);\n    }\n\n    do if (quad.data !== node) {\n      w = strengths[quad.data.index] * alpha / l;\n      node.vx += x * w;\n      node.vy += y * w;\n    } while (quad = quad.next);\n  }\n\n  force.initialize = function(_nodes, _random) {\n    nodes = _nodes;\n    random = _random;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.distanceMin = function(_) {\n    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);\n  };\n\n  force.distanceMax = function(_) {\n    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);\n  };\n\n  force.theta = function(_) {\n    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(x) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      xz;\n\n  if (typeof x !== \"function\") x = constant(x == null ? 0 : +x);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    xz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : x;\n  };\n\n  return force;\n}\n","import constant from \"./constant.js\";\n\nexport default function(y) {\n  var strength = constant(0.1),\n      nodes,\n      strengths,\n      yz;\n\n  if (typeof y !== \"function\") y = constant(y == null ? 0 : +y);\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length, node; i < n; ++i) {\n      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i, n = nodes.length;\n    strengths = new Array(n);\n    yz = new Array(n);\n    for (i = 0; i < n; ++i) {\n      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function(_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.strength = function(_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : y;\n  };\n\n  return force;\n}\n"],"names":["tree_add","d","x","y","add","tree","parent","node","leaf","x0","y0","x1","y1","xm","ym","xp","yp","right","bottom","i","j","addAll","data","n","xz","yz","tree_cover","z","tree_data","tree_extent","_","Quad","tree_find","radius","x2","y2","x3","y3","quads","q","dx","dy","d2","tree_remove","retainer","previous","next","removeAll","tree_root","tree_size","size","tree_visit","callback","child","tree_visitAfter","defaultX","tree_x","defaultY","tree_y","quadtree","nodes","Quadtree","leaf_copy","copy","treeProto","tree_addAll","tree_removeAll","constant","jiggle","random","index","find","nodeById","nodeId","link","links","id","strength","defaultStrength","strengths","distance","distances","count","bias","iterations","force","alpha","k","source","target","l","b","initialize","m","initializeStrength","initializeDistance","_nodes","_random","a","c","lcg","s","initialRadius","initialAngle","simulation","alphaMin","alphaDecay","alphaTarget","velocityDecay","forces","stepper","timer","step","event","dispatch","tick","initializeNodes","angle","initializeForce","name","closest","manyBody","distanceMin2","distanceMax2","theta2","accumulate","apply","quad","weight","w"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]}