{"version":3,"file":"demo.Ce3dZ1NZ.js","sources":["../../src/components/react/cesium/customShader/demo.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { Viewer } from \"cesium\";\nimport { Ion } from \"cesium\";\nimport * as Cesium from \"cesium\";\nimport \"cesium/Build/Cesium/Widgets/widgets.css\";\n\n// Make sure to set your Cesium ion access token\nIon.defaultAccessToken =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwOWRkMzFlYS0yMDVhLTRkNzYtYWJmMC1hMmE1NjljN2MyNjMiLCJpZCI6NzMzNDQsImlhdCI6MTYzNjgxNDEzNX0.Q2MfD_lkQgsJ-R3NPfYjS9QA9q_j4Py8DktYKsPmZNg\";\n\nexport default function template() {\n  const cesiumContainer = useRef(null);\n  const viewerRef = useRef(null);\n\n  useEffect(() => {\n    let viewer: Viewer;\n\n    const init = () => {\n      if (cesiumContainer.current && !viewerRef.current) {\n        viewerRef.current = new Viewer(cesiumContainer.current, {\n          terrainProvider: undefined, // We'll use the default ellipsoid\n          baseLayerPicker: false,\n          geocoder: false,\n          homeButton: false,\n          sceneModePicker: false,\n          navigationHelpButton: false,\n          animation: false,\n          timeline: false,\n          fullscreenButton: false,\n        });\n        viewer = viewerRef.current;\n        //@ts-ignore\n        viewer._cesiumWidget._creditContainer.parentNode.removeChild(\n          //@ts-ignore\n          viewer._cesiumWidget._creditContainer\n        );\n      }\n    };\n\n    const handleWheel = event => {\n      //阻止冒泡\n      event.stopPropagation();\n    };\n\n    init();\n\n    requestIdleCallback(async () => {\n      // 创建自定义着色器\n      const customShader = new Cesium.CustomShader({\n        uniforms: {\n          u_time: {\n            value: 0, // 初始值\n            type: Cesium.UniformType.FLOAT,\n          },\n          //   u_externalTexture: {\n          //     value: new Cesium.TextureUniform({\n          //       url: \"/assets/bg/1.webp\",\n          //     }),\n          //     type: Cesium.UniformType.SAMPLER_2D,\n          //   },\n        },\n        // varyings: {\n        //   v_customTexCoords: Cesium.VaryingType.VEC2,\n        //   v_selectedColor: Cesium.VaryingType.VEC4,\n        // },\n        mode: Cesium.CustomShaderMode.MODIFY_MATERIAL,\n        lightingModel: Cesium.LightingModel.PBR,\n        translucencyMode: Cesium.CustomShaderTranslucencyMode.TRANSLUCENT,\n        vertexShaderText: `\n        void vertexMain(VertexInput vsInput, inout czm_modelVertexOutput vsOutput) {\n            // 这里可以添加自定义的顶点着色器代码\n        }\n    `,\n        fragmentShaderText: `\n        void fragmentMain(FragmentInput fsInput, inout czm_modelMaterial material) {\n            float r = u_time; // 红色分量\n            float b = 1.0 - u_time; // 蓝色分量\n            vec4 color = vec4(r, r , b, 1.0);\n            material.diffuse = color.rgb; // 设置漫反射颜色为红色\n            material.alpha = 1.0; // 设置透明度\n        }\n    `,\n      });\n\n      // 更新u_time的值\n      function updateShaderTime() {\n        const currentTime = performance.now() * 0.001; // 获取当前时间（秒）\n        customShader.setUniform(\"u_time\", Math.sin(currentTime)); // 使用正弦函数使颜色在0到1之间变化\n      }\n\n      // 在渲染循环中更新时间\n      viewer.scene.preRender.addEventListener(updateShaderTime);\n\n      const translation = new Cesium.Cartesian3(\n        -1571952.1361662298,\n        4395241.97876768,\n        4332149.3142119665\n      );\n      const cartographic = Cesium.Cartographic.fromCartesian(translation);\n      const longitude = Cesium.Math.toDegrees(cartographic.longitude);\n      const latitude = Cesium.Math.toDegrees(cartographic.latitude);\n      const height = cartographic.height;\n\n      const entity = (viewer.trackedEntity = viewer.entities.add({\n        name: \"animate\",\n        position: Cesium.Cartesian3.fromDegrees(longitude, latitude, height),\n        model: {\n          uri: \"/assets/models/gltf/animate.gltf\",\n          scale: 1000000,\n          customShader: customShader,\n        },\n      }));\n      viewer.trackedEntity = entity;\n    });\n\n    // 创建事件处理器\n    const handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);\n\n    // 监听右键点击事件\n    handler.setInputAction(movement => {\n      const windowPosition = movement.position;\n\n      // 将屏幕坐标转换为地球表面的坐标\n      const pickedPosition = viewer.camera.pickEllipsoid(windowPosition);\n\n      if (pickedPosition) {\n        // 将笛卡尔坐标转换为经纬度\n        const cartographic = Cesium.Cartographic.fromCartesian(pickedPosition);\n        const longitude = Cesium.Math.toDegrees(cartographic.longitude);\n        const latitude = Cesium.Math.toDegrees(cartographic.latitude);\n        // console.log(`经度: ${longitude.toFixed(6)}, 纬度: ${latitude.toFixed(6)}`);\n        const position = Cesium.Cartesian3.fromDegrees(\n          longitude,\n          latitude,\n          200\n        );\n\n        console.log(position);\n      } else {\n        console.log(\"未点击到地球表面\");\n      }\n    }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);\n\n    const containerElement = cesiumContainer.current;\n    containerElement.addEventListener(\"wheel\", handleWheel);\n\n    return () => {\n      if (viewerRef.current) {\n        viewerRef.current.destroy();\n        viewer = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div\n      onDoubleClick={() => {\n        if (cesiumContainer) {\n          if (document.fullscreenElement) document.exitFullscreen();\n          else cesiumContainer.current.requestFullscreen();\n        }\n      }}\n      ref={cesiumContainer}\n      style={{ width: \"100%\", height: \"500px\", userSelect: \"none\" }}\n    />\n  );\n}\n"],"names":["Ion","template","cesiumContainer","useRef","viewerRef","useEffect","viewer","init","Viewer","handleWheel","event","customShader","Cesium.CustomShader","Cesium.UniformType","Cesium.CustomShaderMode","Cesium.LightingModel","Cesium.CustomShaderTranslucencyMode","updateShaderTime","currentTime","translation","Cesium.Cartesian3","cartographic","Cesium.Cartographic","longitude","Cesium.Math","latitude","height","entity","Cesium.ScreenSpaceEventHandler","movement","windowPosition","pickedPosition","position","Cesium.ScreenSpaceEventType","jsx"],"mappings":"oqBAOAA,EAAI,mBACF,uLAEF,SAAwBC,GAAW,CAC3B,MAAAC,EAAkBC,SAAO,IAAI,EAC7BC,EAAYD,SAAO,IAAI,EAE7BE,OAAAA,EAAAA,UAAU,IAAM,CACV,IAAAC,EAEJ,MAAMC,EAAO,IAAM,CACbL,EAAgB,SAAW,CAACE,EAAU,UACxCA,EAAU,QAAU,IAAII,EAAON,EAAgB,QAAS,CACtD,gBAAiB,OACjB,gBAAiB,GACjB,SAAU,GACV,WAAY,GACZ,gBAAiB,GACjB,qBAAsB,GACtB,UAAW,GACX,SAAU,GACV,iBAAkB,EAAA,CACnB,EACDI,EAASF,EAAU,QAEZE,EAAA,cAAc,iBAAiB,WAAW,YAE/CA,EAAO,cAAc,gBACvB,EAEJ,EAEMG,EAAuBC,GAAA,CAE3BA,EAAM,gBAAgB,CACxB,EAEK,OAAAH,EAAA,EAEL,oBAAoB,SAAY,CAExB,MAAAI,EAAe,IAAIC,EAAoB,CAC3C,SAAU,CACR,OAAQ,CACN,MAAO,EACP,KAAMC,EAAmB,KAAA,CAQ7B,EAKA,KAAMC,EAAwB,gBAC9B,cAAeC,EAAqB,IACpC,iBAAkBC,EAAoC,YACtD,iBAAkB;AAAA;AAAA;AAAA;AAAA,MAKlB,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAA,CASrB,EAGD,SAASC,GAAmB,CACpB,MAAAC,EAAc,YAAY,IAAA,EAAQ,KACxCP,EAAa,WAAW,SAAU,KAAK,IAAIO,CAAW,CAAC,CAAA,CAIlDZ,EAAA,MAAM,UAAU,iBAAiBW,CAAgB,EAElD,MAAAE,EAAc,IAAIC,EACtB,sBACA,mBACA,oBACF,EACMC,EAAeC,EAAoB,cAAcH,CAAW,EAC5DI,EAAYC,EAAY,UAAUH,EAAa,SAAS,EACxDI,EAAWD,EAAY,UAAUH,EAAa,QAAQ,EACtDK,EAASL,EAAa,OAEtBM,EAAUrB,EAAO,cAAgBA,EAAO,SAAS,IAAI,CACzD,KAAM,UACN,SAAUc,EAAkB,YAAYG,EAAWE,EAAUC,CAAM,EACnE,MAAO,CACL,IAAK,mCACL,MAAO,IACP,aAAAf,CAAA,CACF,CACD,EACDL,EAAO,cAAgBqB,CAAA,CACxB,EAGe,IAAIC,EAA+BtB,EAAO,MAAM,MAAM,EAG9D,eAA2BuB,GAAA,CACjC,MAAMC,EAAiBD,EAAS,SAG1BE,EAAiBzB,EAAO,OAAO,cAAcwB,CAAc,EAEjE,GAAIC,EAAgB,CAElB,MAAMV,EAAeC,EAAoB,cAAcS,CAAc,EAC/DR,EAAYC,EAAY,UAAUH,EAAa,SAAS,EACxDI,EAAWD,EAAY,UAAUH,EAAa,QAAQ,EAEtDW,EAAWZ,EAAkB,YACjCG,EACAE,EACA,GACF,EAEA,QAAQ,IAAIO,CAAQ,CAAA,MAEpB,QAAQ,IAAI,UAAU,CACxB,EACCC,EAA4B,WAAW,EAEjB/B,EAAgB,QACxB,iBAAiB,QAASO,CAAW,EAE/C,IAAM,CACPL,EAAU,UACZA,EAAU,QAAQ,QAAQ,EACjBE,EAAA,KAEb,CACF,EAAG,EAAE,EAGH4B,EAAA,IAAC,MAAA,CACC,cAAe,IAAM,CACfhC,IACE,SAAS,kBAAmB,SAAS,eAAe,EACnDA,EAAgB,QAAQ,kBAAkB,EAEnD,EACA,IAAKA,EACL,MAAO,CAAE,MAAO,OAAQ,OAAQ,QAAS,WAAY,MAAO,CAAA,CAC9D,CAEJ"}