{"version":3,"file":"graph.B722hRhG.js","sources":["../../src/components/react/fiber/2DGraph.ts","../../src/components/react/fiber/graph.tsx"],"sourcesContent":["import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\nimport { shaderMaterial } from \"@react-three/drei\";\n\nconst basicVertex = ` \n    void main() {\n        vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n        //将模型坐标乘以模型矩阵,得到顶点的世界坐标\n        vec4 viewPosition = viewMatrix * modelPosition;\n        //将世界坐标乘以视图矩阵,得到顶点在相机坐标系中的坐标\n        vec4 projectionPosition = projectionMatrix * viewPosition;\n        //将相机坐标乘以投影矩阵,得到顶点在裁剪坐标系中的坐标.\n        gl_Position = projectionPosition;\n        //将裁剪坐标赋值给内置变量 gl_Position,它表示最终的顶点位置,用于后续的光栅化和片元处理阶段.\n}\n//这段代码的目的是将顶点从模型坐标系经过模型、视图和投影变换,最终将其转换为裁剪坐标.\n`;\n\nconst circleFragment = `\n      uniform vec2 resolution;\n      float sdCircle(in vec2 p,in float r){\n        return length(p)-r;\n      }\n\n      void main() {\n        vec2 p = (2.0*gl_FragCoord.xy-resolution.xy)/resolution.y;\n        \n\t    float d = sdCircle(p,0.5);\n        vec3 col = (d>0.0) ? vec3(0.1,0.6,0.9) : vec3(0.2,0.9,1.0);\n        col *= 1.0 - exp(-6.0*abs(d));\n\t    col *= 0.8 + 0.2*cos(150.0*d);\n\t    col = mix( col, vec3(1.), 1.-smoothstep(0.0,0.01,abs(d)));\n\t    gl_FragColor = vec4(col,1.0);\n      }\n`;\n\nconst CircleMaterial = shaderMaterial(\n  {\n    resolution: new THREE.Vector2(),\n  },\n  basicVertex,\n  circleFragment\n);\n\nextend({ CircleMaterial });\n\nexport { CircleMaterial };\n","// @ts-nocheck\nimport { useRef } from \"react\";\nimport { Canvas, useFrame, useThree } from \"@react-three/fiber\";\nimport { CircleMaterial } from \"./2DGraph\";\n\nfunction ShaderPlane() {\n  const ref = useRef();\n  const { viewport, size } = useThree();\n  useFrame((state, delta) => {\n    ref.current.time += delta;\n  });\n  return (\n    <mesh scale={[viewport.width, viewport.height, 1]}>\n      <planeGeometry />\n      <circleMaterial\n        ref={ref}\n        key={CircleMaterial.key}\n        resolution={[size.width * viewport.dpr, size.height * viewport.dpr]}\n      />\n    </mesh>\n  );\n}\n\nexport default function App() {\n  return (\n    <Canvas style={{ height: \"300px\", margin: \"auto\" }}>\n      <ShaderPlane />\n    </Canvas>\n  );\n}\n"],"names":["basicVertex","circleFragment","CircleMaterial","shaderMaterial","THREE.Vector2","extend","ShaderPlane","ref","useRef","viewport","size","useThree","useFrame","state","delta","jsxs","jsx","App","Canvas"],"mappings":"yrBAIA,MAAMA,EAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcdC,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBjBC,EAAiBC,EACrB,CACE,WAAY,IAAIC,CAClB,EACAJ,EACAC,CACF,EAEAI,EAAO,CAAE,eAAAH,EAAgB,ECvCzB,SAASI,GAAc,CACrB,MAAMC,EAAMC,EAAAA,OAAO,EACb,CAAE,SAAAC,EAAU,KAAAC,CAAK,EAAIC,EAAS,EAC3B,OAAAC,EAAA,CAACC,EAAOC,IAAU,CACzBP,EAAI,QAAQ,MAAQO,CAAA,CACrB,EAECC,OAAC,QAAK,MAAO,CAACN,EAAS,MAAOA,EAAS,OAAQ,CAAC,EAC9C,SAAA,CAAAO,EAAA,IAAC,gBAAc,EAAA,EACfA,EAAA,IAAC,iBAAA,CACC,IAAAT,EAEA,WAAY,CAACG,EAAK,MAAQD,EAAS,IAAKC,EAAK,OAASD,EAAS,GAAG,CAAA,EAD7DP,EAAe,GAAA,CAEtB,EACF,CAEJ,CAEA,SAAwBe,GAAM,CAE1B,OAAAD,EAAA,IAACE,EAAO,CAAA,MAAO,CAAE,OAAQ,QAAS,OAAQ,MAAO,EAC/C,SAACF,EAAAA,IAAAV,EAAA,CAAA,CAAY,CACf,CAAA,CAEJ"}