{"version":3,"file":"Texture.K6QlXbwF.js","sources":["../../node_modules/.pnpm/@react-three+drei@9.122.0_@react-three+fiber@8.18.0_@types+react@18.3.21_react-dom@18.3.1_rea_ol2zxzpl3eb2iz24jitbgx25da/node_modules/@react-three/drei/core/Texture.js"],"sourcesContent":["import * as React from 'react';\nimport { useLayoutEffect, useEffect, useMemo } from 'react';\nimport { TextureLoader, Texture as Texture$1 } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input, onLoad) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n  useLayoutEffect(() => {\n    onLoad == null || onLoad(textures);\n  }, [onLoad]);\n\n  // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n  // NOTE: only available for WebGLRenderer\n  useEffect(() => {\n    if ('initTexture' in gl) {\n      let textureArray = [];\n      if (Array.isArray(textures)) {\n        textureArray = textures;\n      } else if (textures instanceof Texture$1) {\n        textureArray = [textures];\n      } else if (IsObject(textures)) {\n        textureArray = Object.values(textures);\n      }\n      textureArray.forEach(texture => {\n        if (texture instanceof Texture$1) {\n          gl.initTexture(texture);\n        }\n      });\n    }\n  }, [gl, textures]);\n  const mappedTextures = useMemo(() => {\n    if (IsObject(input)) {\n      const keyed = {};\n      let i = 0;\n      for (const key in input) keyed[key] = textures[i++];\n      return keyed;\n    } else {\n      return textures;\n    }\n  }, [input, textures]);\n  return mappedTextures;\n}\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\n//\n\nconst Texture = ({\n  children,\n  input,\n  onLoad\n}) => {\n  const ret = useTexture(input, onLoad);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children == null ? void 0 : children(ret));\n};\n\nexport { IsObject, Texture, useTexture };\n"],"names":["IsObject","url","useTexture","input","onLoad","gl","useThree","state","textures","useLoader","TextureLoader","useLayoutEffect","useEffect","textureArray","Texture$1","texture","useMemo","keyed","i","key"],"mappings":"ufAKA,MAAMA,EAAWC,GAAOA,IAAQ,OAAOA,CAAG,GAAK,CAAC,MAAM,QAAQA,CAAG,GAAK,OAAOA,GAAQ,WACrF,SAASC,EAAWC,EAAOC,EAAQ,CACjC,MAAMC,EAAKC,EAASC,GAASA,EAAM,EAAE,EAC/BC,EAAWC,EAAUC,EAAeV,EAASG,CAAK,EAAI,OAAO,OAAOA,CAAK,EAAIA,CAAK,EACxFQ,OAAAA,EAAAA,gBAAgB,IAAM,CACFP,IAAOI,CAAQ,CACrC,EAAK,CAACJ,CAAM,CAAC,EAKXQ,EAAAA,UAAU,IAAM,CACd,GAAI,gBAAiBP,EAAI,CACvB,IAAIQ,EAAe,CAAE,EACjB,MAAM,QAAQL,CAAQ,EACxBK,EAAeL,EACNA,aAAoBM,EAC7BD,EAAe,CAACL,CAAQ,EACfR,EAASQ,CAAQ,IAC1BK,EAAe,OAAO,OAAOL,CAAQ,GAEvCK,EAAa,QAAQE,GAAW,CAC1BA,aAAmBD,GACrBT,EAAG,YAAYU,CAAO,CAEhC,CAAO,CACP,CACA,EAAK,CAACV,EAAIG,CAAQ,CAAC,EACMQ,EAAAA,QAAQ,IAAM,CACnC,GAAIhB,EAASG,CAAK,EAAG,CACnB,MAAMc,EAAQ,CAAE,EAChB,IAAIC,EAAI,EACR,UAAWC,KAAOhB,EAAOc,EAAME,CAAG,EAAIX,EAASU,GAAG,EAClD,OAAOD,CACb,KACM,QAAOT,CAEb,EAAK,CAACL,EAAOK,CAAQ,CAAC,CAEtB,CACAN,EAAW,QAAUD,GAAOQ,EAAU,QAAQC,EAAeT,CAAG,EAChEC,EAAW,MAAQC,GAASM,EAAU,MAAMC,EAAeP,CAAK","x_google_ignoreList":[0]}