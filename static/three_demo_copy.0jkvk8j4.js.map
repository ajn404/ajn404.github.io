{"version":3,"file":"three_demo_copy.0jkvk8j4.js","sources":["../../src/components/react/little/three_demo_copy.tsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\n\nexport interface ModelViewerProps {\n  url?: string;\n  className?: string;\n}\n\nconst ModelViewer: React.FC = ({\n  url = \"/assets/models/gltf/model.glb\",\n  className = \"\",\n}: ModelViewerProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const loadingRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // Canvas and Scene setup\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const scene = new THREE.Scene();\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true,\n      alpha: true,\n    });\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(\n      10,\n      canvas.clientWidth / canvas.clientHeight,\n      0.1,\n      100\n    );\n    camera.position.set(8, 4, 15);\n\n    // Controls setup\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableDamping = true;\n    controls.enableZoom = true;\n    controls.enablePan = true;\n    controls.minPolarAngle = Math.PI / 5;\n    controls.maxPolarAngle = Math.PI / 2;\n    const minPan = new THREE.Vector3(-2, -0.5, -2);\n    const maxPan = new THREE.Vector3(2, 0.5, 2);\n\n    // Materials and Textures\n    const textureLoader = new THREE.TextureLoader();\n    const bakedTexture = textureLoader.load(\"/assets/bg/2.webp\");\n    const bakedMaterial = new THREE.MeshBasicMaterial({ map: bakedTexture });\n\n    // Model Loading\n    const loader = new GLTFLoader();\n    loader.load(\n      url,\n      gltf => {\n        const model = gltf.scene;\n        model.traverse(child => {\n          if (child instanceof THREE.Mesh) {\n            //  确保child是Mesh对象\n            child.material = bakedMaterial;\n          }\n        });\n        scene.add(model);\n        scene.position.set(0, 0.2, 0);\n        if (loadingRef.current) loadingRef.current.style.display = \"none\";\n      },\n      xhr => {\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      }\n    );\n\n    // Resize handling\n    const handleResize = () => {\n      if (!canvas || !renderer || !camera) return;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    handleResize(); // initial call\n\n    // Animation loop\n    const animate = () => {\n      controls.update();\n      controls.target.clamp(minPan, maxPan);\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    // 禁用鼠标滚动事件\n    const handleWheel = (event: WheelEvent) => {\n      // event.preventDefault(); // 阻止默认的滚动行为\n      event.stopPropagation();\n    };\n    canvas.addEventListener(\"wheel\", handleWheel);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      canvas.removeEventListener(\"wheel\", handleWheel);\n      renderer.dispose(); // 清理资源\n    };\n  }, []);\n\n  return (\n    <>\n      <canvas\n        ref={canvasRef}\n        className={`webgl w-1/2 m-auto touch-none ${className}`}\n      />\n      <div id=\"loader\" ref={loadingRef}>\n        <h1>Loading</h1>\n      </div>\n    </>\n  );\n};\n\nexport default ModelViewer;\n"],"names":["ModelViewer","url","className","canvasRef","useRef","loadingRef","useEffect","canvas","scene","THREE.Scene","renderer","THREE.WebGLRenderer","camera","THREE.PerspectiveCamera","controls","OrbitControls","minPan","THREE.Vector3","maxPan","bakedTexture","THREE.TextureLoader","bakedMaterial","THREE.MeshBasicMaterial","GLTFLoader","gltf","model","child","THREE.Mesh","xhr","handleResize","width","height","animate","handleWheel","event","jsxs","Fragment","jsx"],"mappings":"ypBAUA,MAAMA,EAAwB,CAAC,CAC7B,IAAAC,EAAM,gCACN,UAAAC,EAAY,EACd,IAAwB,CAChB,MAAAC,EAAYC,SAA0B,IAAI,EAC1CC,EAAaD,SAAuB,IAAI,EAE9CE,OAAAA,EAAAA,UAAU,IAAM,CAEd,MAAMC,EAASJ,EAAU,QACzB,GAAI,CAACI,EAAQ,OAEP,MAAAC,EAAQ,IAAIC,EACZC,EAAW,IAAIC,EAAoB,CACvC,OAAAJ,EACA,UAAW,GACX,MAAO,EAAA,CACR,EAEKK,EAAS,IAAIC,EACjB,GACAN,EAAO,YAAcA,EAAO,aAC5B,GACA,GACF,EACAK,EAAO,SAAS,IAAI,EAAG,EAAG,EAAE,EAG5B,MAAME,EAAW,IAAIC,EAAcH,EAAQL,CAAM,EACjDO,EAAS,cAAgB,GACzBA,EAAS,WAAa,GACtBA,EAAS,UAAY,GACZA,EAAA,cAAgB,KAAK,GAAK,EAC1BA,EAAA,cAAgB,KAAK,GAAK,EACnC,MAAME,EAAS,IAAIC,EAAc,GAAI,IAAM,EAAE,EACvCC,EAAS,IAAID,EAAc,EAAG,GAAK,CAAC,EAIpCE,EADgB,IAAIC,EAAoB,EACX,KAAK,mBAAmB,EACrDC,EAAgB,IAAIC,EAAwB,CAAE,IAAKH,EAAc,EAGxD,IAAII,EAAW,EACvB,KACLtB,EACQuB,GAAA,CACN,MAAMC,EAAQD,EAAK,MACnBC,EAAM,SAAkBC,GAAA,CAClBA,aAAiBC,IAEnBD,EAAM,SAAWL,EACnB,CACD,EACDb,EAAM,IAAIiB,CAAK,EACfjB,EAAM,SAAS,IAAI,EAAG,GAAK,CAAC,EACxBH,EAAW,UAAoBA,EAAA,QAAQ,MAAM,QAAU,OAC7D,EACOuB,GAAA,CACL,QAAQ,IAAKA,EAAI,OAASA,EAAI,MAAS,IAAM,UAAU,CAAA,CAE3D,EAGA,MAAMC,EAAe,IAAM,CACzB,GAAI,CAACtB,GAAU,CAACG,GAAY,CAACE,EAAQ,OACrC,MAAMkB,EAAQvB,EAAO,YACfwB,EAASxB,EAAO,aACtBK,EAAO,OAASkB,EAAQC,EACxBnB,EAAO,uBAAuB,EACrBF,EAAA,QAAQoB,EAAOC,CAAM,EAC9BrB,EAAS,cAAc,KAAK,IAAI,OAAO,iBAAkB,CAAC,CAAC,CAC7D,EAEO,OAAA,iBAAiB,SAAUmB,CAAY,EACjCA,EAAA,EAGb,MAAMG,EAAU,IAAM,CACpBlB,EAAS,OAAO,EACPA,EAAA,OAAO,MAAME,EAAQE,CAAM,EAC3BR,EAAA,OAAOF,EAAOI,CAAM,EAC7B,sBAAsBoB,CAAO,CAC/B,EAEQA,EAAA,EAGF,MAAAC,EAAeC,GAAsB,CAEzCA,EAAM,gBAAgB,CACxB,EACO,OAAA3B,EAAA,iBAAiB,QAAS0B,CAAW,EAErC,IAAM,CACJ,OAAA,oBAAoB,SAAUJ,CAAY,EAC1CtB,EAAA,oBAAoB,QAAS0B,CAAW,EAC/CvB,EAAS,QAAQ,CACnB,CACF,EAAG,EAAE,EAIDyB,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAA,IAAC,SAAA,CACC,IAAKlC,EACL,UAAW,iCAAiCD,CAAS,EAAA,CACvD,EACAmC,EAAAA,IAAC,OAAI,GAAG,SAAS,IAAKhC,EACpB,SAAAgC,EAAA,IAAC,KAAG,CAAA,SAAA,SAAO,CAAA,CACb,CAAA,CAAA,EACF,CAEJ"}