{"version":3,"file":"delaunay.Cuv_kXMt.js","sources":["../../node_modules/.pnpm/robust-predicates@3.0.2/node_modules/robust-predicates/esm/util.js","../../node_modules/.pnpm/robust-predicates@3.0.2/node_modules/robust-predicates/esm/orient2d.js","../../node_modules/.pnpm/delaunator@5.0.1/node_modules/delaunator/index.js","../../node_modules/.pnpm/d3-delaunay@6.0.4/node_modules/d3-delaunay/src/path.js","../../node_modules/.pnpm/d3-delaunay@6.0.4/node_modules/d3-delaunay/src/polygon.js","../../node_modules/.pnpm/d3-delaunay@6.0.4/node_modules/d3-delaunay/src/voronoi.js","../../node_modules/.pnpm/d3-delaunay@6.0.4/node_modules/d3-delaunay/src/delaunay.js"],"sourcesContent":["export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\n\n// fast_expansion_sum_zeroelim routine from oritinal code\nexport function sum(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if ((fnow > enow) === (fnow > -enow)) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if ((fnow > enow) === (fnow > -enow)) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        while (eindex < elen && findex < flen) {\n            if ((fnow > enow) === (fnow > -enow)) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) {\n                h[hindex++] = hh;\n            }\n        }\n    }\n    while (eindex < elen) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    while (findex < flen) {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\n\n// scale_expansion_zeroelim routine from oritinal code\nexport function scale(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) {\n        h[hindex++] = hh;\n    }\n    for (let i = 1; i < elen; i++) {\n        enow = e[i];\n        product1 = enow * b;\n        c = splitter * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function negate(elen, e) {\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\n    return elen;\n}\n\nexport function estimate(elen, e) {\n    let Q = e[0];\n    for (let i = 1; i < elen; i++) Q += e[i];\n    return Q;\n}\n\nexport function vec(n) {\n    return new Float64Array(n);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum} from './util.js';\n\nconst ccwerrboundA = (3 + 16 * epsilon) * epsilon;\nconst ccwerrboundB = (2 + 12 * epsilon) * epsilon;\nconst ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;\n\nconst B = vec(4);\nconst C1 = vec(8);\nconst C2 = vec(12);\nconst D = vec(16);\nconst u = vec(4);\n\nfunction orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\n    let acxtail, acytail, bcxtail, bcytail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const acx = ax - cx;\n    const bcx = bx - cx;\n    const acy = ay - cy;\n    const bcy = by - cy;\n\n    s1 = acx * bcy;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcx;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    B[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    B[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    B[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    B[3] = u3;\n\n    let det = estimate(4, B);\n    let errbound = ccwerrboundB * detsum;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - acx;\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\n    bvirt = bx - bcx;\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\n    bvirt = ay - acy;\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\n    bvirt = by - bcy;\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\n\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {\n        return det;\n    }\n\n    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);\n    det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);\n    if (det >= errbound || -det >= errbound) return det;\n\n    s1 = acxtail * bcy;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcx;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C1len = sum(4, B, 4, u, C1);\n\n    s1 = acx * bcytail;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcxtail;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C2len = sum(C1len, C1, 4, u, C2);\n\n    s1 = acxtail * bcytail;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcxtail;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const Dlen = sum(C2len, C2, 4, u, D);\n\n    return D[Dlen - 1];\n}\n\nexport function orient2d(ax, ay, bx, by, cx, cy) {\n    const detleft = (ay - cy) * (bx - cx);\n    const detright = (ax - cx) * (by - cy);\n    const det = detleft - detright;\n\n    const detsum = Math.abs(detleft + detright);\n    if (Math.abs(det) >= ccwerrboundA * detsum) return det;\n\n    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\n}\n\nexport function orient2dfast(ax, ay, bx, by, cx, cy) {\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\n}\n","\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nimport {orient2d} from 'robust-predicates';\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0, minDist = Infinity; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        // find the point closest to the seed\n        for (let i = 0, minDist = Infinity; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                const d = this._dists[id];\n                if (d > d0) {\n                    hull[j++] = id;\n                    d0 = d;\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n","export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n","import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n    let bx, by; // lazily computed barycenter of the hull\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (Math.abs(ab) < 1e-9) {\n        // For a degenerate triangle, the circumcenter is at the infinity, in a\n        // direction orthogonal to the halfedge and away from the “center” of\n        // the diagram <bx, by>, defined as the hull’s barycenter.\n        if (bx === undefined) {\n          bx = by = 0;\n          for (const i of hull) bx += points[i * 2], by += points[i * 2 + 1];\n          bx /= hull.length, by /= hull.length;\n        }\n        const a = 1e9 * Math.sign((bx - x1) * ey - (by - y1) * ex);\n        x = (x1 + x3) / 2 - a * ey;\n        y = (y1 + y3) / 2 + a * ex;\n      } else {\n        const d = 1 / ab;\n        const bl = dx * dx + dy * dy;\n        const cl = ex * ex + ey * ey;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] === cj[aj]\n              && ci[ai + 1] === cj[aj + 1]\n              && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj]\n              && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return this._simplify(V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points));\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1 = 0;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    // for more robustness, always consider the segment in the same order\n    const flip = c0 < c1;\n    if (flip) [x0, y0, x1, y1, c0, c1] = [x1, y1, x0, y0, c1, c0];\n    while (true) {\n      if (c0 === 0 && c1 === 0) return flip ? [x1, y1, x0, y0] : [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\n      // undefined, the conditional statement will be executed.\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n  _simplify(P) {\n    if (P && P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) {\n          P.splice(j, 2), i -= 2;\n        }\n      }\n      if (!P.length) P = null;\n    }\n    return P;\n  }\n}\n","import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) {\n        inedges[hull[1]] = 0;\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n      }\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r) {\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n    r = r == undefined ? 2 : +r;\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n"],"names":["e","n","epsilon","splitter","resulterrbound","sum","elen","flen","f","h","Q","Qnew","hh","bvirt","enow","fnow","eindex","findex","hindex","estimate","vec","ccwerrboundA","ccwerrboundB","ccwerrboundC","B","C1","C2","D","u","orient2dadapt","ax","ay","bx","by","cx","cy","detsum","acxtail","acytail","bcxtail","bcytail","ahi","alo","bhi","blo","_i","_j","_0","s1","s0","t1","t0","u3","acx","bcx","acy","bcy","det","errbound","C1len","C2len","Dlen","orient2d","detleft","detright","EPSILON","EDGE_STACK","Delaunator","points","getX","defaultGetX","getY","defaultGetY","coords","i","p","maxTriangles","hullPrev","hullNext","hullTri","hullHash","minX","minY","maxX","maxY","y","i0","i1","i2","minDist","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","quicksort","hull","j","d0","id","center","circumcenter","hullSize","k","xp","yp","x","start","key","q","t","pseudoAngle","a","triangles","halfedges","ar","b","a0","b0","al","bl","p0","pr","pl","p1","inCircle","hbl","br","c","dx","dy","px","py","ex","ey","fx","fy","ap","bp","cp","cl","ids","dists","left","right","temp","tempDist","median","swap","arr","tmp","Path","x0","y0","w","Polygon","Voronoi","delaunay","xmin","ymin","xmax","ymax","vectors","circumcenters","t2","t3","x1","y1","x2","y2","x3","y3","ab","context","buffer","inedges","ti","tj","xi","yi","xj","yj","h0","h1","v","cell","polygon","S","c0","c1","ci","cj","loop","ai","li","aj","lj","e0","V","P","e1","sx0","sy0","sx1","sy1","flip","vx0","vy0","vxn","vyn","vx","vy","tau","pow","pointX","pointY","collinear","jitter","Delaunay","that","flatArray","flatIterable","_","bounds","hullIndex","_hullIndex","l","dc","dt","array"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}