{"version":3,"file":"ResizeHandle.DwnFiv2t.js","sources":["../../node_modules/.pnpm/lucide-react@0.315.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/grip-vertical.js","../../node_modules/.pnpm/react-resizable-panels@1.0.10_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/react-resizable-panels/dist/react-resizable-panels.browser.esm.js","../../src/components/react/shadcn/ui/resizable.tsx","../../src/components/react/shadcn/demo/ResizeHandle.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.315.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst GripVertical = createLucideIcon(\"GripVertical\", [\n  [\"circle\", { cx: \"9\", cy: \"12\", r: \"1\", key: \"1vctgf\" }],\n  [\"circle\", { cx: \"9\", cy: \"5\", r: \"1\", key: \"hp0tcf\" }],\n  [\"circle\", { cx: \"9\", cy: \"19\", r: \"1\", key: \"fkjjf6\" }],\n  [\"circle\", { cx: \"15\", cy: \"12\", r: \"1\", key: \"1tmaij\" }],\n  [\"circle\", { cx: \"15\", cy: \"5\", r: \"1\", key: \"19l28e\" }],\n  [\"circle\", { cx: \"15\", cy: \"19\", r: \"1\", key: \"f4zoj3\" }]\n]);\n\nexport { GripVertical as default };\n//# sourceMappingURL=grip-vertical.js.map\n","import * as React from 'react';\n\n// This module exists to work around Webpack issue https://github.com/webpack/webpack/issues/14814\n\n// eslint-disable-next-line no-restricted-imports\n\nconst {\n  createElement,\n  createContext,\n  createRef,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState\n} = React;\n\n// `toString()` prevents bundlers from trying to `import { useId } from 'react'`\nconst useId = React[\"useId\".toString()];\n\nconst PanelGroupContext = createContext(null);\nPanelGroupContext.displayName = \"PanelGroupContext\";\n\nconst useIsomorphicLayoutEffect = useLayoutEffect ;\n\nconst wrappedUseId = typeof useId === \"function\" ? useId : () => null;\nlet counter = 0;\nfunction useUniqueId(idFromParams = null) {\n  const idFromUseId = wrappedUseId();\n  const idRef = useRef(idFromParams || idFromUseId || null);\n  if (idRef.current === null) {\n    idRef.current = \"\" + counter++;\n  }\n  return idFromParams !== null && idFromParams !== void 0 ? idFromParams : idRef.current;\n}\n\nfunction PanelWithForwardedRef({\n  children,\n  className: classNameFromProps = \"\",\n  collapsedSize,\n  collapsible,\n  defaultSize,\n  forwardedRef,\n  id: idFromProps,\n  maxSize,\n  minSize,\n  onCollapse,\n  onExpand,\n  onResize,\n  order,\n  style: styleFromProps,\n  tagName: Type = \"div\",\n  ...rest\n}) {\n  const context = useContext(PanelGroupContext);\n  if (context === null) {\n    throw Error(`Panel components must be rendered within a PanelGroup container`);\n  }\n  const {\n    collapsePanel,\n    expandPanel,\n    getPanelSize,\n    getPanelStyle,\n    groupId,\n    isPanelCollapsed,\n    reevaluatePanelConstraints,\n    registerPanel,\n    resizePanel,\n    unregisterPanel\n  } = context;\n  const panelId = useUniqueId(idFromProps);\n  const panelDataRef = useRef({\n    callbacks: {\n      onCollapse,\n      onExpand,\n      onResize\n    },\n    constraints: {\n      collapsedSize,\n      collapsible,\n      defaultSize,\n      maxSize,\n      minSize\n    },\n    id: panelId,\n    idIsFromProps: idFromProps !== undefined,\n    order\n  });\n  useRef({\n    didLogMissingDefaultSizeWarning: false\n  });\n  useIsomorphicLayoutEffect(() => {\n    const {\n      callbacks,\n      constraints\n    } = panelDataRef.current;\n    const prevConstraints = {\n      ...constraints\n    };\n    panelDataRef.current.id = panelId;\n    panelDataRef.current.idIsFromProps = idFromProps !== undefined;\n    panelDataRef.current.order = order;\n    callbacks.onCollapse = onCollapse;\n    callbacks.onExpand = onExpand;\n    callbacks.onResize = onResize;\n    constraints.collapsedSize = collapsedSize;\n    constraints.collapsible = collapsible;\n    constraints.defaultSize = defaultSize;\n    constraints.maxSize = maxSize;\n    constraints.minSize = minSize;\n\n    // If constraints have changed, we should revisit panel sizes.\n    // This is uncommon but may happen if people are trying to implement pixel based constraints.\n    if (prevConstraints.collapsedSize !== constraints.collapsedSize || prevConstraints.collapsible !== constraints.collapsible || prevConstraints.maxSize !== constraints.maxSize || prevConstraints.minSize !== constraints.minSize) {\n      reevaluatePanelConstraints(panelDataRef.current, prevConstraints);\n    }\n  });\n  useIsomorphicLayoutEffect(() => {\n    const panelData = panelDataRef.current;\n    registerPanel(panelData);\n    return () => {\n      unregisterPanel(panelData);\n    };\n  }, [order, panelId, registerPanel, unregisterPanel]);\n  useImperativeHandle(forwardedRef, () => ({\n    collapse: () => {\n      collapsePanel(panelDataRef.current);\n    },\n    expand: () => {\n      expandPanel(panelDataRef.current);\n    },\n    getId() {\n      return panelId;\n    },\n    getSize() {\n      return getPanelSize(panelDataRef.current);\n    },\n    isCollapsed() {\n      return isPanelCollapsed(panelDataRef.current);\n    },\n    isExpanded() {\n      return !isPanelCollapsed(panelDataRef.current);\n    },\n    resize: size => {\n      resizePanel(panelDataRef.current, size);\n    }\n  }), [collapsePanel, expandPanel, getPanelSize, isPanelCollapsed, panelId, resizePanel]);\n  const style = getPanelStyle(panelDataRef.current, defaultSize);\n  return createElement(Type, {\n    ...rest,\n    children,\n    className: classNameFromProps,\n    style: {\n      ...style,\n      ...styleFromProps\n    },\n    // CSS selectors\n    \"data-panel\": \"\",\n    \"data-panel-id\": panelId,\n    \"data-panel-group-id\": groupId,\n    // e2e test attributes\n    \"data-panel-collapsible\": undefined,\n    \"data-panel-size\": undefined\n  });\n}\nconst Panel = forwardRef((props, ref) => createElement(PanelWithForwardedRef, {\n  ...props,\n  forwardedRef: ref\n}));\nPanelWithForwardedRef.displayName = \"Panel\";\nPanel.displayName = \"forwardRef(Panel)\";\n\nfunction assert(expectedCondition, message = \"Assertion failed!\") {\n  if (!expectedCondition) {\n    console.error(message);\n    throw Error(message);\n  }\n}\n\nconst PRECISION = 10;\n\nfunction fuzzyCompareNumbers(actual, expected, fractionDigits = PRECISION) {\n  actual = parseFloat(actual.toFixed(fractionDigits));\n  expected = parseFloat(expected.toFixed(fractionDigits));\n  const delta = actual - expected;\n  if (delta === 0) {\n    return 0;\n  } else {\n    return delta > 0 ? 1 : -1;\n  }\n}\n\nfunction fuzzyNumbersEqual(actual, expected, fractionDigits) {\n  return fuzzyCompareNumbers(actual, expected, fractionDigits) === 0;\n}\n\n// Panel size must be in percentages; pixel values should be pre-converted\nfunction resizePanel({\n  panelConstraints: panelConstraintsArray,\n  panelIndex,\n  size\n}) {\n  const panelConstraints = panelConstraintsArray[panelIndex];\n  assert(panelConstraints != null);\n  let {\n    collapsedSize = 0,\n    collapsible,\n    maxSize = 100,\n    minSize = 0\n  } = panelConstraints;\n  if (fuzzyCompareNumbers(size, minSize) < 0) {\n    if (collapsible) {\n      // Collapsible panels should snap closed or open only once they cross the halfway point between collapsed and min size.\n      const halfwayPoint = (collapsedSize + minSize) / 2;\n      if (fuzzyCompareNumbers(size, halfwayPoint) < 0) {\n        size = collapsedSize;\n      } else {\n        size = minSize;\n      }\n    } else {\n      size = minSize;\n    }\n  }\n  size = Math.min(maxSize, size);\n  size = parseFloat(size.toFixed(PRECISION));\n  return size;\n}\n\n// All units must be in percentages; pixel values should be pre-converted\nfunction adjustLayoutByDelta({\n  delta,\n  layout: prevLayout,\n  panelConstraints: panelConstraintsArray,\n  pivotIndices,\n  trigger\n}) {\n  if (fuzzyNumbersEqual(delta, 0)) {\n    return prevLayout;\n  }\n  const nextLayout = [...prevLayout];\n  const [firstPivotIndex, secondPivotIndex] = pivotIndices;\n  assert(firstPivotIndex != null);\n  assert(secondPivotIndex != null);\n  let deltaApplied = 0;\n\n  //const DEBUG = [];\n  //DEBUG.push(`adjustLayoutByDelta() ${prevLayout.join(\", \")}`);\n  //DEBUG.push(`  delta: ${delta}`);\n  //DEBUG.push(`  pivotIndices: ${pivotIndices.join(\", \")}`);\n  //DEBUG.push(`  trigger: ${trigger}`);\n  //DEBUG.push(\"\");\n\n  // A resizing panel affects the panels before or after it.\n  //\n  // A negative delta means the panel(s) immediately after the resize handle should grow/expand by decreasing its offset.\n  // Other panels may also need to shrink/contract (and shift) to make room, depending on the min weights.\n  //\n  // A positive delta means the panel(s) immediately before the resize handle should \"expand\".\n  // This is accomplished by shrinking/contracting (and shifting) one or more of the panels after the resize handle.\n\n  {\n    // If this is a resize triggered by a keyboard event, our logic for expanding/collapsing is different.\n    // We no longer check the halfway threshold because this may prevent the panel from expanding at all.\n    if (trigger === \"keyboard\") {\n      {\n        // Check if we should expand a collapsed panel\n        const index = delta < 0 ? secondPivotIndex : firstPivotIndex;\n        const panelConstraints = panelConstraintsArray[index];\n        assert(panelConstraints);\n\n        //DEBUG.push(`edge case check 1: ${index}`);\n        //DEBUG.push(`  -> collapsible? ${constraints.collapsible}`);\n        if (panelConstraints.collapsible) {\n          const prevSize = prevLayout[index];\n          assert(prevSize != null);\n          const panelConstraints = panelConstraintsArray[index];\n          assert(panelConstraints);\n          const {\n            collapsedSize = 0,\n            minSize = 0\n          } = panelConstraints;\n          if (fuzzyNumbersEqual(prevSize, collapsedSize)) {\n            const localDelta = minSize - prevSize;\n            //DEBUG.push(`  -> expand delta: ${localDelta}`);\n\n            if (fuzzyCompareNumbers(localDelta, Math.abs(delta)) > 0) {\n              delta = delta < 0 ? 0 - localDelta : localDelta;\n              //DEBUG.push(`  -> delta: ${delta}`);\n            }\n          }\n        }\n      }\n\n      {\n        // Check if we should collapse a panel at its minimum size\n        const index = delta < 0 ? firstPivotIndex : secondPivotIndex;\n        const panelConstraints = panelConstraintsArray[index];\n        assert(panelConstraints);\n        const {\n          collapsible\n        } = panelConstraints;\n\n        //DEBUG.push(`edge case check 2: ${index}`);\n        //DEBUG.push(`  -> collapsible? ${collapsible}`);\n        if (collapsible) {\n          const prevSize = prevLayout[index];\n          assert(prevSize != null);\n          const panelConstraints = panelConstraintsArray[index];\n          assert(panelConstraints);\n          const {\n            collapsedSize = 0,\n            minSize = 0\n          } = panelConstraints;\n          if (fuzzyNumbersEqual(prevSize, minSize)) {\n            const localDelta = prevSize - collapsedSize;\n            //DEBUG.push(`  -> expand delta: ${localDelta}`);\n\n            if (fuzzyCompareNumbers(localDelta, Math.abs(delta)) > 0) {\n              delta = delta < 0 ? 0 - localDelta : localDelta;\n              //DEBUG.push(`  -> delta: ${delta}`);\n            }\n          }\n        }\n      }\n    }\n    //DEBUG.push(\"\");\n  }\n\n  {\n    // Pre-calculate max available delta in the opposite direction of our pivot.\n    // This will be the maximum amount we're allowed to expand/contract the panels in the primary direction.\n    // If this amount is less than the requested delta, adjust the requested delta.\n    // If this amount is greater than the requested delta, that's useful information too–\n    // as an expanding panel might change from collapsed to min size.\n\n    const increment = delta < 0 ? 1 : -1;\n    let index = delta < 0 ? secondPivotIndex : firstPivotIndex;\n    let maxAvailableDelta = 0;\n\n    //DEBUG.push(\"pre calc...\");\n    while (true) {\n      const prevSize = prevLayout[index];\n      assert(prevSize != null);\n      const maxSafeSize = resizePanel({\n        panelConstraints: panelConstraintsArray,\n        panelIndex: index,\n        size: 100\n      });\n      const delta = maxSafeSize - prevSize;\n      //DEBUG.push(`  ${index}: ${prevSize} -> ${maxSafeSize}`);\n\n      maxAvailableDelta += delta;\n      index += increment;\n      if (index < 0 || index >= panelConstraintsArray.length) {\n        break;\n      }\n    }\n\n    //DEBUG.push(`  -> max available delta: ${maxAvailableDelta}`);\n    const minAbsDelta = Math.min(Math.abs(delta), Math.abs(maxAvailableDelta));\n    delta = delta < 0 ? 0 - minAbsDelta : minAbsDelta;\n    //DEBUG.push(`  -> adjusted delta: ${delta}`);\n    //DEBUG.push(\"\");\n  }\n\n  {\n    // Delta added to a panel needs to be subtracted from other panels (within the constraints that those panels allow).\n\n    const pivotIndex = delta < 0 ? firstPivotIndex : secondPivotIndex;\n    let index = pivotIndex;\n    while (index >= 0 && index < panelConstraintsArray.length) {\n      const deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied);\n      const prevSize = prevLayout[index];\n      assert(prevSize != null);\n      const unsafeSize = prevSize - deltaRemaining;\n      const safeSize = resizePanel({\n        panelConstraints: panelConstraintsArray,\n        panelIndex: index,\n        size: unsafeSize\n      });\n      if (!fuzzyNumbersEqual(prevSize, safeSize)) {\n        deltaApplied += prevSize - safeSize;\n        nextLayout[index] = safeSize;\n        if (deltaApplied.toPrecision(3).localeCompare(Math.abs(delta).toPrecision(3), undefined, {\n          numeric: true\n        }) >= 0) {\n          break;\n        }\n      }\n      if (delta < 0) {\n        index--;\n      } else {\n        index++;\n      }\n    }\n  }\n  //DEBUG.push(`after 1: ${nextLayout.join(\", \")}`);\n  //DEBUG.push(`  deltaApplied: ${deltaApplied}`);\n  //DEBUG.push(\"\");\n\n  // If we were unable to resize any of the panels panels, return the previous state.\n  // This will essentially bailout and ignore e.g. drags past a panel's boundaries\n  if (fuzzyNumbersEqual(deltaApplied, 0)) {\n    //console.log(DEBUG.join(\"\\n\"));\n    return prevLayout;\n  }\n  {\n    // Now distribute the applied delta to the panels in the other direction\n    const pivotIndex = delta < 0 ? secondPivotIndex : firstPivotIndex;\n    const prevSize = prevLayout[pivotIndex];\n    assert(prevSize != null);\n    const unsafeSize = prevSize + deltaApplied;\n    const safeSize = resizePanel({\n      panelConstraints: panelConstraintsArray,\n      panelIndex: pivotIndex,\n      size: unsafeSize\n    });\n\n    // Adjust the pivot panel before, but only by the amount that surrounding panels were able to shrink/contract.\n    nextLayout[pivotIndex] = safeSize;\n\n    // Edge case where expanding or contracting one panel caused another one to change collapsed state\n    if (!fuzzyNumbersEqual(safeSize, unsafeSize)) {\n      let deltaRemaining = unsafeSize - safeSize;\n      const pivotIndex = delta < 0 ? secondPivotIndex : firstPivotIndex;\n      let index = pivotIndex;\n      while (index >= 0 && index < panelConstraintsArray.length) {\n        const prevSize = nextLayout[index];\n        assert(prevSize != null);\n        const unsafeSize = prevSize + deltaRemaining;\n        const safeSize = resizePanel({\n          panelConstraints: panelConstraintsArray,\n          panelIndex: index,\n          size: unsafeSize\n        });\n        if (!fuzzyNumbersEqual(prevSize, safeSize)) {\n          deltaRemaining -= safeSize - prevSize;\n          nextLayout[index] = safeSize;\n        }\n        if (fuzzyNumbersEqual(deltaRemaining, 0)) {\n          break;\n        }\n        if (delta > 0) {\n          index--;\n        } else {\n          index++;\n        }\n      }\n    }\n  }\n  //DEBUG.push(`after 2: ${nextLayout.join(\", \")}`);\n  //DEBUG.push(`  deltaApplied: ${deltaApplied}`);\n  //DEBUG.push(\"\");\n\n  const totalSize = nextLayout.reduce((total, size) => size + total, 0);\n  //DEBUG.push(`total size: ${totalSize}`);\n  //console.log(DEBUG.join(\"\\n\"));\n\n  if (!fuzzyNumbersEqual(totalSize, 100)) {\n    return prevLayout;\n  }\n  return nextLayout;\n}\n\nfunction calculateAriaValues({\n  layout,\n  panelsArray,\n  pivotIndices\n}) {\n  let currentMinSize = 0;\n  let currentMaxSize = 100;\n  let totalMinSize = 0;\n  let totalMaxSize = 0;\n  const firstIndex = pivotIndices[0];\n  assert(firstIndex != null);\n\n  // A panel's effective min/max sizes also need to account for other panel's sizes.\n  panelsArray.forEach((panelData, index) => {\n    const {\n      constraints\n    } = panelData;\n    const {\n      maxSize = 100,\n      minSize = 0\n    } = constraints;\n    if (index === firstIndex) {\n      currentMinSize = minSize;\n      currentMaxSize = maxSize;\n    } else {\n      totalMinSize += minSize;\n      totalMaxSize += maxSize;\n    }\n  });\n  const valueMax = Math.min(currentMaxSize, 100 - totalMinSize);\n  const valueMin = Math.max(currentMinSize, 100 - totalMaxSize);\n  const valueNow = layout[firstIndex];\n  return {\n    valueMax,\n    valueMin,\n    valueNow\n  };\n}\n\nfunction getResizeHandleElementsForGroup(groupId, scope = document) {\n  return Array.from(scope.querySelectorAll(`[data-panel-resize-handle-id][data-panel-group-id=\"${groupId}\"]`));\n}\n\nfunction getResizeHandleElementIndex(groupId, id, scope = document) {\n  const handles = getResizeHandleElementsForGroup(groupId, scope);\n  const index = handles.findIndex(handle => handle.getAttribute(\"data-panel-resize-handle-id\") === id);\n  return index !== null && index !== void 0 ? index : null;\n}\n\nfunction determinePivotIndices(groupId, dragHandleId, panelGroupElement) {\n  const index = getResizeHandleElementIndex(groupId, dragHandleId, panelGroupElement);\n  return index != null ? [index, index + 1] : [-1, -1];\n}\n\nfunction getPanelGroupElement(id, rootElement = document) {\n  var _dataset;\n  //If the root element is the PanelGroup\n  if (rootElement instanceof HTMLElement && (rootElement === null || rootElement === void 0 ? void 0 : (_dataset = rootElement.dataset) === null || _dataset === void 0 ? void 0 : _dataset.panelGroupId) == id) {\n    return rootElement;\n  }\n\n  //Else query children\n  const element = rootElement.querySelector(`[data-panel-group][data-panel-group-id=\"${id}\"]`);\n  if (element) {\n    return element;\n  }\n  return null;\n}\n\nfunction getResizeHandleElement(id, scope = document) {\n  const element = scope.querySelector(`[data-panel-resize-handle-id=\"${id}\"]`);\n  if (element) {\n    return element;\n  }\n  return null;\n}\n\nfunction getResizeHandlePanelIds(groupId, handleId, panelsArray, scope = document) {\n  var _panelsArray$index$id, _panelsArray$index, _panelsArray$id, _panelsArray;\n  const handle = getResizeHandleElement(handleId, scope);\n  const handles = getResizeHandleElementsForGroup(groupId, scope);\n  const index = handle ? handles.indexOf(handle) : -1;\n  const idBefore = (_panelsArray$index$id = (_panelsArray$index = panelsArray[index]) === null || _panelsArray$index === void 0 ? void 0 : _panelsArray$index.id) !== null && _panelsArray$index$id !== void 0 ? _panelsArray$index$id : null;\n  const idAfter = (_panelsArray$id = (_panelsArray = panelsArray[index + 1]) === null || _panelsArray === void 0 ? void 0 : _panelsArray.id) !== null && _panelsArray$id !== void 0 ? _panelsArray$id : null;\n  return [idBefore, idAfter];\n}\n\n// https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/\n\nfunction useWindowSplitterPanelGroupBehavior({\n  committedValuesRef,\n  eagerValuesRef,\n  groupId,\n  layout,\n  panelDataArray,\n  panelGroupElement,\n  setLayout\n}) {\n  useRef({\n    didWarnAboutMissingResizeHandle: false\n  });\n  useIsomorphicLayoutEffect(() => {\n    if (!panelGroupElement) {\n      return;\n    }\n    const resizeHandleElements = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n    for (let index = 0; index < panelDataArray.length - 1; index++) {\n      const {\n        valueMax,\n        valueMin,\n        valueNow\n      } = calculateAriaValues({\n        layout,\n        panelsArray: panelDataArray,\n        pivotIndices: [index, index + 1]\n      });\n      const resizeHandleElement = resizeHandleElements[index];\n      if (resizeHandleElement == null) ; else {\n        const panelData = panelDataArray[index];\n        assert(panelData);\n        resizeHandleElement.setAttribute(\"aria-controls\", panelData.id);\n        resizeHandleElement.setAttribute(\"aria-valuemax\", \"\" + Math.round(valueMax));\n        resizeHandleElement.setAttribute(\"aria-valuemin\", \"\" + Math.round(valueMin));\n        resizeHandleElement.setAttribute(\"aria-valuenow\", valueNow != null ? \"\" + Math.round(valueNow) : \"\");\n      }\n    }\n    return () => {\n      resizeHandleElements.forEach((resizeHandleElement, index) => {\n        resizeHandleElement.removeAttribute(\"aria-controls\");\n        resizeHandleElement.removeAttribute(\"aria-valuemax\");\n        resizeHandleElement.removeAttribute(\"aria-valuemin\");\n        resizeHandleElement.removeAttribute(\"aria-valuenow\");\n      });\n    };\n  }, [groupId, layout, panelDataArray, panelGroupElement]);\n  useEffect(() => {\n    if (!panelGroupElement) {\n      return;\n    }\n    const eagerValues = eagerValuesRef.current;\n    assert(eagerValues);\n    const {\n      panelDataArray\n    } = eagerValues;\n    const groupElement = getPanelGroupElement(groupId, panelGroupElement);\n    assert(groupElement != null, `No group found for id \"${groupId}\"`);\n    const handles = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n    assert(handles);\n    const cleanupFunctions = handles.map(handle => {\n      const handleId = handle.getAttribute(\"data-panel-resize-handle-id\");\n      assert(handleId);\n      const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelDataArray, panelGroupElement);\n      if (idBefore == null || idAfter == null) {\n        return () => {};\n      }\n      const onKeyDown = event => {\n        if (event.defaultPrevented) {\n          return;\n        }\n        switch (event.key) {\n          case \"Enter\":\n            {\n              event.preventDefault();\n              const index = panelDataArray.findIndex(panelData => panelData.id === idBefore);\n              if (index >= 0) {\n                const panelData = panelDataArray[index];\n                assert(panelData);\n                const size = layout[index];\n                const {\n                  collapsedSize = 0,\n                  collapsible,\n                  minSize = 0\n                } = panelData.constraints;\n                if (size != null && collapsible) {\n                  const nextLayout = adjustLayoutByDelta({\n                    delta: fuzzyNumbersEqual(size, collapsedSize) ? minSize - collapsedSize : collapsedSize - size,\n                    layout,\n                    panelConstraints: panelDataArray.map(panelData => panelData.constraints),\n                    pivotIndices: determinePivotIndices(groupId, handleId, panelGroupElement),\n                    trigger: \"keyboard\"\n                  });\n                  if (layout !== nextLayout) {\n                    setLayout(nextLayout);\n                  }\n                }\n              }\n              break;\n            }\n        }\n      };\n      handle.addEventListener(\"keydown\", onKeyDown);\n      return () => {\n        handle.removeEventListener(\"keydown\", onKeyDown);\n      };\n    });\n    return () => {\n      cleanupFunctions.forEach(cleanupFunction => cleanupFunction());\n    };\n  }, [panelGroupElement, committedValuesRef, eagerValuesRef, groupId, layout, panelDataArray, setLayout]);\n}\n\nfunction areEqual(arrayA, arrayB) {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n  for (let index = 0; index < arrayA.length; index++) {\n    if (arrayA[index] !== arrayB[index]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isKeyDown(event) {\n  return event.type === \"keydown\";\n}\nfunction isMouseEvent(event) {\n  return event.type.startsWith(\"mouse\");\n}\nfunction isTouchEvent(event) {\n  return event.type.startsWith(\"touch\");\n}\n\nfunction getResizeEventCursorPosition(direction, event) {\n  const isHorizontal = direction === \"horizontal\";\n  if (isMouseEvent(event)) {\n    return isHorizontal ? event.clientX : event.clientY;\n  } else if (isTouchEvent(event)) {\n    const firstTouch = event.touches[0];\n    assert(firstTouch);\n    return isHorizontal ? firstTouch.screenX : firstTouch.screenY;\n  } else {\n    throw Error(`Unsupported event type \"${event.type}\"`);\n  }\n}\n\nfunction calculateDragOffsetPercentage(event, dragHandleId, direction, initialDragState, panelGroupElement) {\n  const isHorizontal = direction === \"horizontal\";\n  const handleElement = getResizeHandleElement(dragHandleId, panelGroupElement);\n  assert(handleElement);\n  const groupId = handleElement.getAttribute(\"data-panel-group-id\");\n  assert(groupId);\n  let {\n    initialCursorPosition\n  } = initialDragState;\n  const cursorPosition = getResizeEventCursorPosition(direction, event);\n  const groupElement = getPanelGroupElement(groupId, panelGroupElement);\n  assert(groupElement);\n  const groupRect = groupElement.getBoundingClientRect();\n  const groupSizeInPixels = isHorizontal ? groupRect.width : groupRect.height;\n  const offsetPixels = cursorPosition - initialCursorPosition;\n  const offsetPercentage = offsetPixels / groupSizeInPixels * 100;\n  return offsetPercentage;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX\nfunction calculateDeltaPercentage(event, dragHandleId, direction, initialDragState, keyboardResizeBy, panelGroupElement) {\n  if (isKeyDown(event)) {\n    const isHorizontal = direction === \"horizontal\";\n    let delta = 0;\n    if (event.shiftKey) {\n      delta = 100;\n    } else if (keyboardResizeBy != null) {\n      delta = keyboardResizeBy;\n    } else {\n      delta = 10;\n    }\n    let movement = 0;\n    switch (event.key) {\n      case \"ArrowDown\":\n        movement = isHorizontal ? 0 : delta;\n        break;\n      case \"ArrowLeft\":\n        movement = isHorizontal ? -delta : 0;\n        break;\n      case \"ArrowRight\":\n        movement = isHorizontal ? delta : 0;\n        break;\n      case \"ArrowUp\":\n        movement = isHorizontal ? 0 : -delta;\n        break;\n      case \"End\":\n        movement = 100;\n        break;\n      case \"Home\":\n        movement = -100;\n        break;\n    }\n    return movement;\n  } else {\n    if (initialDragState == null) {\n      return 0;\n    }\n    return calculateDragOffsetPercentage(event, dragHandleId, direction, initialDragState, panelGroupElement);\n  }\n}\n\nfunction calculateUnsafeDefaultLayout({\n  panelDataArray\n}) {\n  const layout = Array(panelDataArray.length);\n  const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n  let numPanelsWithSizes = 0;\n  let remainingSize = 100;\n\n  // Distribute default sizes first\n  for (let index = 0; index < panelDataArray.length; index++) {\n    const panelConstraints = panelConstraintsArray[index];\n    assert(panelConstraints);\n    const {\n      defaultSize\n    } = panelConstraints;\n    if (defaultSize != null) {\n      numPanelsWithSizes++;\n      layout[index] = defaultSize;\n      remainingSize -= defaultSize;\n    }\n  }\n\n  // Remaining size should be distributed evenly between panels without default sizes\n  for (let index = 0; index < panelDataArray.length; index++) {\n    const panelConstraints = panelConstraintsArray[index];\n    assert(panelConstraints);\n    const {\n      defaultSize\n    } = panelConstraints;\n    if (defaultSize != null) {\n      continue;\n    }\n    const numRemainingPanels = panelDataArray.length - numPanelsWithSizes;\n    const size = remainingSize / numRemainingPanels;\n    numPanelsWithSizes++;\n    layout[index] = size;\n    remainingSize -= size;\n  }\n  return layout;\n}\n\n// Layout should be pre-converted into percentages\nfunction callPanelCallbacks(panelsArray, layout, panelIdToLastNotifiedSizeMap) {\n  layout.forEach((size, index) => {\n    const panelData = panelsArray[index];\n    assert(panelData);\n    const {\n      callbacks,\n      constraints,\n      id: panelId\n    } = panelData;\n    const {\n      collapsedSize = 0,\n      collapsible\n    } = constraints;\n    const lastNotifiedSize = panelIdToLastNotifiedSizeMap[panelId];\n    if (lastNotifiedSize == null || size !== lastNotifiedSize) {\n      panelIdToLastNotifiedSizeMap[panelId] = size;\n      const {\n        onCollapse,\n        onExpand,\n        onResize\n      } = callbacks;\n      if (onResize) {\n        onResize(size, lastNotifiedSize);\n      }\n      if (collapsible && (onCollapse || onExpand)) {\n        if (onExpand && (lastNotifiedSize == null || lastNotifiedSize === collapsedSize) && size !== collapsedSize) {\n          onExpand();\n        }\n        if (onCollapse && (lastNotifiedSize == null || lastNotifiedSize !== collapsedSize) && size === collapsedSize) {\n          onCollapse();\n        }\n      }\n    }\n  });\n}\n\nfunction compareLayouts(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  } else {\n    for (let index = 0; index < a.length; index++) {\n      if (a[index] != b[index]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n// This method returns a number between 1 and 100 representing\n\n// the % of the group's overall space this panel should occupy.\nfunction computePanelFlexBoxStyle({\n  defaultSize,\n  dragState,\n  layout,\n  panelData,\n  panelIndex,\n  precision = 3\n}) {\n  const size = layout[panelIndex];\n  let flexGrow;\n  if (size == null) {\n    // Initial render (before panels have registered themselves)\n    // In order to support server rendering, fall back to default size if provided\n    flexGrow = defaultSize !== null && defaultSize !== void 0 ? defaultSize : \"1\";\n  } else if (panelData.length === 1) {\n    // Special case: Single panel group should always fill full width/height\n    flexGrow = \"1\";\n  } else {\n    flexGrow = size.toPrecision(precision);\n  }\n  return {\n    flexBasis: 0,\n    flexGrow,\n    flexShrink: 1,\n    // Without this, Panel sizes may be unintentionally overridden by their content\n    overflow: \"hidden\",\n    // Disable pointer events inside of a panel during resize\n    // This avoid edge cases like nested iframes\n    pointerEvents: dragState !== null ? \"none\" : undefined\n  };\n}\n\nlet currentState = null;\nlet element = null;\nfunction getCursorStyle(state) {\n  switch (state) {\n    case \"horizontal\":\n      return \"ew-resize\";\n    case \"horizontal-max\":\n      return \"w-resize\";\n    case \"horizontal-min\":\n      return \"e-resize\";\n    case \"vertical\":\n      return \"ns-resize\";\n    case \"vertical-max\":\n      return \"n-resize\";\n    case \"vertical-min\":\n      return \"s-resize\";\n  }\n}\nfunction resetGlobalCursorStyle() {\n  if (element !== null) {\n    document.head.removeChild(element);\n    currentState = null;\n    element = null;\n  }\n}\nfunction setGlobalCursorStyle(state) {\n  if (currentState === state) {\n    return;\n  }\n  currentState = state;\n  const style = getCursorStyle(state);\n  if (element === null) {\n    element = document.createElement(\"style\");\n    document.head.appendChild(element);\n  }\n  element.innerHTML = `*{cursor: ${style}!important;}`;\n}\n\nfunction debounce(callback, durationMs = 10) {\n  let timeoutId = null;\n  let callable = (...args) => {\n    if (timeoutId !== null) {\n      clearTimeout(timeoutId);\n    }\n    timeoutId = setTimeout(() => {\n      callback(...args);\n    }, durationMs);\n  };\n  return callable;\n}\n\n// PanelGroup might be rendering in a server-side environment where localStorage is not available\n// or on a browser with cookies/storage disabled.\n// In either case, this function avoids accessing localStorage until needed,\n// and avoids throwing user-visible errors.\nfunction initializeDefaultStorage(storageObject) {\n  try {\n    if (typeof localStorage !== \"undefined\") {\n      // Bypass this check for future calls\n      storageObject.getItem = name => {\n        return localStorage.getItem(name);\n      };\n      storageObject.setItem = (name, value) => {\n        localStorage.setItem(name, value);\n      };\n    } else {\n      throw new Error(\"localStorage not supported in this environment\");\n    }\n  } catch (error) {\n    console.error(error);\n    storageObject.getItem = () => null;\n    storageObject.setItem = () => {};\n  }\n}\n\nfunction getPanelGroupKey(autoSaveId) {\n  return `react-resizable-panels:${autoSaveId}`;\n}\n\n// Note that Panel ids might be user-provided (stable) or useId generated (non-deterministic)\n// so they should not be used as part of the serialization key.\n// Using the min/max size attributes should work well enough as a backup.\n// Pre-sorting by minSize allows remembering layouts even if panels are re-ordered/dragged.\nfunction getPanelKey(panels) {\n  return panels.map(panel => {\n    const {\n      constraints,\n      id,\n      idIsFromProps,\n      order\n    } = panel;\n    if (idIsFromProps) {\n      return id;\n    } else {\n      return order ? `${order}:${JSON.stringify(constraints)}` : JSON.stringify(constraints);\n    }\n  }).sort((a, b) => a.localeCompare(b)).join(\",\");\n}\nfunction loadSerializedPanelGroupState(autoSaveId, storage) {\n  try {\n    const panelGroupKey = getPanelGroupKey(autoSaveId);\n    const serialized = storage.getItem(panelGroupKey);\n    if (serialized) {\n      const parsed = JSON.parse(serialized);\n      if (typeof parsed === \"object\" && parsed != null) {\n        return parsed;\n      }\n    }\n  } catch (error) {}\n  return null;\n}\nfunction loadPanelGroupState(autoSaveId, panels, storage) {\n  var _loadSerializedPanelG, _state$panelKey;\n  const state = (_loadSerializedPanelG = loadSerializedPanelGroupState(autoSaveId, storage)) !== null && _loadSerializedPanelG !== void 0 ? _loadSerializedPanelG : {};\n  const panelKey = getPanelKey(panels);\n  return (_state$panelKey = state[panelKey]) !== null && _state$panelKey !== void 0 ? _state$panelKey : null;\n}\nfunction savePanelGroupState(autoSaveId, panels, panelSizesBeforeCollapse, sizes, storage) {\n  var _loadSerializedPanelG2;\n  const panelGroupKey = getPanelGroupKey(autoSaveId);\n  const panelKey = getPanelKey(panels);\n  const state = (_loadSerializedPanelG2 = loadSerializedPanelGroupState(autoSaveId, storage)) !== null && _loadSerializedPanelG2 !== void 0 ? _loadSerializedPanelG2 : {};\n  state[panelKey] = {\n    expandToSizes: Object.fromEntries(panelSizesBeforeCollapse.entries()),\n    layout: sizes\n  };\n  try {\n    storage.setItem(panelGroupKey, JSON.stringify(state));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n// All units must be in percentages; pixel values should be pre-converted\nfunction validatePanelGroupLayout({\n  layout: prevLayout,\n  panelConstraints\n}) {\n  const nextLayout = [...prevLayout];\n  const nextLayoutTotalSize = nextLayout.reduce((accumulated, current) => accumulated + current, 0);\n\n  // Validate layout expectations\n  if (nextLayout.length !== panelConstraints.length) {\n    throw Error(`Invalid ${panelConstraints.length} panel layout: ${nextLayout.map(size => `${size}%`).join(\", \")}`);\n  } else if (!fuzzyNumbersEqual(nextLayoutTotalSize, 100)) {\n    for (let index = 0; index < panelConstraints.length; index++) {\n      const unsafeSize = nextLayout[index];\n      assert(unsafeSize != null);\n      const safeSize = 100 / nextLayoutTotalSize * unsafeSize;\n      nextLayout[index] = safeSize;\n    }\n  }\n  let remainingSize = 0;\n\n  // First pass: Validate the proposed layout given each panel's constraints\n  for (let index = 0; index < panelConstraints.length; index++) {\n    const unsafeSize = nextLayout[index];\n    assert(unsafeSize != null);\n    const safeSize = resizePanel({\n      panelConstraints,\n      panelIndex: index,\n      size: unsafeSize\n    });\n    if (unsafeSize != safeSize) {\n      remainingSize += unsafeSize - safeSize;\n      nextLayout[index] = safeSize;\n    }\n  }\n\n  // If there is additional, left over space, assign it to any panel(s) that permits it\n  // (It's not worth taking multiple additional passes to evenly distribute)\n  if (!fuzzyNumbersEqual(remainingSize, 0)) {\n    for (let index = 0; index < panelConstraints.length; index++) {\n      const prevSize = nextLayout[index];\n      assert(prevSize != null);\n      const unsafeSize = prevSize + remainingSize;\n      const safeSize = resizePanel({\n        panelConstraints,\n        panelIndex: index,\n        size: unsafeSize\n      });\n      if (prevSize !== safeSize) {\n        remainingSize -= safeSize - prevSize;\n        nextLayout[index] = safeSize;\n\n        // Once we've used up the remainder, bail\n        if (fuzzyNumbersEqual(remainingSize, 0)) {\n          break;\n        }\n      }\n    }\n  }\n  return nextLayout;\n}\n\nconst LOCAL_STORAGE_DEBOUNCE_INTERVAL = 100;\nconst defaultStorage = {\n  getItem: name => {\n    initializeDefaultStorage(defaultStorage);\n    return defaultStorage.getItem(name);\n  },\n  setItem: (name, value) => {\n    initializeDefaultStorage(defaultStorage);\n    defaultStorage.setItem(name, value);\n  }\n};\nconst debounceMap = {};\nfunction PanelGroupWithForwardedRef({\n  autoSaveId = null,\n  children,\n  className: classNameFromProps = \"\",\n  direction,\n  forwardedRef,\n  id: idFromProps = null,\n  onLayout = null,\n  keyboardResizeBy = null,\n  storage = defaultStorage,\n  style: styleFromProps,\n  tagName: Type = \"div\",\n  ...rest\n}) {\n  const groupId = useUniqueId(idFromProps);\n  const panelGroupElementRef = useRef(null);\n  const [dragState, setDragState] = useState(null);\n  const [layout, setLayout] = useState([]);\n  const panelIdToLastNotifiedSizeMapRef = useRef({});\n  const panelSizeBeforeCollapseRef = useRef(new Map());\n  const prevDeltaRef = useRef(0);\n  const committedValuesRef = useRef({\n    autoSaveId,\n    direction,\n    dragState,\n    id: groupId,\n    keyboardResizeBy,\n    onLayout,\n    storage\n  });\n  const eagerValuesRef = useRef({\n    layout,\n    panelDataArray: [],\n    panelDataArrayChanged: false\n  });\n  useRef({\n    didLogIdAndOrderWarning: false,\n    didLogPanelConstraintsWarning: false,\n    prevPanelIds: []\n  });\n  useImperativeHandle(forwardedRef, () => ({\n    getId: () => committedValuesRef.current.id,\n    getLayout: () => {\n      const {\n        layout\n      } = eagerValuesRef.current;\n      return layout;\n    },\n    setLayout: unsafeLayout => {\n      const {\n        onLayout\n      } = committedValuesRef.current;\n      const {\n        layout: prevLayout,\n        panelDataArray\n      } = eagerValuesRef.current;\n      const safeLayout = validatePanelGroupLayout({\n        layout: unsafeLayout,\n        panelConstraints: panelDataArray.map(panelData => panelData.constraints)\n      });\n      if (!areEqual(prevLayout, safeLayout)) {\n        setLayout(safeLayout);\n        eagerValuesRef.current.layout = safeLayout;\n        if (onLayout) {\n          onLayout(safeLayout);\n        }\n        callPanelCallbacks(panelDataArray, safeLayout, panelIdToLastNotifiedSizeMapRef.current);\n      }\n    }\n  }), []);\n  useIsomorphicLayoutEffect(() => {\n    committedValuesRef.current.autoSaveId = autoSaveId;\n    committedValuesRef.current.direction = direction;\n    committedValuesRef.current.dragState = dragState;\n    committedValuesRef.current.id = groupId;\n    committedValuesRef.current.onLayout = onLayout;\n    committedValuesRef.current.storage = storage;\n  });\n  useWindowSplitterPanelGroupBehavior({\n    committedValuesRef,\n    eagerValuesRef,\n    groupId,\n    layout,\n    panelDataArray: eagerValuesRef.current.panelDataArray,\n    setLayout,\n    panelGroupElement: panelGroupElementRef.current\n  });\n  useEffect(() => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n\n    // If this panel has been configured to persist sizing information, save sizes to local storage.\n    if (autoSaveId) {\n      if (layout.length === 0 || layout.length !== panelDataArray.length) {\n        return;\n      }\n      let debouncedSave = debounceMap[autoSaveId];\n\n      // Limit the frequency of localStorage updates.\n      if (debouncedSave == null) {\n        debouncedSave = debounce(savePanelGroupState, LOCAL_STORAGE_DEBOUNCE_INTERVAL);\n        debounceMap[autoSaveId] = debouncedSave;\n      }\n\n      // Clone mutable data before passing to the debounced function,\n      // else we run the risk of saving an incorrect combination of mutable and immutable values to state.\n      const clonedPanelDataArray = [...panelDataArray];\n      const clonedPanelSizesBeforeCollapse = new Map(panelSizeBeforeCollapseRef.current);\n      debouncedSave(autoSaveId, clonedPanelDataArray, clonedPanelSizesBeforeCollapse, layout, storage);\n    }\n  }, [autoSaveId, layout, storage]);\n\n  // DEV warnings\n  useEffect(() => {\n  });\n\n  // External APIs are safe to memoize via committed values ref\n  const collapsePanel = useCallback(panelData => {\n    const {\n      onLayout\n    } = committedValuesRef.current;\n    const {\n      layout: prevLayout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    if (panelData.constraints.collapsible) {\n      const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n      const {\n        collapsedSize = 0,\n        panelSize,\n        pivotIndices\n      } = panelDataHelper(panelDataArray, panelData, prevLayout);\n      assert(panelSize != null);\n      if (panelSize !== collapsedSize) {\n        // Store size before collapse;\n        // This is the size that gets restored if the expand() API is used.\n        panelSizeBeforeCollapseRef.current.set(panelData.id, panelSize);\n        const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n        const delta = isLastPanel ? panelSize - collapsedSize : collapsedSize - panelSize;\n        const nextLayout = adjustLayoutByDelta({\n          delta,\n          layout: prevLayout,\n          panelConstraints: panelConstraintsArray,\n          pivotIndices,\n          trigger: \"imperative-api\"\n        });\n        if (!compareLayouts(prevLayout, nextLayout)) {\n          setLayout(nextLayout);\n          eagerValuesRef.current.layout = nextLayout;\n          if (onLayout) {\n            onLayout(nextLayout);\n          }\n          callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n        }\n      }\n    }\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const expandPanel = useCallback(panelData => {\n    const {\n      onLayout\n    } = committedValuesRef.current;\n    const {\n      layout: prevLayout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    if (panelData.constraints.collapsible) {\n      const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n      const {\n        collapsedSize = 0,\n        panelSize,\n        minSize = 0,\n        pivotIndices\n      } = panelDataHelper(panelDataArray, panelData, prevLayout);\n      if (panelSize === collapsedSize) {\n        // Restore this panel to the size it was before it was collapsed, if possible.\n        const prevPanelSize = panelSizeBeforeCollapseRef.current.get(panelData.id);\n        const baseSize = prevPanelSize != null && prevPanelSize >= minSize ? prevPanelSize : minSize;\n        const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n        const delta = isLastPanel ? panelSize - baseSize : baseSize - panelSize;\n        const nextLayout = adjustLayoutByDelta({\n          delta,\n          layout: prevLayout,\n          panelConstraints: panelConstraintsArray,\n          pivotIndices,\n          trigger: \"imperative-api\"\n        });\n        if (!compareLayouts(prevLayout, nextLayout)) {\n          setLayout(nextLayout);\n          eagerValuesRef.current.layout = nextLayout;\n          if (onLayout) {\n            onLayout(nextLayout);\n          }\n          callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n        }\n      }\n    }\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const getPanelSize = useCallback(panelData => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      panelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    assert(panelSize != null);\n    return panelSize;\n  }, []);\n\n  // This API should never read from committedValuesRef\n  const getPanelStyle = useCallback((panelData, defaultSize) => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n    const panelIndex = findPanelDataIndex(panelDataArray, panelData);\n    return computePanelFlexBoxStyle({\n      defaultSize,\n      dragState,\n      layout,\n      panelData: panelDataArray,\n      panelIndex\n    });\n  }, [dragState, layout]);\n\n  // External APIs are safe to memoize via committed values ref\n  const isPanelCollapsed = useCallback(panelData => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      collapsedSize = 0,\n      collapsible,\n      panelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    return collapsible === true && panelSize === collapsedSize;\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const isPanelExpanded = useCallback(panelData => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      collapsedSize = 0,\n      collapsible,\n      panelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    assert(panelSize != null);\n    return !collapsible || panelSize > collapsedSize;\n  }, []);\n  const registerPanel = useCallback(panelData => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n    panelDataArray.push(panelData);\n    panelDataArray.sort((panelA, panelB) => {\n      const orderA = panelA.order;\n      const orderB = panelB.order;\n      if (orderA == null && orderB == null) {\n        return 0;\n      } else if (orderA == null) {\n        return -1;\n      } else if (orderB == null) {\n        return 1;\n      } else {\n        return orderA - orderB;\n      }\n    });\n    eagerValuesRef.current.panelDataArrayChanged = true;\n  }, []);\n\n  // (Re)calculate group layout whenever panels are registered or unregistered.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useIsomorphicLayoutEffect(() => {\n    if (eagerValuesRef.current.panelDataArrayChanged) {\n      eagerValuesRef.current.panelDataArrayChanged = false;\n      const {\n        autoSaveId,\n        onLayout,\n        storage\n      } = committedValuesRef.current;\n      const {\n        layout: prevLayout,\n        panelDataArray\n      } = eagerValuesRef.current;\n\n      // If this panel has been configured to persist sizing information,\n      // default size should be restored from local storage if possible.\n      let unsafeLayout = null;\n      if (autoSaveId) {\n        const state = loadPanelGroupState(autoSaveId, panelDataArray, storage);\n        if (state) {\n          panelSizeBeforeCollapseRef.current = new Map(Object.entries(state.expandToSizes));\n          unsafeLayout = state.layout;\n        }\n      }\n      if (unsafeLayout == null) {\n        unsafeLayout = calculateUnsafeDefaultLayout({\n          panelDataArray\n        });\n      }\n\n      // Validate even saved layouts in case something has changed since last render\n      // e.g. for pixel groups, this could be the size of the window\n      const nextLayout = validatePanelGroupLayout({\n        layout: unsafeLayout,\n        panelConstraints: panelDataArray.map(panelData => panelData.constraints)\n      });\n      if (!areEqual(prevLayout, nextLayout)) {\n        setLayout(nextLayout);\n        eagerValuesRef.current.layout = nextLayout;\n        if (onLayout) {\n          onLayout(nextLayout);\n        }\n        callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n      }\n    }\n  });\n  const registerResizeHandle = useCallback(dragHandleId => {\n    return function resizeHandler(event) {\n      event.preventDefault();\n      const panelGroupElement = panelGroupElementRef.current;\n      if (!panelGroupElement) {\n        return () => null;\n      }\n      const {\n        direction,\n        dragState,\n        id: groupId,\n        keyboardResizeBy,\n        onLayout\n      } = committedValuesRef.current;\n      const {\n        layout: prevLayout,\n        panelDataArray\n      } = eagerValuesRef.current;\n      const {\n        initialLayout\n      } = dragState !== null && dragState !== void 0 ? dragState : {};\n      const pivotIndices = determinePivotIndices(groupId, dragHandleId, panelGroupElement);\n      let delta = calculateDeltaPercentage(event, dragHandleId, direction, dragState, keyboardResizeBy, panelGroupElement);\n      if (delta === 0) {\n        return;\n      }\n\n      // Support RTL layouts\n      const isHorizontal = direction === \"horizontal\";\n      if (document.dir === \"rtl\" && isHorizontal) {\n        delta = -delta;\n      }\n      const panelConstraints = panelDataArray.map(panelData => panelData.constraints);\n      const nextLayout = adjustLayoutByDelta({\n        delta,\n        layout: initialLayout !== null && initialLayout !== void 0 ? initialLayout : prevLayout,\n        panelConstraints,\n        pivotIndices,\n        trigger: isKeyDown(event) ? \"keyboard\" : \"mouse-or-touch\"\n      });\n      const layoutChanged = !compareLayouts(prevLayout, nextLayout);\n\n      // Only update the cursor for layout changes triggered by touch/mouse events (not keyboard)\n      // Update the cursor even if the layout hasn't changed (we may need to show an invalid cursor state)\n      if (isMouseEvent(event) || isTouchEvent(event)) {\n        // Watch for multiple subsequent deltas; this might occur for tiny cursor movements.\n        // In this case, Panel sizes might not change–\n        // but updating cursor in this scenario would cause a flicker.\n        if (prevDeltaRef.current != delta) {\n          prevDeltaRef.current = delta;\n          if (!layoutChanged) {\n            // If the pointer has moved too far to resize the panel any further,\n            // update the cursor style for a visual clue.\n            // This mimics VS Code behavior.\n\n            if (isHorizontal) {\n              setGlobalCursorStyle(delta < 0 ? \"horizontal-min\" : \"horizontal-max\");\n            } else {\n              setGlobalCursorStyle(delta < 0 ? \"vertical-min\" : \"vertical-max\");\n            }\n          } else {\n            // Reset the cursor style to the the normal resize cursor.\n            setGlobalCursorStyle(isHorizontal ? \"horizontal\" : \"vertical\");\n          }\n        }\n      }\n      if (layoutChanged) {\n        setLayout(nextLayout);\n        eagerValuesRef.current.layout = nextLayout;\n        if (onLayout) {\n          onLayout(nextLayout);\n        }\n        callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n      }\n    };\n  }, []);\n\n  // External APIs are safe to memoize via committed values ref\n  const resizePanel = useCallback((panelData, unsafePanelSize) => {\n    const {\n      onLayout\n    } = committedValuesRef.current;\n    const {\n      layout: prevLayout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const panelConstraintsArray = panelDataArray.map(panelData => panelData.constraints);\n    const {\n      panelSize,\n      pivotIndices\n    } = panelDataHelper(panelDataArray, panelData, prevLayout);\n    assert(panelSize != null);\n    const isLastPanel = findPanelDataIndex(panelDataArray, panelData) === panelDataArray.length - 1;\n    const delta = isLastPanel ? panelSize - unsafePanelSize : unsafePanelSize - panelSize;\n    const nextLayout = adjustLayoutByDelta({\n      delta,\n      layout: prevLayout,\n      panelConstraints: panelConstraintsArray,\n      pivotIndices,\n      trigger: \"imperative-api\"\n    });\n    if (!compareLayouts(prevLayout, nextLayout)) {\n      setLayout(nextLayout);\n      eagerValuesRef.current.layout = nextLayout;\n      if (onLayout) {\n        onLayout(nextLayout);\n      }\n      callPanelCallbacks(panelDataArray, nextLayout, panelIdToLastNotifiedSizeMapRef.current);\n    }\n  }, []);\n  const reevaluatePanelConstraints = useCallback((panelData, prevConstraints) => {\n    const {\n      layout,\n      panelDataArray\n    } = eagerValuesRef.current;\n    const {\n      collapsedSize: prevCollapsedSize = 0,\n      collapsible: prevCollapsible\n    } = prevConstraints;\n    const {\n      collapsedSize: nextCollapsedSize = 0,\n      collapsible: nextCollapsible,\n      maxSize: nextMaxSize = 100,\n      minSize: nextMinSize = 0\n    } = panelData.constraints;\n    const {\n      panelSize: prevPanelSize\n    } = panelDataHelper(panelDataArray, panelData, layout);\n    assert(prevPanelSize != null);\n    if (prevCollapsible && nextCollapsible && prevPanelSize === prevCollapsedSize) {\n      if (prevCollapsedSize !== nextCollapsedSize) {\n        resizePanel(panelData, nextCollapsedSize);\n      }\n    } else if (prevPanelSize < nextMinSize) {\n      resizePanel(panelData, nextMinSize);\n    } else if (prevPanelSize > nextMaxSize) {\n      resizePanel(panelData, nextMaxSize);\n    }\n  }, [resizePanel]);\n  const startDragging = useCallback((dragHandleId, event) => {\n    const {\n      direction\n    } = committedValuesRef.current;\n    const {\n      layout\n    } = eagerValuesRef.current;\n    if (!panelGroupElementRef.current) {\n      return;\n    }\n    const handleElement = getResizeHandleElement(dragHandleId, panelGroupElementRef.current);\n    assert(handleElement);\n    const initialCursorPosition = getResizeEventCursorPosition(direction, event);\n    setDragState({\n      dragHandleId,\n      dragHandleRect: handleElement.getBoundingClientRect(),\n      initialCursorPosition,\n      initialLayout: layout\n    });\n  }, []);\n  const stopDragging = useCallback(() => {\n    resetGlobalCursorStyle();\n    setDragState(null);\n  }, []);\n  const unregisterPanel = useCallback(panelData => {\n    const {\n      panelDataArray\n    } = eagerValuesRef.current;\n    const index = findPanelDataIndex(panelDataArray, panelData);\n    if (index >= 0) {\n      panelDataArray.splice(index, 1);\n\n      // TRICKY\n      // When a panel is removed from the group, we should delete the most recent prev-size entry for it.\n      // If we don't do this, then a conditionally rendered panel might not call onResize when it's re-mounted.\n      // Strict effects mode makes this tricky though because all panels will be registered, unregistered, then re-registered on mount.\n      delete panelIdToLastNotifiedSizeMapRef.current[panelData.id];\n      eagerValuesRef.current.panelDataArrayChanged = true;\n    }\n  }, []);\n  const context = useMemo(() => ({\n    collapsePanel,\n    direction,\n    dragState,\n    expandPanel,\n    getPanelSize,\n    getPanelStyle,\n    groupId,\n    isPanelCollapsed,\n    isPanelExpanded,\n    reevaluatePanelConstraints,\n    registerPanel,\n    registerResizeHandle,\n    resizePanel,\n    startDragging,\n    stopDragging,\n    unregisterPanel,\n    panelGroupElement: panelGroupElementRef.current\n  }), [collapsePanel, dragState, direction, expandPanel, getPanelSize, getPanelStyle, groupId, isPanelCollapsed, isPanelExpanded, reevaluatePanelConstraints, registerPanel, registerResizeHandle, resizePanel, startDragging, stopDragging, unregisterPanel]);\n  const style = {\n    display: \"flex\",\n    flexDirection: direction === \"horizontal\" ? \"row\" : \"column\",\n    height: \"100%\",\n    overflow: \"hidden\",\n    width: \"100%\"\n  };\n  return createElement(PanelGroupContext.Provider, {\n    value: context\n  }, createElement(Type, {\n    ...rest,\n    children,\n    className: classNameFromProps,\n    style: {\n      ...style,\n      ...styleFromProps\n    },\n    ref: panelGroupElementRef,\n    // CSS selectors\n    \"data-panel-group\": \"\",\n    \"data-panel-group-direction\": direction,\n    \"data-panel-group-id\": groupId\n  }));\n}\nconst PanelGroup = forwardRef((props, ref) => createElement(PanelGroupWithForwardedRef, {\n  ...props,\n  forwardedRef: ref\n}));\nPanelGroupWithForwardedRef.displayName = \"PanelGroup\";\nPanelGroup.displayName = \"forwardRef(PanelGroup)\";\nfunction findPanelDataIndex(panelDataArray, panelData) {\n  return panelDataArray.findIndex(prevPanelData => prevPanelData === panelData || prevPanelData.id === panelData.id);\n}\nfunction panelDataHelper(panelDataArray, panelData, layout) {\n  const panelIndex = findPanelDataIndex(panelDataArray, panelData);\n  const isLastPanel = panelIndex === panelDataArray.length - 1;\n  const pivotIndices = isLastPanel ? [panelIndex - 1, panelIndex] : [panelIndex, panelIndex + 1];\n  const panelSize = layout[panelIndex];\n  return {\n    ...panelData.constraints,\n    panelSize,\n    pivotIndices\n  };\n}\n\n// https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/\n\nfunction useWindowSplitterResizeHandlerBehavior({\n  disabled,\n  handleId,\n  resizeHandler,\n  panelGroupElement\n}) {\n  useEffect(() => {\n    if (disabled || resizeHandler == null || panelGroupElement == null) {\n      return;\n    }\n    const handleElement = getResizeHandleElement(handleId, panelGroupElement);\n    if (handleElement == null) {\n      return;\n    }\n    const onKeyDown = event => {\n      if (event.defaultPrevented) {\n        return;\n      }\n      switch (event.key) {\n        case \"ArrowDown\":\n        case \"ArrowLeft\":\n        case \"ArrowRight\":\n        case \"ArrowUp\":\n        case \"End\":\n        case \"Home\":\n          {\n            event.preventDefault();\n            resizeHandler(event);\n            break;\n          }\n        case \"F6\":\n          {\n            event.preventDefault();\n            const groupId = handleElement.getAttribute(\"data-panel-group-id\");\n            assert(groupId);\n            const handles = getResizeHandleElementsForGroup(groupId, panelGroupElement);\n            const index = getResizeHandleElementIndex(groupId, handleId, panelGroupElement);\n            assert(index !== null);\n            const nextIndex = event.shiftKey ? index > 0 ? index - 1 : handles.length - 1 : index + 1 < handles.length ? index + 1 : 0;\n            const nextHandle = handles[nextIndex];\n            nextHandle.focus();\n            break;\n          }\n      }\n    };\n    handleElement.addEventListener(\"keydown\", onKeyDown);\n    return () => {\n      handleElement.removeEventListener(\"keydown\", onKeyDown);\n    };\n  }, [panelGroupElement, disabled, handleId, resizeHandler]);\n}\n\nfunction PanelResizeHandle({\n  children = null,\n  className: classNameFromProps = \"\",\n  disabled = false,\n  id: idFromProps,\n  onDragging,\n  style: styleFromProps = {},\n  tabIndex = 0,\n  tagName: Type = \"div\",\n  ...rest\n}) {\n  const elementRef = useRef(null);\n\n  // Use a ref to guard against users passing inline props\n  const callbacksRef = useRef({\n    onDragging\n  });\n  useEffect(() => {\n    callbacksRef.current.onDragging = onDragging;\n  });\n  const panelGroupContext = useContext(PanelGroupContext);\n  if (panelGroupContext === null) {\n    throw Error(`PanelResizeHandle components must be rendered within a PanelGroup container`);\n  }\n  const {\n    direction,\n    dragState,\n    groupId,\n    registerResizeHandle,\n    startDragging,\n    stopDragging,\n    panelGroupElement\n  } = panelGroupContext;\n  const resizeHandleId = useUniqueId(idFromProps);\n  const isDragging = (dragState === null || dragState === void 0 ? void 0 : dragState.dragHandleId) === resizeHandleId;\n  const [isFocused, setIsFocused] = useState(false);\n  const [resizeHandler, setResizeHandler] = useState(null);\n  const stopDraggingAndBlur = useCallback(() => {\n    // Clicking on the drag handle shouldn't leave it focused;\n    // That would cause the PanelGroup to think it was still active.\n    const element = elementRef.current;\n    assert(element);\n    element.blur();\n    stopDragging();\n    const {\n      onDragging\n    } = callbacksRef.current;\n    if (onDragging) {\n      onDragging(false);\n    }\n  }, [stopDragging]);\n  useEffect(() => {\n    if (disabled) {\n      setResizeHandler(null);\n    } else {\n      const resizeHandler = registerResizeHandle(resizeHandleId);\n      setResizeHandler(() => resizeHandler);\n    }\n  }, [disabled, resizeHandleId, registerResizeHandle]);\n  useEffect(() => {\n    if (disabled || resizeHandler == null || !isDragging) {\n      return;\n    }\n    const onMove = event => {\n      resizeHandler(event);\n    };\n    const onMouseLeave = event => {\n      resizeHandler(event);\n    };\n    const element = elementRef.current;\n    assert(element);\n    const targetDocument = element.ownerDocument;\n    targetDocument.body.addEventListener(\"contextmenu\", stopDraggingAndBlur);\n    targetDocument.body.addEventListener(\"mousemove\", onMove);\n    targetDocument.body.addEventListener(\"touchmove\", onMove);\n    targetDocument.body.addEventListener(\"mouseleave\", onMouseLeave);\n    window.addEventListener(\"mouseup\", stopDraggingAndBlur);\n    window.addEventListener(\"touchend\", stopDraggingAndBlur);\n    return () => {\n      targetDocument.body.removeEventListener(\"contextmenu\", stopDraggingAndBlur);\n      targetDocument.body.removeEventListener(\"mousemove\", onMove);\n      targetDocument.body.removeEventListener(\"touchmove\", onMove);\n      targetDocument.body.removeEventListener(\"mouseleave\", onMouseLeave);\n      window.removeEventListener(\"mouseup\", stopDraggingAndBlur);\n      window.removeEventListener(\"touchend\", stopDraggingAndBlur);\n    };\n  }, [direction, disabled, isDragging, resizeHandler, stopDraggingAndBlur]);\n  useWindowSplitterResizeHandlerBehavior({\n    disabled,\n    handleId: resizeHandleId,\n    resizeHandler,\n    panelGroupElement\n  });\n  const style = {\n    cursor: getCursorStyle(direction),\n    touchAction: \"none\",\n    userSelect: \"none\"\n  };\n  return createElement(Type, {\n    ...rest,\n    children,\n    className: classNameFromProps,\n    onBlur: () => setIsFocused(false),\n    onFocus: () => setIsFocused(true),\n    onMouseDown: event => {\n      startDragging(resizeHandleId, event.nativeEvent);\n      const callbacks = callbacksRef.current;\n      assert(callbacks);\n      const {\n        onDragging\n      } = callbacks;\n      if (onDragging) {\n        onDragging(true);\n      }\n    },\n    onMouseUp: stopDraggingAndBlur,\n    onTouchCancel: stopDraggingAndBlur,\n    onTouchEnd: stopDraggingAndBlur,\n    onTouchStart: event => {\n      startDragging(resizeHandleId, event.nativeEvent);\n      const callbacks = callbacksRef.current;\n      assert(callbacks);\n      const {\n        onDragging\n      } = callbacks;\n      if (onDragging) {\n        onDragging(true);\n      }\n    },\n    ref: elementRef,\n    role: \"separator\",\n    style: {\n      ...style,\n      ...styleFromProps\n    },\n    tabIndex,\n    // CSS selectors\n    \"data-panel-group-direction\": direction,\n    \"data-panel-group-id\": groupId,\n    \"data-resize-handle\": \"\",\n    \"data-resize-handle-active\": isDragging ? \"pointer\" : isFocused ? \"keyboard\" : undefined,\n    \"data-panel-resize-handle-enabled\": !disabled,\n    \"data-panel-resize-handle-id\": resizeHandleId\n  });\n}\nPanelResizeHandle.displayName = \"PanelResizeHandle\";\n\nfunction getPanelElement(id, scope = document) {\n  const element = scope.querySelector(`[data-panel-id=\"${id}\"]`);\n  if (element) {\n    return element;\n  }\n  return null;\n}\n\nfunction getPanelElementsForGroup(groupId, scope = document) {\n  return Array.from(scope.querySelectorAll(`[data-panel][data-panel-group-id=\"${groupId}\"]`));\n}\n\nexport { Panel, PanelGroup, PanelResizeHandle, assert, getPanelElement, getPanelElementsForGroup, getPanelGroupElement, getResizeHandleElement, getResizeHandleElementIndex, getResizeHandleElementsForGroup, getResizeHandlePanelIds };\n","import { GripVertical } from \"lucide-react\";\nimport * as ResizablePrimitive from \"react-resizable-panels\";\n\nimport { cn } from \"@utils/utils\";\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n);\n\nconst ResizablePanel = ResizablePrimitive.Panel;\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean;\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n);\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle };\n","import {\n  ResizableHandle,\n  ResizablePanel,\n  ResizablePanelGroup,\n} from \"@shadcn/ui/resizable\";\n\nexport default function Example() {\n  return (\n    <ResizablePanelGroup direction=\"horizontal\" className=\"border \">\n      <ResizablePanel defaultSize={50}>\n        <div className=\"flex h-[200px] items-center justify-center p-6\">\n          <span className=\"font-semibold\">One</span>\n        </div>\n      </ResizablePanel>\n      <ResizableHandle />\n      <ResizablePanel defaultSize={50}>\n        <div className=\"flex h-[200px] items-center justify-center p-6\">\n          <span className=\"font-semibold\">Two</span>\n        </div>\n      </ResizablePanel>\n    </ResizablePanelGroup>\n  );\n}\n"],"names":["GripVertical","createLucideIcon","createElement","createContext","forwardRef","useCallback","useContext","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useRef","useState","React","useId","PanelGroupContext","useIsomorphicLayoutEffect","wrappedUseId","counter","useUniqueId","idFromParams","idFromUseId","idRef","PanelWithForwardedRef","children","classNameFromProps","collapsedSize","collapsible","defaultSize","forwardedRef","idFromProps","maxSize","minSize","onCollapse","onExpand","onResize","order","styleFromProps","Type","rest","context","collapsePanel","expandPanel","getPanelSize","getPanelStyle","groupId","isPanelCollapsed","reevaluatePanelConstraints","registerPanel","resizePanel","unregisterPanel","panelId","panelDataRef","callbacks","constraints","prevConstraints","panelData","size","style","Panel","props","ref","assert","expectedCondition","message","PRECISION","fuzzyCompareNumbers","actual","expected","fractionDigits","delta","fuzzyNumbersEqual","panelConstraintsArray","panelIndex","panelConstraints","halfwayPoint","adjustLayoutByDelta","prevLayout","pivotIndices","trigger","nextLayout","firstPivotIndex","secondPivotIndex","deltaApplied","index","prevSize","localDelta","increment","maxAvailableDelta","minAbsDelta","deltaRemaining","unsafeSize","safeSize","pivotIndex","totalSize","total","calculateAriaValues","layout","panelsArray","currentMinSize","currentMaxSize","totalMinSize","totalMaxSize","firstIndex","valueMax","valueMin","valueNow","getResizeHandleElementsForGroup","scope","getResizeHandleElementIndex","id","handle","determinePivotIndices","dragHandleId","panelGroupElement","getPanelGroupElement","rootElement","_dataset","element","getResizeHandleElement","getResizeHandlePanelIds","handleId","_panelsArray$index$id","_panelsArray$index","_panelsArray$id","_panelsArray","handles","idBefore","idAfter","useWindowSplitterPanelGroupBehavior","committedValuesRef","eagerValuesRef","panelDataArray","setLayout","resizeHandleElements","resizeHandleElement","eagerValues","groupElement","cleanupFunctions","onKeyDown","event","cleanupFunction","areEqual","arrayA","arrayB","isKeyDown","isMouseEvent","isTouchEvent","getResizeEventCursorPosition","direction","isHorizontal","firstTouch","calculateDragOffsetPercentage","initialDragState","handleElement","initialCursorPosition","cursorPosition","groupRect","groupSizeInPixels","calculateDeltaPercentage","keyboardResizeBy","movement","calculateUnsafeDefaultLayout","numPanelsWithSizes","remainingSize","numRemainingPanels","callPanelCallbacks","panelIdToLastNotifiedSizeMap","lastNotifiedSize","compareLayouts","a","b","computePanelFlexBoxStyle","dragState","precision","flexGrow","currentState","getCursorStyle","state","resetGlobalCursorStyle","setGlobalCursorStyle","debounce","callback","durationMs","timeoutId","args","initializeDefaultStorage","storageObject","name","value","error","getPanelGroupKey","autoSaveId","getPanelKey","panels","panel","idIsFromProps","loadSerializedPanelGroupState","storage","panelGroupKey","serialized","parsed","loadPanelGroupState","_loadSerializedPanelG","_state$panelKey","panelKey","savePanelGroupState","panelSizesBeforeCollapse","sizes","_loadSerializedPanelG2","validatePanelGroupLayout","nextLayoutTotalSize","accumulated","current","LOCAL_STORAGE_DEBOUNCE_INTERVAL","defaultStorage","debounceMap","PanelGroupWithForwardedRef","onLayout","panelGroupElementRef","setDragState","panelIdToLastNotifiedSizeMapRef","panelSizeBeforeCollapseRef","prevDeltaRef","unsafeLayout","safeLayout","debouncedSave","clonedPanelDataArray","clonedPanelSizesBeforeCollapse","panelSize","panelDataHelper","findPanelDataIndex","prevPanelSize","baseSize","isPanelExpanded","panelA","panelB","orderA","orderB","registerResizeHandle","initialLayout","layoutChanged","unsafePanelSize","prevCollapsedSize","prevCollapsible","nextCollapsedSize","nextCollapsible","nextMaxSize","nextMinSize","startDragging","stopDragging","PanelGroup","prevPanelData","useWindowSplitterResizeHandlerBehavior","disabled","resizeHandler","nextIndex","PanelResizeHandle","onDragging","tabIndex","elementRef","callbacksRef","panelGroupContext","resizeHandleId","isDragging","isFocused","setIsFocused","setResizeHandler","stopDraggingAndBlur","onMove","onMouseLeave","targetDocument","ResizablePanelGroup","className","jsx","ResizablePrimitive.PanelGroup","cn","ResizablePanel","ResizablePrimitive.Panel","ResizableHandle","withHandle","ResizablePrimitive.PanelResizeHandle","Example","jsxs"],"mappings":"0mBAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMA,GAAeC,GAAiB,eAAgB,CACpD,CAAC,SAAU,CAAE,GAAI,IAAK,GAAI,KAAM,EAAG,IAAK,IAAK,SAAU,EACvD,CAAC,SAAU,CAAE,GAAI,IAAK,GAAI,IAAK,EAAG,IAAK,IAAK,SAAU,EACtD,CAAC,SAAU,CAAE,GAAI,IAAK,GAAI,KAAM,EAAG,IAAK,IAAK,SAAU,EACvD,CAAC,SAAU,CAAE,GAAI,KAAM,GAAI,KAAM,EAAG,IAAK,IAAK,SAAU,EACxD,CAAC,SAAU,CAAE,GAAI,KAAM,GAAI,IAAK,EAAG,IAAK,IAAK,SAAU,EACvD,CAAC,SAAU,CAAE,GAAI,KAAM,GAAI,KAAM,EAAG,IAAK,IAAK,QAAU,CAAA,CAC1D,CAAC,ECVK,CACJ,cAAAC,GACA,cAAAC,GAEA,WAAAC,GACA,YAAAC,EACA,WAAAC,GACA,UAAAC,EACA,oBAAAC,GACA,gBAAAC,GACA,QAAAC,GACA,OAAAC,EACA,SAAAC,EACF,EAAIC,GAGEC,GAAQD,GAAM,MAEdE,GAAoBZ,GAAc,IAAI,EAC5CY,GAAkB,YAAc,oBAEhC,MAAMC,GAA4BP,GAE5BQ,GAAe,OAAOH,IAAU,WAAaA,GAAQ,IAAM,KACjE,IAAII,GAAU,EACd,SAASC,GAAYC,EAAe,KAAM,CACxC,MAAMC,EAAcJ,GAAc,EAC5BK,EAAQX,EAAOS,GAAgBC,GAAe,IAAI,EACxD,OAAIC,EAAM,UAAY,OACpBA,EAAM,QAAU,GAAKJ,MAEhBE,GAAkEE,EAAM,OACjF,CAEA,SAASC,GAAsB,CAC7B,SAAAC,EACA,UAAWC,EAAqB,GAChC,cAAAC,EACA,YAAAC,EACA,YAAAC,EACA,aAAAC,EACA,GAAIC,EACJ,QAAAC,EACA,QAAAC,EACA,WAAAC,EACA,SAAAC,EACA,SAAAC,EACA,MAAAC,EACA,MAAOC,EACP,QAASC,EAAO,MAChB,GAAGC,CACL,EAAG,CACD,MAAMC,EAAUlC,GAAWS,EAAiB,EAC5C,GAAIyB,IAAY,KACd,MAAM,MAAM,iEAAiE,EAE/E,KAAM,CACJ,cAAAC,EACA,YAAAC,EACA,aAAAC,EACA,cAAAC,EACA,QAAAC,EACA,iBAAAC,EACA,2BAAAC,EACA,cAAAC,EACA,YAAAC,EACA,gBAAAC,CACJ,EAAMV,EACEW,EAAUhC,GAAYW,CAAW,EACjCsB,EAAezC,EAAO,CAC1B,UAAW,CACT,WAAAsB,EACA,SAAAC,EACA,SAAAC,CACD,EACD,YAAa,CACX,cAAAT,EACA,YAAAC,EACA,YAAAC,EACA,QAAAG,EACA,QAAAC,CACD,EACD,GAAImB,EACJ,cAAerB,IAAgB,OAC/B,MAAAM,CACJ,CAAG,EACDzB,EAAO,CACL,gCAAiC,EACrC,CAAG,EACDK,GAA0B,IAAM,CAC9B,KAAM,CACJ,UAAAqC,EACA,YAAAC,CACD,EAAGF,EAAa,QACXG,EAAkB,CACtB,GAAGD,CACJ,EACDF,EAAa,QAAQ,GAAKD,EAC1BC,EAAa,QAAQ,cAAgBtB,IAAgB,OACrDsB,EAAa,QAAQ,MAAQhB,EAC7BiB,EAAU,WAAapB,EACvBoB,EAAU,SAAWnB,EACrBmB,EAAU,SAAWlB,EACrBmB,EAAY,cAAgB5B,EAC5B4B,EAAY,YAAc3B,EAC1B2B,EAAY,YAAc1B,EAC1B0B,EAAY,QAAUvB,EACtBuB,EAAY,QAAUtB,GAIlBuB,EAAgB,gBAAkBD,EAAY,eAAiBC,EAAgB,cAAgBD,EAAY,aAAeC,EAAgB,UAAYD,EAAY,SAAWC,EAAgB,UAAYD,EAAY,UACvNP,EAA2BK,EAAa,QAASG,CAAe,CAEtE,CAAG,EACDvC,GAA0B,IAAM,CAC9B,MAAMwC,EAAYJ,EAAa,QAC/B,OAAAJ,EAAcQ,CAAS,EAChB,IAAM,CACXN,EAAgBM,CAAS,CAC1B,CACF,EAAE,CAACpB,EAAOe,EAASH,EAAeE,CAAe,CAAC,EACnD1C,GAAoBqB,EAAc,KAAO,CACvC,SAAU,IAAM,CACdY,EAAcW,EAAa,OAAO,CACnC,EACD,OAAQ,IAAM,CACZV,EAAYU,EAAa,OAAO,CACjC,EACD,OAAQ,CACN,OAAOD,CACR,EACD,SAAU,CACR,OAAOR,EAAaS,EAAa,OAAO,CACzC,EACD,aAAc,CACZ,OAAON,EAAiBM,EAAa,OAAO,CAC7C,EACD,YAAa,CACX,MAAO,CAACN,EAAiBM,EAAa,OAAO,CAC9C,EACD,OAAQK,GAAQ,CACdR,EAAYG,EAAa,QAASK,CAAI,CAC5C,CACA,GAAM,CAAChB,EAAeC,EAAaC,EAAcG,EAAkBK,EAASF,CAAW,CAAC,EACtF,MAAMS,EAAQd,EAAcQ,EAAa,QAASxB,CAAW,EAC7D,OAAO1B,GAAcoC,EAAM,CACzB,GAAGC,EACH,SAAAf,EACA,UAAWC,EACX,MAAO,CACL,GAAGiC,EACH,GAAGrB,CACJ,EAED,aAAc,GACd,gBAAiBc,EACjB,sBAAuBN,EAEvB,yBAA0B,OAC1B,kBAAmB,MACvB,CAAG,CACH,CACA,MAAMc,GAAQvD,GAAW,CAACwD,EAAOC,IAAQ3D,GAAcqB,GAAuB,CAC5E,GAAGqC,EACH,aAAcC,CAChB,CAAC,CAAC,EACFtC,GAAsB,YAAc,QACpCoC,GAAM,YAAc,oBAEpB,SAASG,EAAOC,EAAmBC,EAAU,oBAAqB,CAChE,GAAI,CAACD,EACH,cAAQ,MAAMC,CAAO,EACf,MAAMA,CAAO,CAEvB,CAEA,MAAMC,GAAY,GAElB,SAASC,GAAoBC,EAAQC,EAAUC,EAAiBJ,GAAW,CACzEE,EAAS,WAAWA,EAAO,QAAQE,CAAc,CAAC,EAClDD,EAAW,WAAWA,EAAS,QAAQC,CAAc,CAAC,EACtD,MAAMC,EAAQH,EAASC,EACvB,OAAIE,IAAU,EACL,EAEAA,EAAQ,EAAI,EAAI,EAE3B,CAEA,SAASC,EAAkBJ,EAAQC,EAAUC,EAAgB,CAC3D,OAAOH,GAAoBC,EAAQC,EAAUC,CAAc,IAAM,CACnE,CAGA,SAASpB,GAAY,CACnB,iBAAkBuB,EAClB,WAAAC,EACA,KAAAhB,CACF,EAAG,CACD,MAAMiB,EAAmBF,EAAsBC,CAAU,EACzDX,EAAOY,GAAoB,IAAI,EAC/B,GAAI,CACF,cAAAhD,EAAgB,EAChB,YAAAC,EACA,QAAAI,EAAU,IACV,QAAAC,EAAU,CACd,EAAM0C,EACJ,GAAIR,GAAoBT,EAAMzB,CAAO,EAAI,EACvC,GAAIL,EAAa,CAEf,MAAMgD,GAAgBjD,EAAgBM,GAAW,EAC7CkC,GAAoBT,EAAMkB,CAAY,EAAI,EAC5ClB,EAAO/B,EAEP+B,EAAOzB,CAEf,MACMyB,EAAOzB,EAGX,OAAAyB,EAAO,KAAK,IAAI1B,EAAS0B,CAAI,EAC7BA,EAAO,WAAWA,EAAK,QAAQQ,EAAS,CAAC,EAClCR,CACT,CAGA,SAASmB,GAAoB,CAC3B,MAAAN,EACA,OAAQO,EACR,iBAAkBL,EAClB,aAAAM,EACA,QAAAC,CACF,EAAG,CACD,GAAIR,EAAkBD,EAAO,CAAC,EAC5B,OAAOO,EAET,MAAMG,EAAa,CAAC,GAAGH,CAAU,EAC3B,CAACI,EAAiBC,CAAgB,EAAIJ,EAC5ChB,EAAOmB,GAAmB,IAAI,EAC9BnB,EAAOoB,GAAoB,IAAI,EAC/B,IAAIC,EAAe,EAoBjB,GAAIJ,IAAY,WAAY,CAC1B,CAEE,MAAMK,EAAQd,EAAQ,EAAIY,EAAmBD,EACvCP,EAAmBF,EAAsBY,CAAK,EAKpD,GAJAtB,EAAOY,CAAgB,EAInBA,EAAiB,YAAa,CAChC,MAAMW,EAAWR,EAAWO,CAAK,EACjCtB,EAAOuB,GAAY,IAAI,EACvB,MAAMX,EAAmBF,EAAsBY,CAAK,EACpDtB,EAAOY,CAAgB,EACvB,KAAM,CACJ,cAAAhD,EAAgB,EAChB,QAAAM,EAAU,CACtB,EAAc0C,EACJ,GAAIH,EAAkBc,EAAU3D,CAAa,EAAG,CAC9C,MAAM4D,EAAatD,EAAUqD,EAGzBnB,GAAoBoB,EAAY,KAAK,IAAIhB,CAAK,CAAC,EAAI,IACrDA,EAAQA,EAAQ,EAAI,EAAIgB,EAAaA,EAGnD,CACA,CACA,CAEM,CAEE,MAAMF,EAAQd,EAAQ,EAAIW,EAAkBC,EACtCR,EAAmBF,EAAsBY,CAAK,EACpDtB,EAAOY,CAAgB,EACvB,KAAM,CACJ,YAAA/C,CACV,EAAY+C,EAIJ,GAAI/C,EAAa,CACf,MAAM0D,EAAWR,EAAWO,CAAK,EACjCtB,EAAOuB,GAAY,IAAI,EACvB,MAAMX,EAAmBF,EAAsBY,CAAK,EACpDtB,EAAOY,CAAgB,EACvB,KAAM,CACJ,cAAAhD,EAAgB,EAChB,QAAAM,EAAU,CACtB,EAAc0C,EACJ,GAAIH,EAAkBc,EAAUrD,CAAO,EAAG,CACxC,MAAMsD,EAAaD,EAAW3D,EAG1BwC,GAAoBoB,EAAY,KAAK,IAAIhB,CAAK,CAAC,EAAI,IACrDA,EAAQA,EAAQ,EAAI,EAAIgB,EAAaA,EAGnD,CACA,CACA,CACA,CAIE,CAOE,MAAMC,EAAYjB,EAAQ,EAAI,EAAI,GAClC,IAAIc,EAAQd,EAAQ,EAAIY,EAAmBD,EACvCO,EAAoB,EAGxB,OAAa,CACX,MAAMH,EAAWR,EAAWO,CAAK,EACjCtB,EAAOuB,GAAY,IAAI,EAMvB,MAAMf,EALcrB,GAAY,CAC9B,iBAAkBuB,EAClB,WAAYY,EACZ,KAAM,GACd,CAAO,EAC2BC,EAK5B,GAFAG,GAAqBlB,EACrBc,GAASG,EACLH,EAAQ,GAAKA,GAASZ,EAAsB,OAC9C,KAER,CAGI,MAAMiB,EAAc,KAAK,IAAI,KAAK,IAAInB,CAAK,EAAG,KAAK,IAAIkB,CAAiB,CAAC,EACzElB,EAAQA,EAAQ,EAAI,EAAImB,EAAcA,CAG1C,CAEE,CAIE,IAAIL,EADed,EAAQ,EAAIW,EAAkBC,EAEjD,KAAOE,GAAS,GAAKA,EAAQZ,EAAsB,QAAQ,CACzD,MAAMkB,EAAiB,KAAK,IAAIpB,CAAK,EAAI,KAAK,IAAIa,CAAY,EACxDE,EAAWR,EAAWO,CAAK,EACjCtB,EAAOuB,GAAY,IAAI,EACvB,MAAMM,EAAaN,EAAWK,EACxBE,EAAW3C,GAAY,CAC3B,iBAAkBuB,EAClB,WAAYY,EACZ,KAAMO,CACd,CAAO,EACD,GAAI,CAACpB,EAAkBc,EAAUO,CAAQ,IACvCT,GAAgBE,EAAWO,EAC3BZ,EAAWI,CAAK,EAAIQ,EAChBT,EAAa,YAAY,CAAC,EAAE,cAAc,KAAK,IAAIb,CAAK,EAAE,YAAY,CAAC,EAAG,OAAW,CACvF,QAAS,EACV,CAAA,GAAK,GACJ,MAGAA,EAAQ,EACVc,IAEAA,GAER,CACA,CAOE,GAAIb,EAAkBY,EAAc,CAAC,EAEnC,OAAON,EAET,CAEE,MAAMgB,EAAavB,EAAQ,EAAIY,EAAmBD,EAC5CI,EAAWR,EAAWgB,CAAU,EACtC/B,EAAOuB,GAAY,IAAI,EACvB,MAAMM,EAAaN,EAAWF,EACxBS,EAAW3C,GAAY,CAC3B,iBAAkBuB,EAClB,WAAYqB,EACZ,KAAMF,CACZ,CAAK,EAMD,GAHAX,EAAWa,CAAU,EAAID,EAGrB,CAACrB,EAAkBqB,EAAUD,CAAU,EAAG,CAC5C,IAAID,EAAiBC,EAAaC,EAE9BR,EADed,EAAQ,EAAIY,EAAmBD,EAElD,KAAOG,GAAS,GAAKA,EAAQZ,EAAsB,QAAQ,CACzD,MAAMa,EAAWL,EAAWI,CAAK,EACjCtB,EAAOuB,GAAY,IAAI,EACvB,MAAMM,EAAaN,EAAWK,EACxBE,EAAW3C,GAAY,CAC3B,iBAAkBuB,EAClB,WAAYY,EACZ,KAAMO,CAChB,CAAS,EAKD,GAJKpB,EAAkBc,EAAUO,CAAQ,IACvCF,GAAkBE,EAAWP,EAC7BL,EAAWI,CAAK,EAAIQ,GAElBrB,EAAkBmB,EAAgB,CAAC,EACrC,MAEEpB,EAAQ,EACVc,IAEAA,GAEV,CACA,CACA,CAKE,MAAMU,EAAYd,EAAW,OAAO,CAACe,EAAOtC,IAASA,EAAOsC,EAAO,CAAC,EAIpE,OAAKxB,EAAkBuB,EAAW,GAAG,EAG9Bd,EAFEH,CAGX,CAEA,SAASmB,GAAoB,CAC3B,OAAAC,EACA,YAAAC,EACA,aAAApB,CACF,EAAG,CACD,IAAIqB,EAAiB,EACjBC,EAAiB,IACjBC,EAAe,EACfC,EAAe,EACnB,MAAMC,EAAazB,EAAa,CAAC,EACjChB,EAAOyC,GAAc,IAAI,EAGzBL,EAAY,QAAQ,CAAC1C,EAAW4B,IAAU,CACxC,KAAM,CACJ,YAAA9B,CACN,EAAQE,EACE,CACJ,QAAAzB,EAAU,IACV,QAAAC,EAAU,CAChB,EAAQsB,EACA8B,IAAUmB,GACZJ,EAAiBnE,EACjBoE,EAAiBrE,IAEjBsE,GAAgBrE,EAChBsE,GAAgBvE,EAEtB,CAAG,EACD,MAAMyE,EAAW,KAAK,IAAIJ,EAAgB,IAAMC,CAAY,EACtDI,EAAW,KAAK,IAAIN,EAAgB,IAAMG,CAAY,EACtDI,EAAWT,EAAOM,CAAU,EAClC,MAAO,CACL,SAAAC,EACA,SAAAC,EACA,SAAAC,CACD,CACH,CAEA,SAASC,GAAgC9D,EAAS+D,EAAQ,SAAU,CAClE,OAAO,MAAM,KAAKA,EAAM,iBAAiB,sDAAsD/D,CAAO,IAAI,CAAC,CAC7G,CAEA,SAASgE,GAA4BhE,EAASiE,EAAIF,EAAQ,SAAU,CAElE,MAAMxB,EADUuB,GAAgC9D,EAAS+D,CAAK,EACxC,UAAUG,GAAUA,EAAO,aAAa,6BAA6B,IAAMD,CAAE,EACnG,OAAO1B,GAA6C,IACtD,CAEA,SAAS4B,GAAsBnE,EAASoE,EAAcC,EAAmB,CACvE,MAAM9B,EAAQyB,GAA4BhE,EAASoE,EAAcC,CAAiB,EAClF,OAAO9B,GAAS,KAAO,CAACA,EAAOA,EAAQ,CAAC,EAAI,CAAC,GAAI,EAAE,CACrD,CAEA,SAAS+B,GAAqBL,EAAIM,EAAc,SAAU,CACxD,IAAIC,EAEJ,GAAID,aAAuB,cAAgBA,GAAgB,OAA2CC,EAAWD,EAAY,WAAa,MAAQC,IAAa,OAAnE,OAAqFA,EAAS,eAAiBP,EACzM,OAAOM,EAIT,MAAME,EAAUF,EAAY,cAAc,2CAA2CN,CAAE,IAAI,EAC3F,OAAIQ,GAGG,IACT,CAEA,SAASC,GAAuBT,EAAIF,EAAQ,SAAU,CACpD,MAAMU,EAAUV,EAAM,cAAc,iCAAiCE,CAAE,IAAI,EAC3E,OAAIQ,GAGG,IACT,CAEA,SAASE,GAAwB3E,EAAS4E,EAAUvB,EAAaU,EAAQ,SAAU,CACjF,IAAIc,EAAuBC,EAAoBC,EAAiBC,EAChE,MAAMd,EAASQ,GAAuBE,EAAUb,CAAK,EAC/CkB,EAAUnB,GAAgC9D,EAAS+D,CAAK,EACxDxB,EAAQ2B,EAASe,EAAQ,QAAQf,CAAM,EAAI,GAC3CgB,GAAYL,GAAyBC,EAAqBzB,EAAYd,CAAK,KAAO,MAAQuC,IAAuB,OAAS,OAASA,EAAmB,MAAQ,MAAQD,IAA0B,OAASA,EAAwB,KACjOM,GAAWJ,GAAmBC,EAAe3B,EAAYd,EAAQ,CAAC,KAAO,MAAQyC,IAAiB,OAAS,OAASA,EAAa,MAAQ,MAAQD,IAAoB,OAASA,EAAkB,KACtM,MAAO,CAACG,EAAUC,CAAO,CAC3B,CAIA,SAASC,GAAoC,CAC3C,mBAAAC,EACA,eAAAC,EACA,QAAAtF,EACA,OAAAoD,EACA,eAAAmC,EACA,kBAAAlB,EACA,UAAAmB,CACF,EAAG,CACD1H,EAAO,CACL,gCAAiC,EACrC,CAAG,EACDK,GAA0B,IAAM,CAC9B,GAAI,CAACkG,EACH,OAEF,MAAMoB,EAAuB3B,GAAgC9D,EAASqE,CAAiB,EACvF,QAAS9B,EAAQ,EAAGA,EAAQgD,EAAe,OAAS,EAAGhD,IAAS,CAC9D,KAAM,CACJ,SAAAoB,EACA,SAAAC,EACA,SAAAC,CACD,EAAGV,GAAoB,CACtB,OAAAC,EACA,YAAamC,EACb,aAAc,CAAChD,EAAOA,EAAQ,CAAC,CACvC,CAAO,EACKmD,EAAsBD,EAAqBlD,CAAK,EACtD,GAAImD,GAAuB,KAAa,CACtC,MAAM/E,EAAY4E,EAAehD,CAAK,EACtCtB,EAAON,CAAS,EAChB+E,EAAoB,aAAa,gBAAiB/E,EAAU,EAAE,EAC9D+E,EAAoB,aAAa,gBAAiB,GAAK,KAAK,MAAM/B,CAAQ,CAAC,EAC3E+B,EAAoB,aAAa,gBAAiB,GAAK,KAAK,MAAM9B,CAAQ,CAAC,EAC3E8B,EAAoB,aAAa,gBAAiB7B,GAAY,KAAO,GAAK,KAAK,MAAMA,CAAQ,EAAI,EAAE,CAC3G,CACA,CACI,MAAO,IAAM,CACX4B,EAAqB,QAAQ,CAACC,EAAqBnD,IAAU,CAC3DmD,EAAoB,gBAAgB,eAAe,EACnDA,EAAoB,gBAAgB,eAAe,EACnDA,EAAoB,gBAAgB,eAAe,EACnDA,EAAoB,gBAAgB,eAAe,CAC3D,CAAO,CACF,CACF,EAAE,CAAC1F,EAASoD,EAAQmC,EAAgBlB,CAAiB,CAAC,EACvD3G,EAAU,IAAM,CACd,GAAI,CAAC2G,EACH,OAEF,MAAMsB,EAAcL,EAAe,QACnCrE,EAAO0E,CAAW,EAClB,KAAM,CACJ,eAAAJ,CACN,EAAQI,EACEC,EAAetB,GAAqBtE,EAASqE,CAAiB,EACpEpD,EAAO2E,GAAgB,KAAM,0BAA0B5F,CAAO,GAAG,EACjE,MAAMiF,EAAUnB,GAAgC9D,EAASqE,CAAiB,EAC1EpD,EAAOgE,CAAO,EACd,MAAMY,EAAmBZ,EAAQ,IAAIf,GAAU,CAC7C,MAAMU,EAAWV,EAAO,aAAa,6BAA6B,EAClEjD,EAAO2D,CAAQ,EACf,KAAM,CAACM,EAAUC,CAAO,EAAIR,GAAwB3E,EAAS4E,EAAUW,EAAgBlB,CAAiB,EACxG,GAAIa,GAAY,MAAQC,GAAW,KACjC,MAAO,IAAM,CAAE,EAEjB,MAAMW,EAAYC,GAAS,CACzB,GAAI,CAAAA,EAAM,iBAGV,OAAQA,EAAM,IAAG,CACf,IAAK,QACH,CACEA,EAAM,eAAgB,EACtB,MAAMxD,EAAQgD,EAAe,UAAU5E,GAAaA,EAAU,KAAOuE,CAAQ,EAC7E,GAAI3C,GAAS,EAAG,CACd,MAAM5B,EAAY4E,EAAehD,CAAK,EACtCtB,EAAON,CAAS,EAChB,MAAMC,EAAOwC,EAAOb,CAAK,EACnB,CACJ,cAAA1D,EAAgB,EAChB,YAAAC,EACA,QAAAK,EAAU,CACX,EAAGwB,EAAU,YACd,GAAIC,GAAQ,MAAQ9B,EAAa,CAC/B,MAAMqD,EAAaJ,GAAoB,CACrC,MAAOL,EAAkBd,EAAM/B,CAAa,EAAIM,EAAUN,EAAgBA,EAAgB+B,EAC1F,OAAAwC,EACA,iBAAkBmC,EAAe,IAAI5E,GAAaA,EAAU,WAAW,EACvE,aAAcwD,GAAsBnE,EAAS4E,EAAUP,CAAiB,EACxE,QAAS,UAC7B,CAAmB,EACGjB,IAAWjB,GACbqD,EAAUrD,CAAU,CAExC,CACA,CACc,KACd,CACA,CACO,EACD,OAAA+B,EAAO,iBAAiB,UAAW4B,CAAS,EACrC,IAAM,CACX5B,EAAO,oBAAoB,UAAW4B,CAAS,CAChD,CACP,CAAK,EACD,MAAO,IAAM,CACXD,EAAiB,QAAQG,GAAmBA,GAAiB,CAC9D,CACL,EAAK,CAAC3B,EAAmBgB,EAAoBC,EAAgBtF,EAASoD,EAAQmC,EAAgBC,CAAS,CAAC,CACxG,CAEA,SAASS,GAASC,EAAQC,EAAQ,CAChC,GAAID,EAAO,SAAWC,EAAO,OAC3B,MAAO,GAET,QAAS5D,EAAQ,EAAGA,EAAQ2D,EAAO,OAAQ3D,IACzC,GAAI2D,EAAO3D,CAAK,IAAM4D,EAAO5D,CAAK,EAChC,MAAO,GAGX,MAAO,EACT,CAEA,SAAS6D,GAAUL,EAAO,CACxB,OAAOA,EAAM,OAAS,SACxB,CACA,SAASM,GAAaN,EAAO,CAC3B,OAAOA,EAAM,KAAK,WAAW,OAAO,CACtC,CACA,SAASO,GAAaP,EAAO,CAC3B,OAAOA,EAAM,KAAK,WAAW,OAAO,CACtC,CAEA,SAASQ,GAA6BC,EAAWT,EAAO,CACtD,MAAMU,EAAeD,IAAc,aACnC,GAAIH,GAAaN,CAAK,EACpB,OAAOU,EAAeV,EAAM,QAAUA,EAAM,QACvC,GAAIO,GAAaP,CAAK,EAAG,CAC9B,MAAMW,EAAaX,EAAM,QAAQ,CAAC,EAClC,OAAA9E,EAAOyF,CAAU,EACVD,EAAeC,EAAW,QAAUA,EAAW,OAC1D,KACI,OAAM,MAAM,2BAA2BX,EAAM,IAAI,GAAG,CAExD,CAEA,SAASY,GAA8BZ,EAAO3B,EAAcoC,EAAWI,EAAkBvC,EAAmB,CAC1G,MAAMoC,EAAeD,IAAc,aAC7BK,EAAgBnC,GAAuBN,EAAcC,CAAiB,EAC5EpD,EAAO4F,CAAa,EACpB,MAAM7G,EAAU6G,EAAc,aAAa,qBAAqB,EAChE5F,EAAOjB,CAAO,EACd,GAAI,CACF,sBAAA8G,CACJ,EAAMF,EACJ,MAAMG,EAAiBR,GAA6BC,EAAWT,CAAK,EAC9DH,EAAetB,GAAqBtE,EAASqE,CAAiB,EACpEpD,EAAO2E,CAAY,EACnB,MAAMoB,EAAYpB,EAAa,sBAAuB,EAChDqB,EAAoBR,EAAeO,EAAU,MAAQA,EAAU,OAGrE,OAFqBD,EAAiBD,GACEG,EAAoB,GAE9D,CAGA,SAASC,GAAyBnB,EAAO3B,EAAcoC,EAAWI,EAAkBO,EAAkB9C,EAAmB,CACvH,GAAI+B,GAAUL,CAAK,EAAG,CACpB,MAAMU,EAAeD,IAAc,aACnC,IAAI/E,EAAQ,EACRsE,EAAM,SACRtE,EAAQ,IACC0F,GAAoB,KAC7B1F,EAAQ0F,EAER1F,EAAQ,GAEV,IAAI2F,EAAW,EACf,OAAQrB,EAAM,IAAG,CACf,IAAK,YACHqB,EAAWX,EAAe,EAAIhF,EAC9B,MACF,IAAK,YACH2F,EAAWX,EAAe,CAAChF,EAAQ,EACnC,MACF,IAAK,aACH2F,EAAWX,EAAehF,EAAQ,EAClC,MACF,IAAK,UACH2F,EAAWX,EAAe,EAAI,CAAChF,EAC/B,MACF,IAAK,MACH2F,EAAW,IACX,MACF,IAAK,OACHA,EAAW,KACX,KACR,CACI,OAAOA,CACX,KACI,QAAIR,GAAoB,KACf,EAEFD,GAA8BZ,EAAO3B,EAAcoC,EAAWI,EAAkBvC,CAAiB,CAE5G,CAEA,SAASgD,GAA6B,CACpC,eAAA9B,CACF,EAAG,CACD,MAAMnC,EAAS,MAAMmC,EAAe,MAAM,EACpC5D,EAAwB4D,EAAe,IAAI5E,GAAaA,EAAU,WAAW,EACnF,IAAI2G,EAAqB,EACrBC,EAAgB,IAGpB,QAAShF,EAAQ,EAAGA,EAAQgD,EAAe,OAAQhD,IAAS,CAC1D,MAAMV,EAAmBF,EAAsBY,CAAK,EACpDtB,EAAOY,CAAgB,EACvB,KAAM,CACJ,YAAA9C,CACN,EAAQ8C,EACA9C,GAAe,OACjBuI,IACAlE,EAAOb,CAAK,EAAIxD,EAChBwI,GAAiBxI,EAEvB,CAGE,QAASwD,EAAQ,EAAGA,EAAQgD,EAAe,OAAQhD,IAAS,CAC1D,MAAMV,EAAmBF,EAAsBY,CAAK,EACpDtB,EAAOY,CAAgB,EACvB,KAAM,CACJ,YAAA9C,CACN,EAAQ8C,EACJ,GAAI9C,GAAe,KACjB,SAEF,MAAMyI,EAAqBjC,EAAe,OAAS+B,EAC7C1G,EAAO2G,EAAgBC,EAC7BF,IACAlE,EAAOb,CAAK,EAAI3B,EAChB2G,GAAiB3G,CACrB,CACE,OAAOwC,CACT,CAGA,SAASqE,GAAmBpE,EAAaD,EAAQsE,EAA8B,CAC7EtE,EAAO,QAAQ,CAACxC,EAAM2B,IAAU,CAC9B,MAAM5B,EAAY0C,EAAYd,CAAK,EACnCtB,EAAON,CAAS,EAChB,KAAM,CACJ,UAAAH,EACA,YAAAC,EACA,GAAIH,CACV,EAAQK,EACE,CACJ,cAAA9B,EAAgB,EAChB,YAAAC,CACN,EAAQ2B,EACEkH,EAAmBD,EAA6BpH,CAAO,EAC7D,GAAIqH,GAAoB,MAAQ/G,IAAS+G,EAAkB,CACzDD,EAA6BpH,CAAO,EAAIM,EACxC,KAAM,CACJ,WAAAxB,EACA,SAAAC,EACA,SAAAC,CACR,EAAUkB,EACAlB,GACFA,EAASsB,EAAM+G,CAAgB,EAE7B7I,IAAgBM,GAAcC,KAC5BA,IAAasI,GAAoB,MAAQA,IAAqB9I,IAAkB+B,IAAS/B,GAC3FQ,EAAU,EAERD,IAAeuI,GAAoB,MAAQA,IAAqB9I,IAAkB+B,IAAS/B,GAC7FO,EAAY,EAGtB,CACA,CAAG,CACH,CAEA,SAASwI,GAAeC,EAAGC,EAAG,CAC5B,GAAID,EAAE,SAAWC,EAAE,OACjB,MAAO,GAEP,QAASvF,EAAQ,EAAGA,EAAQsF,EAAE,OAAQtF,IACpC,GAAIsF,EAAEtF,CAAK,GAAKuF,EAAEvF,CAAK,EACrB,MAAO,GAIb,MAAO,EACT,CAKA,SAASwF,GAAyB,CAChC,YAAAhJ,EACA,UAAAiJ,EACA,OAAA5E,EACA,UAAAzC,EACA,WAAAiB,EACA,UAAAqG,EAAY,CACd,EAAG,CACD,MAAMrH,EAAOwC,EAAOxB,CAAU,EAC9B,IAAIsG,EACJ,OAAItH,GAAQ,KAGVsH,EAAWnJ,GAA+D,IACjE4B,EAAU,SAAW,EAE9BuH,EAAW,IAEXA,EAAWtH,EAAK,YAAYqH,CAAS,EAEhC,CACL,UAAW,EACX,SAAAC,EACA,WAAY,EAEZ,SAAU,SAGV,cAAeF,IAAc,KAAO,OAAS,MAC9C,CACH,CAEA,IAAIG,GAAe,KACf1D,EAAU,KACd,SAAS2D,GAAeC,EAAO,CAC7B,OAAQA,EAAK,CACX,IAAK,aACH,MAAO,YACT,IAAK,iBACH,MAAO,WACT,IAAK,iBACH,MAAO,WACT,IAAK,WACH,MAAO,YACT,IAAK,eACH,MAAO,WACT,IAAK,eACH,MAAO,UACb,CACA,CACA,SAASC,IAAyB,CAC5B7D,IAAY,OACd,SAAS,KAAK,YAAYA,CAAO,EACjC0D,GAAe,KACf1D,EAAU,KAEd,CACA,SAAS8D,GAAqBF,EAAO,CACnC,GAAIF,KAAiBE,EACnB,OAEFF,GAAeE,EACf,MAAMxH,EAAQuH,GAAeC,CAAK,EAC9B5D,IAAY,OACdA,EAAU,SAAS,cAAc,OAAO,EACxC,SAAS,KAAK,YAAYA,CAAO,GAEnCA,EAAQ,UAAY,aAAa5D,CAAK,cACxC,CAEA,SAAS2H,GAASC,EAAUC,EAAa,GAAI,CAC3C,IAAIC,EAAY,KAShB,MARe,IAAIC,IAAS,CACtBD,IAAc,MAChB,aAAaA,CAAS,EAExBA,EAAY,WAAW,IAAM,CAC3BF,EAAS,GAAGG,CAAI,CACjB,EAAEF,CAAU,CACd,CAEH,CAMA,SAASG,GAAyBC,EAAe,CAC/C,GAAI,CACF,GAAI,OAAO,aAAiB,IAE1BA,EAAc,QAAUC,GACf,aAAa,QAAQA,CAAI,EAElCD,EAAc,QAAU,CAACC,EAAMC,IAAU,CACvC,aAAa,QAAQD,EAAMC,CAAK,CACjC,MAED,OAAM,IAAI,MAAM,gDAAgD,CAEnE,OAAQC,EAAO,CACd,QAAQ,MAAMA,CAAK,EACnBH,EAAc,QAAU,IAAM,KAC9BA,EAAc,QAAU,IAAM,CAAE,CACpC,CACA,CAEA,SAASI,GAAiBC,EAAY,CACpC,MAAO,0BAA0BA,CAAU,EAC7C,CAMA,SAASC,GAAYC,EAAQ,CAC3B,OAAOA,EAAO,IAAIC,GAAS,CACzB,KAAM,CACJ,YAAA7I,EACA,GAAAwD,EACA,cAAAsF,EACA,MAAAhK,CACN,EAAQ+J,EACJ,OAAIC,EACKtF,EAEA1E,EAAQ,GAAGA,CAAK,IAAI,KAAK,UAAUkB,CAAW,CAAC,GAAK,KAAK,UAAUA,CAAW,CAExF,CAAA,EAAE,KAAK,CAACoH,EAAGC,IAAMD,EAAE,cAAcC,CAAC,CAAC,EAAE,KAAK,GAAG,CAChD,CACA,SAAS0B,GAA8BL,EAAYM,EAAS,CAC1D,GAAI,CACF,MAAMC,EAAgBR,GAAiBC,CAAU,EAC3CQ,EAAaF,EAAQ,QAAQC,CAAa,EAChD,GAAIC,EAAY,CACd,MAAMC,EAAS,KAAK,MAAMD,CAAU,EACpC,GAAI,OAAOC,GAAW,UAAYA,GAAU,KAC1C,OAAOA,CAEf,CACG,MAAe,CAAA,CAChB,OAAO,IACT,CACA,SAASC,GAAoBV,EAAYE,EAAQI,EAAS,CACxD,IAAIK,EAAuBC,EAC3B,MAAM1B,GAASyB,EAAwBN,GAA8BL,EAAYM,CAAO,KAAO,MAAQK,IAA0B,OAASA,EAAwB,CAAE,EAC9JE,EAAWZ,GAAYC,CAAM,EACnC,OAAQU,EAAkB1B,EAAM2B,CAAQ,KAAO,MAAQD,IAAoB,OAASA,EAAkB,IACxG,CACA,SAASE,GAAoBd,EAAYE,EAAQa,EAA0BC,EAAOV,EAAS,CACzF,IAAIW,EACJ,MAAMV,EAAgBR,GAAiBC,CAAU,EAC3Ca,EAAWZ,GAAYC,CAAM,EAC7BhB,GAAS+B,EAAyBZ,GAA8BL,EAAYM,CAAO,KAAO,MAAQW,IAA2B,OAASA,EAAyB,CAAE,EACvK/B,EAAM2B,CAAQ,EAAI,CAChB,cAAe,OAAO,YAAYE,EAAyB,QAAO,CAAE,EACpE,OAAQC,CACT,EACD,GAAI,CACFV,EAAQ,QAAQC,EAAe,KAAK,UAAUrB,CAAK,CAAC,CACrD,OAAQY,EAAO,CACd,QAAQ,MAAMA,CAAK,CACvB,CACA,CAGA,SAASoB,GAAyB,CAChC,OAAQrI,EACR,iBAAAH,CACF,EAAG,CACD,MAAMM,EAAa,CAAC,GAAGH,CAAU,EAC3BsI,EAAsBnI,EAAW,OAAO,CAACoI,EAAaC,IAAYD,EAAcC,EAAS,CAAC,EAGhG,GAAIrI,EAAW,SAAWN,EAAiB,OACzC,MAAM,MAAM,WAAWA,EAAiB,MAAM,kBAAkBM,EAAW,IAAIvB,GAAQ,GAAGA,CAAI,GAAG,EAAE,KAAK,IAAI,CAAC,EAAE,EAC1G,GAAI,CAACc,EAAkB4I,EAAqB,GAAG,EACpD,QAAS/H,EAAQ,EAAGA,EAAQV,EAAiB,OAAQU,IAAS,CAC5D,MAAMO,EAAaX,EAAWI,CAAK,EACnCtB,EAAO6B,GAAc,IAAI,EACzB,MAAMC,EAAW,IAAMuH,EAAsBxH,EAC7CX,EAAWI,CAAK,EAAIQ,CAC1B,CAEE,IAAIwE,EAAgB,EAGpB,QAAShF,EAAQ,EAAGA,EAAQV,EAAiB,OAAQU,IAAS,CAC5D,MAAMO,EAAaX,EAAWI,CAAK,EACnCtB,EAAO6B,GAAc,IAAI,EACzB,MAAMC,EAAW3C,GAAY,CAC3B,iBAAAyB,EACA,WAAYU,EACZ,KAAMO,CACZ,CAAK,EACGA,GAAcC,IAChBwE,GAAiBzE,EAAaC,EAC9BZ,EAAWI,CAAK,EAAIQ,EAE1B,CAIE,GAAI,CAACrB,EAAkB6F,EAAe,CAAC,EACrC,QAAShF,EAAQ,EAAGA,EAAQV,EAAiB,OAAQU,IAAS,CAC5D,MAAMC,EAAWL,EAAWI,CAAK,EACjCtB,EAAOuB,GAAY,IAAI,EACvB,MAAMM,EAAaN,EAAW+E,EACxBxE,EAAW3C,GAAY,CAC3B,iBAAAyB,EACA,WAAYU,EACZ,KAAMO,CACd,CAAO,EACD,GAAIN,IAAaO,IACfwE,GAAiBxE,EAAWP,EAC5BL,EAAWI,CAAK,EAAIQ,EAGhBrB,EAAkB6F,EAAe,CAAC,GACpC,KAGV,CAEE,OAAOpF,CACT,CAEA,MAAMsI,GAAkC,IAClCC,GAAiB,CACrB,QAAS3B,IACPF,GAAyB6B,EAAc,EAChCA,GAAe,QAAQ3B,CAAI,GAEpC,QAAS,CAACA,EAAMC,IAAU,CACxBH,GAAyB6B,EAAc,EACvCA,GAAe,QAAQ3B,EAAMC,CAAK,CACtC,CACA,EACM2B,GAAc,CAAE,EACtB,SAASC,GAA2B,CAClC,WAAAzB,EAAa,KACb,SAAAxK,EACA,UAAWC,EAAqB,GAChC,UAAA4H,EACA,aAAAxH,EACA,GAAIC,EAAc,KAClB,SAAA4L,EAAW,KACX,iBAAA1D,EAAmB,KACnB,QAAAsC,EAAUiB,GACV,MAAOlL,EACP,QAASC,EAAO,MAChB,GAAGC,CACL,EAAG,CACD,MAAMM,EAAU1B,GAAYW,CAAW,EACjC6L,EAAuBhN,EAAO,IAAI,EAClC,CAACkK,EAAW+C,CAAY,EAAIhN,GAAS,IAAI,EACzC,CAACqF,EAAQoC,CAAS,EAAIzH,GAAS,CAAA,CAAE,EACjCiN,EAAkClN,EAAO,EAAE,EAC3CmN,EAA6BnN,EAAO,IAAI,GAAK,EAC7CoN,EAAepN,EAAO,CAAC,EACvBuH,EAAqBvH,EAAO,CAChC,WAAAqL,EACA,UAAA3C,EACA,UAAAwB,EACA,GAAIhI,EACJ,iBAAAmH,EACA,SAAA0D,EACA,QAAApB,CACJ,CAAG,EACKnE,EAAiBxH,EAAO,CAC5B,OAAAsF,EACA,eAAgB,CAAE,EAClB,sBAAuB,EAC3B,CAAG,EACDtF,EAAO,CACL,wBAAyB,GACzB,8BAA+B,GAC/B,aAAc,CAAA,CAClB,CAAG,EACDH,GAAoBqB,EAAc,KAAO,CACvC,MAAO,IAAMqG,EAAmB,QAAQ,GACxC,UAAW,IAAM,CACf,KAAM,CACJ,OAAAjC,CACD,EAAGkC,EAAe,QACnB,OAAOlC,CACR,EACD,UAAW+H,GAAgB,CACzB,KAAM,CACJ,SAAAN,CACD,EAAGxF,EAAmB,QACjB,CACJ,OAAQrD,EACR,eAAAuD,CACD,EAAGD,EAAe,QACb8F,EAAaf,GAAyB,CAC1C,OAAQc,EACR,iBAAkB5F,EAAe,IAAI5E,GAAaA,EAAU,WAAW,CAC/E,CAAO,EACIsF,GAASjE,EAAYoJ,CAAU,IAClC5F,EAAU4F,CAAU,EACpB9F,EAAe,QAAQ,OAAS8F,EAC5BP,GACFA,EAASO,CAAU,EAErB3D,GAAmBlC,EAAgB6F,EAAYJ,EAAgC,OAAO,EAE9F,CACG,GAAG,CAAA,CAAE,EACN7M,GAA0B,IAAM,CAC9BkH,EAAmB,QAAQ,WAAa8D,EACxC9D,EAAmB,QAAQ,UAAYmB,EACvCnB,EAAmB,QAAQ,UAAY2C,EACvC3C,EAAmB,QAAQ,GAAKrF,EAChCqF,EAAmB,QAAQ,SAAWwF,EACtCxF,EAAmB,QAAQ,QAAUoE,CACzC,CAAG,EACDrE,GAAoC,CAClC,mBAAAC,EACA,eAAAC,EACA,QAAAtF,EACA,OAAAoD,EACA,eAAgBkC,EAAe,QAAQ,eACvC,UAAAE,EACA,kBAAmBsF,EAAqB,OAC5C,CAAG,EACDpN,EAAU,IAAM,CACd,KAAM,CACJ,eAAA6H,CACD,EAAGD,EAAe,QAGnB,GAAI6D,EAAY,CACd,GAAI/F,EAAO,SAAW,GAAKA,EAAO,SAAWmC,EAAe,OAC1D,OAEF,IAAI8F,EAAgBV,GAAYxB,CAAU,EAGtCkC,GAAiB,OACnBA,EAAgB7C,GAASyB,GAAqBQ,EAA+B,EAC7EE,GAAYxB,CAAU,EAAIkC,GAK5B,MAAMC,EAAuB,CAAC,GAAG/F,CAAc,EACzCgG,EAAiC,IAAI,IAAIN,EAA2B,OAAO,EACjFI,EAAclC,EAAYmC,EAAsBC,EAAgCnI,EAAQqG,CAAO,CACrG,CACG,EAAE,CAACN,EAAY/F,EAAQqG,CAAO,CAAC,EAGhC/L,EAAU,IAAM,CAClB,CAAG,EAGD,MAAMkC,EAAgBpC,EAAYmD,GAAa,CAC7C,KAAM,CACJ,SAAAkK,CACD,EAAGxF,EAAmB,QACjB,CACJ,OAAQrD,EACR,eAAAuD,CACD,EAAGD,EAAe,QACnB,GAAI3E,EAAU,YAAY,YAAa,CACrC,MAAMgB,EAAwB4D,EAAe,IAAI5E,GAAaA,EAAU,WAAW,EAC7E,CACJ,cAAA9B,EAAgB,EAChB,UAAA2M,EACA,aAAAvJ,CACD,EAAGwJ,EAAgBlG,EAAgB5E,EAAWqB,CAAU,EAEzD,GADAf,EAAOuK,GAAa,IAAI,EACpBA,IAAc3M,EAAe,CAG/BoM,EAA2B,QAAQ,IAAItK,EAAU,GAAI6K,CAAS,EAE9D,MAAM/J,EADciK,GAAmBnG,EAAgB5E,CAAS,IAAM4E,EAAe,OAAS,EAClEiG,EAAY3M,EAAgBA,EAAgB2M,EAClErJ,EAAaJ,GAAoB,CACrC,MAAAN,EACA,OAAQO,EACR,iBAAkBL,EAClB,aAAAM,EACA,QAAS,gBACnB,CAAS,EACI2F,GAAe5F,EAAYG,CAAU,IACxCqD,EAAUrD,CAAU,EACpBmD,EAAe,QAAQ,OAASnD,EAC5B0I,GACFA,EAAS1I,CAAU,EAErBsF,GAAmBlC,EAAgBpD,EAAY6I,EAAgC,OAAO,EAEhG,CACA,CACG,EAAE,EAAE,EAGCnL,EAAcrC,EAAYmD,GAAa,CAC3C,KAAM,CACJ,SAAAkK,CACD,EAAGxF,EAAmB,QACjB,CACJ,OAAQrD,EACR,eAAAuD,CACD,EAAGD,EAAe,QACnB,GAAI3E,EAAU,YAAY,YAAa,CACrC,MAAMgB,EAAwB4D,EAAe,IAAI5E,GAAaA,EAAU,WAAW,EAC7E,CACJ,cAAA9B,EAAgB,EAChB,UAAA2M,EACA,QAAArM,EAAU,EACV,aAAA8C,CACD,EAAGwJ,EAAgBlG,EAAgB5E,EAAWqB,CAAU,EACzD,GAAIwJ,IAAc3M,EAAe,CAE/B,MAAM8M,EAAgBV,EAA2B,QAAQ,IAAItK,EAAU,EAAE,EACnEiL,EAAWD,GAAiB,MAAQA,GAAiBxM,EAAUwM,EAAgBxM,EAE/EsC,GADciK,GAAmBnG,EAAgB5E,CAAS,IAAM4E,EAAe,OAAS,EAClEiG,EAAYI,EAAWA,EAAWJ,EACxDrJ,EAAaJ,GAAoB,CACrC,MAAAN,GACA,OAAQO,EACR,iBAAkBL,EAClB,aAAAM,EACA,QAAS,gBACnB,CAAS,EACI2F,GAAe5F,EAAYG,CAAU,IACxCqD,EAAUrD,CAAU,EACpBmD,EAAe,QAAQ,OAASnD,EAC5B0I,GACFA,EAAS1I,CAAU,EAErBsF,GAAmBlC,EAAgBpD,EAAY6I,EAAgC,OAAO,EAEhG,CACA,CACG,EAAE,EAAE,EAGClL,EAAetC,EAAYmD,GAAa,CAC5C,KAAM,CACJ,OAAAyC,EACA,eAAAmC,CACD,EAAGD,EAAe,QACb,CACJ,UAAAkG,CACD,EAAGC,EAAgBlG,EAAgB5E,EAAWyC,CAAM,EACrD,OAAAnC,EAAOuK,GAAa,IAAI,EACjBA,CACR,EAAE,EAAE,EAGCzL,EAAgBvC,EAAY,CAACmD,EAAW5B,IAAgB,CAC5D,KAAM,CACJ,eAAAwG,CACD,EAAGD,EAAe,QACb1D,EAAa8J,GAAmBnG,EAAgB5E,CAAS,EAC/D,OAAOoH,GAAyB,CAC9B,YAAAhJ,EACA,UAAAiJ,EACA,OAAA5E,EACA,UAAWmC,EACX,WAAA3D,CACN,CAAK,CACL,EAAK,CAACoG,EAAW5E,CAAM,CAAC,EAGhBnD,EAAmBzC,EAAYmD,GAAa,CAChD,KAAM,CACJ,OAAAyC,EACA,eAAAmC,CACD,EAAGD,EAAe,QACb,CACJ,cAAAzG,EAAgB,EAChB,YAAAC,EACA,UAAA0M,CACD,EAAGC,EAAgBlG,EAAgB5E,EAAWyC,CAAM,EACrD,OAAOtE,IAAgB,IAAQ0M,IAAc3M,CAC9C,EAAE,EAAE,EAGCgN,EAAkBrO,EAAYmD,GAAa,CAC/C,KAAM,CACJ,OAAAyC,EACA,eAAAmC,CACD,EAAGD,EAAe,QACb,CACJ,cAAAzG,EAAgB,EAChB,YAAAC,EACA,UAAA0M,CACD,EAAGC,EAAgBlG,EAAgB5E,EAAWyC,CAAM,EACrD,OAAAnC,EAAOuK,GAAa,IAAI,EACjB,CAAC1M,GAAe0M,EAAY3M,CACpC,EAAE,EAAE,EACCsB,EAAgB3C,EAAYmD,GAAa,CAC7C,KAAM,CACJ,eAAA4E,CACD,EAAGD,EAAe,QACnBC,EAAe,KAAK5E,CAAS,EAC7B4E,EAAe,KAAK,CAACuG,EAAQC,IAAW,CACtC,MAAMC,EAASF,EAAO,MAChBG,EAASF,EAAO,MACtB,OAAIC,GAAU,MAAQC,GAAU,KACvB,EACED,GAAU,KACZ,GACEC,GAAU,KACZ,EAEAD,EAASC,CAExB,CAAK,EACD3G,EAAe,QAAQ,sBAAwB,EAChD,EAAE,EAAE,EAILnH,GAA0B,IAAM,CAC9B,GAAImH,EAAe,QAAQ,sBAAuB,CAChDA,EAAe,QAAQ,sBAAwB,GAC/C,KAAM,CACJ,WAAA6D,EACA,SAAA0B,EACA,QAAApB,CACD,EAAGpE,EAAmB,QACjB,CACJ,OAAQrD,EACR,eAAAuD,CACD,EAAGD,EAAe,QAInB,IAAI6F,EAAe,KACnB,GAAIhC,EAAY,CACd,MAAMd,EAAQwB,GAAoBV,EAAY5D,EAAgBkE,CAAO,EACjEpB,IACF4C,EAA2B,QAAU,IAAI,IAAI,OAAO,QAAQ5C,EAAM,aAAa,CAAC,EAChF8C,EAAe9C,EAAM,OAE/B,CACU8C,GAAgB,OAClBA,EAAe9D,GAA6B,CAC1C,eAAA9B,CACV,CAAS,GAKH,MAAMpD,EAAakI,GAAyB,CAC1C,OAAQc,EACR,iBAAkB5F,EAAe,IAAI5E,GAAaA,EAAU,WAAW,CAC/E,CAAO,EACIsF,GAASjE,EAAYG,CAAU,IAClCqD,EAAUrD,CAAU,EACpBmD,EAAe,QAAQ,OAASnD,EAC5B0I,GACFA,EAAS1I,CAAU,EAErBsF,GAAmBlC,EAAgBpD,EAAY6I,EAAgC,OAAO,EAE9F,CACA,CAAG,EACD,MAAMkB,EAAuB1O,EAAY4G,GAChC,SAAuB2B,EAAO,CACnCA,EAAM,eAAgB,EACtB,MAAM1B,EAAoByG,EAAqB,QAC/C,GAAI,CAACzG,EACH,MAAO,IAAM,KAEf,KAAM,CACJ,UAAAmC,EACA,UAAAwB,EACA,GAAIhI,EACJ,iBAAAmH,EACA,SAAA0D,CACD,EAAGxF,EAAmB,QACjB,CACJ,OAAQrD,EACR,eAAAuD,CACD,EAAGD,EAAe,QACb,CACJ,cAAA6G,CACD,EAAGnE,GAAyD,CAAE,EACzD/F,GAAekC,GAAsBnE,EAASoE,EAAcC,CAAiB,EACnF,IAAI5C,EAAQyF,GAAyBnB,EAAO3B,EAAcoC,EAAWwB,EAAWb,EAAkB9C,CAAiB,EACnH,GAAI5C,IAAU,EACZ,OAIF,MAAMgF,GAAeD,IAAc,aAC/B,SAAS,MAAQ,OAASC,KAC5BhF,EAAQ,CAACA,GAEX,MAAMI,GAAmB0D,EAAe,IAAI5E,IAAaA,GAAU,WAAW,EACxEwB,GAAaJ,GAAoB,CACrC,MAAAN,EACA,OAAQ0K,GAAqEnK,EAC7E,iBAAAH,GACA,aAAAI,GACA,QAASmE,GAAUL,CAAK,EAAI,WAAa,gBACjD,CAAO,EACKqG,GAAgB,CAACxE,GAAe5F,EAAYG,EAAU,GAIxDkE,GAAaN,CAAK,GAAKO,GAAaP,CAAK,IAIvCmF,EAAa,SAAWzJ,IAC1ByJ,EAAa,QAAUzJ,EAarB8G,GAZG6D,GAYkB3F,GAAe,aAAe,WAP/CA,GACmBhF,EAAQ,EAAI,iBAAmB,iBAE/BA,EAAQ,EAAI,eAAiB,cAIS,GAI/D2K,KACF5G,EAAUrD,EAAU,EACpBmD,EAAe,QAAQ,OAASnD,GAC5B0I,GACFA,EAAS1I,EAAU,EAErBsF,GAAmBlC,EAAgBpD,GAAY6I,EAAgC,OAAO,EAEzF,EACA,EAAE,EAGC5K,EAAc5C,EAAY,CAACmD,EAAW0L,IAAoB,CAC9D,KAAM,CACJ,SAAAxB,CACD,EAAGxF,EAAmB,QACjB,CACJ,OAAQrD,EACR,eAAAuD,CACD,EAAGD,EAAe,QACb3D,EAAwB4D,EAAe,IAAI5E,GAAaA,EAAU,WAAW,EAC7E,CACJ,UAAA6K,EACA,aAAAvJ,CACD,EAAGwJ,EAAgBlG,EAAgB5E,EAAWqB,CAAU,EACzDf,EAAOuK,GAAa,IAAI,EAExB,MAAM/J,EADciK,GAAmBnG,EAAgB5E,CAAS,IAAM4E,EAAe,OAAS,EAClEiG,EAAYa,EAAkBA,EAAkBb,EACtErJ,EAAaJ,GAAoB,CACrC,MAAAN,EACA,OAAQO,EACR,iBAAkBL,EAClB,aAAAM,EACA,QAAS,gBACf,CAAK,EACI2F,GAAe5F,EAAYG,CAAU,IACxCqD,EAAUrD,CAAU,EACpBmD,EAAe,QAAQ,OAASnD,EAC5B0I,GACFA,EAAS1I,CAAU,EAErBsF,GAAmBlC,EAAgBpD,EAAY6I,EAAgC,OAAO,EAEzF,EAAE,EAAE,EACC9K,EAA6B1C,EAAY,CAACmD,EAAWD,IAAoB,CAC7E,KAAM,CACJ,OAAA0C,EACA,eAAAmC,CACD,EAAGD,EAAe,QACb,CACJ,cAAegH,EAAoB,EACnC,YAAaC,CACnB,EAAQ7L,EACE,CACJ,cAAe8L,EAAoB,EACnC,YAAaC,EACb,QAASC,EAAc,IACvB,QAASC,EAAc,CACxB,EAAGhM,EAAU,YACR,CACJ,UAAWgL,CACZ,EAAGF,EAAgBlG,EAAgB5E,EAAWyC,CAAM,EACrDnC,EAAO0K,GAAiB,IAAI,EACxBY,GAAmBE,GAAmBd,IAAkBW,EACtDA,IAAsBE,GACxBpM,EAAYO,EAAW6L,CAAiB,EAEjCb,EAAgBgB,EACzBvM,EAAYO,EAAWgM,CAAW,EACzBhB,EAAgBe,GACzBtM,EAAYO,EAAW+L,CAAW,CAExC,EAAK,CAACtM,CAAW,CAAC,EACVwM,GAAgBpP,EAAY,CAAC4G,EAAc2B,IAAU,CACzD,KAAM,CACJ,UAAAS,CACD,EAAGnB,EAAmB,QACjB,CACJ,OAAAjC,CACD,EAAGkC,EAAe,QACnB,GAAI,CAACwF,EAAqB,QACxB,OAEF,MAAMjE,EAAgBnC,GAAuBN,EAAc0G,EAAqB,OAAO,EACvF7J,EAAO4F,CAAa,EACpB,MAAMC,EAAwBP,GAA6BC,EAAWT,CAAK,EAC3EgF,EAAa,CACX,aAAA3G,EACA,eAAgByC,EAAc,sBAAuB,EACrD,sBAAAC,EACA,cAAe1D,CACrB,CAAK,CACF,EAAE,EAAE,EACCyJ,GAAerP,EAAY,IAAM,CACrC8K,GAAwB,EACxByC,EAAa,IAAI,CAClB,EAAE,EAAE,EACC1K,GAAkB7C,EAAYmD,GAAa,CAC/C,KAAM,CACJ,eAAA4E,CACD,EAAGD,EAAe,QACb/C,EAAQmJ,GAAmBnG,EAAgB5E,CAAS,EACtD4B,GAAS,IACXgD,EAAe,OAAOhD,EAAO,CAAC,EAM9B,OAAOyI,EAAgC,QAAQrK,EAAU,EAAE,EAC3D2E,EAAe,QAAQ,sBAAwB,GAElD,EAAE,EAAE,EACC3F,GAAU9B,GAAQ,KAAO,CAC7B,cAAA+B,EACA,UAAA4G,EACA,UAAAwB,EACA,YAAAnI,EACA,aAAAC,EACA,cAAAC,EACA,QAAAC,EACA,iBAAAC,EACA,gBAAA4L,EACA,2BAAA3L,EACA,cAAAC,EACA,qBAAA+L,EACA,YAAA9L,EACA,cAAAwM,GACA,aAAAC,GACA,gBAAAxM,GACA,kBAAmByK,EAAqB,OAC5C,GAAM,CAAClL,EAAeoI,EAAWxB,EAAW3G,EAAaC,EAAcC,EAAeC,EAASC,EAAkB4L,EAAiB3L,EAA4BC,EAAe+L,EAAsB9L,EAAawM,GAAeC,GAAcxM,EAAe,CAAC,EACrPQ,GAAQ,CACZ,QAAS,OACT,cAAe2F,IAAc,aAAe,MAAQ,SACpD,OAAQ,OACR,SAAU,SACV,MAAO,MACR,EACD,OAAOnJ,GAAca,GAAkB,SAAU,CAC/C,MAAOyB,EACX,EAAKtC,GAAcoC,EAAM,CACrB,GAAGC,EACH,SAAAf,EACA,UAAWC,EACX,MAAO,CACL,GAAGiC,GACH,GAAGrB,CACJ,EACD,IAAKsL,EAEL,mBAAoB,GACpB,6BAA8BtE,EAC9B,sBAAuBxG,CAC3B,CAAG,CAAC,CACJ,CACA,MAAM8M,GAAavP,GAAW,CAACwD,EAAOC,IAAQ3D,GAAcuN,GAA4B,CACtF,GAAG7J,EACH,aAAcC,CAChB,CAAC,CAAC,EACF4J,GAA2B,YAAc,aACzCkC,GAAW,YAAc,yBACzB,SAASpB,GAAmBnG,EAAgB5E,EAAW,CACrD,OAAO4E,EAAe,UAAUwH,GAAiBA,IAAkBpM,GAAaoM,EAAc,KAAOpM,EAAU,EAAE,CACnH,CACA,SAAS8K,EAAgBlG,EAAgB5E,EAAWyC,EAAQ,CAC1D,MAAMxB,EAAa8J,GAAmBnG,EAAgB5E,CAAS,EAEzDsB,EADcL,IAAe2D,EAAe,OAAS,EACxB,CAAC3D,EAAa,EAAGA,CAAU,EAAI,CAACA,EAAYA,EAAa,CAAC,EACvF4J,EAAYpI,EAAOxB,CAAU,EACnC,MAAO,CACL,GAAGjB,EAAU,YACb,UAAA6K,EACA,aAAAvJ,CACD,CACH,CAIA,SAAS+K,GAAuC,CAC9C,SAAAC,EACA,SAAArI,EACA,cAAAsI,EACA,kBAAA7I,CACF,EAAG,CACD3G,EAAU,IAAM,CACd,GAAIuP,GAAYC,GAAiB,MAAQ7I,GAAqB,KAC5D,OAEF,MAAMwC,EAAgBnC,GAAuBE,EAAUP,CAAiB,EACxE,GAAIwC,GAAiB,KACnB,OAEF,MAAMf,EAAYC,GAAS,CACzB,GAAI,CAAAA,EAAM,iBAGV,OAAQA,EAAM,IAAG,CACf,IAAK,YACL,IAAK,YACL,IAAK,aACL,IAAK,UACL,IAAK,MACL,IAAK,OACH,CACEA,EAAM,eAAgB,EACtBmH,EAAcnH,CAAK,EACnB,KACZ,CACQ,IAAK,KACH,CACEA,EAAM,eAAgB,EACtB,MAAM/F,EAAU6G,EAAc,aAAa,qBAAqB,EAChE5F,EAAOjB,CAAO,EACd,MAAMiF,EAAUnB,GAAgC9D,EAASqE,CAAiB,EACpE9B,EAAQyB,GAA4BhE,EAAS4E,EAAUP,CAAiB,EAC9EpD,EAAOsB,IAAU,IAAI,EACrB,MAAM4K,EAAYpH,EAAM,SAAWxD,EAAQ,EAAIA,EAAQ,EAAI0C,EAAQ,OAAS,EAAI1C,EAAQ,EAAI0C,EAAQ,OAAS1C,EAAQ,EAAI,EACtG0C,EAAQkI,CAAS,EACzB,MAAO,EAClB,KACZ,CACA,CACK,EACD,OAAAtG,EAAc,iBAAiB,UAAWf,CAAS,EAC5C,IAAM,CACXe,EAAc,oBAAoB,UAAWf,CAAS,CACvD,CACF,EAAE,CAACzB,EAAmB4I,EAAUrI,EAAUsI,CAAa,CAAC,CAC3D,CAEA,SAASE,GAAkB,CACzB,SAAAzO,EAAW,KACX,UAAWC,EAAqB,GAChC,SAAAqO,EAAW,GACX,GAAIhO,EACJ,WAAAoO,EACA,MAAO7N,EAAiB,CAAE,EAC1B,SAAA8N,EAAW,EACX,QAAS7N,EAAO,MAChB,GAAGC,CACL,EAAG,CACD,MAAM6N,EAAazP,EAAO,IAAI,EAGxB0P,EAAe1P,EAAO,CAC1B,WAAAuP,CACJ,CAAG,EACD3P,EAAU,IAAM,CACd8P,EAAa,QAAQ,WAAaH,CACtC,CAAG,EACD,MAAMI,EAAoBhQ,GAAWS,EAAiB,EACtD,GAAIuP,IAAsB,KACxB,MAAM,MAAM,6EAA6E,EAE3F,KAAM,CACJ,UAAAjH,EACA,UAAAwB,EACA,QAAAhI,EACA,qBAAAkM,EACA,cAAAU,EACA,aAAAC,EACA,kBAAAxI,CACJ,EAAMoJ,EACEC,EAAiBpP,GAAYW,CAAW,EACxC0O,EAAoE3F,GAAU,eAAkB0F,EAChG,CAACE,EAAWC,CAAY,EAAI9P,GAAS,EAAK,EAC1C,CAACmP,EAAeY,CAAgB,EAAI/P,GAAS,IAAI,EACjDgQ,EAAsBvQ,EAAY,IAAM,CAG5C,MAAMiH,EAAU8I,EAAW,QAC3BtM,EAAOwD,CAAO,EACdA,EAAQ,KAAM,EACdoI,EAAc,EACd,KAAM,CACJ,WAAAQ,CACD,EAAGG,EAAa,QACbH,GACFA,EAAW,EAAK,CAEtB,EAAK,CAACR,CAAY,CAAC,EACjBnP,EAAU,IAAM,CACd,GAAIuP,EACFa,EAAiB,IAAI,MAChB,CACL,MAAMZ,EAAgBhB,EAAqBwB,CAAc,EACzDI,EAAiB,IAAMZ,CAAa,CAC1C,CACG,EAAE,CAACD,EAAUS,EAAgBxB,CAAoB,CAAC,EACnDxO,EAAU,IAAM,CACd,GAAIuP,GAAYC,GAAiB,MAAQ,CAACS,EACxC,OAEF,MAAMK,EAASjI,GAAS,CACtBmH,EAAcnH,CAAK,CACpB,EACKkI,EAAelI,GAAS,CAC5BmH,EAAcnH,CAAK,CACpB,EACKtB,EAAU8I,EAAW,QAC3BtM,EAAOwD,CAAO,EACd,MAAMyJ,EAAiBzJ,EAAQ,cAC/B,OAAAyJ,EAAe,KAAK,iBAAiB,cAAeH,CAAmB,EACvEG,EAAe,KAAK,iBAAiB,YAAaF,CAAM,EACxDE,EAAe,KAAK,iBAAiB,YAAaF,CAAM,EACxDE,EAAe,KAAK,iBAAiB,aAAcD,CAAY,EAC/D,OAAO,iBAAiB,UAAWF,CAAmB,EACtD,OAAO,iBAAiB,WAAYA,CAAmB,EAChD,IAAM,CACXG,EAAe,KAAK,oBAAoB,cAAeH,CAAmB,EAC1EG,EAAe,KAAK,oBAAoB,YAAaF,CAAM,EAC3DE,EAAe,KAAK,oBAAoB,YAAaF,CAAM,EAC3DE,EAAe,KAAK,oBAAoB,aAAcD,CAAY,EAClE,OAAO,oBAAoB,UAAWF,CAAmB,EACzD,OAAO,oBAAoB,WAAYA,CAAmB,CAC3D,CACL,EAAK,CAACvH,EAAWyG,EAAUU,EAAYT,EAAea,CAAmB,CAAC,EACxEf,GAAuC,CACrC,SAAAC,EACA,SAAUS,EACV,cAAAR,EACA,kBAAA7I,CACJ,CAAG,EACD,MAAMxD,EAAQ,CACZ,OAAQuH,GAAe5B,CAAS,EAChC,YAAa,OACb,WAAY,MACb,EACD,OAAOnJ,GAAcoC,EAAM,CACzB,GAAGC,EACH,SAAAf,EACA,UAAWC,EACX,OAAQ,IAAMiP,EAAa,EAAK,EAChC,QAAS,IAAMA,EAAa,EAAI,EAChC,YAAa9H,GAAS,CACpB6G,EAAcc,EAAgB3H,EAAM,WAAW,EAC/C,MAAMvF,EAAYgN,EAAa,QAC/BvM,EAAOT,CAAS,EAChB,KAAM,CACJ,WAAA6M,CACR,EAAU7M,EACA6M,GACFA,EAAW,EAAI,CAElB,EACD,UAAWU,EACX,cAAeA,EACf,WAAYA,EACZ,aAAchI,GAAS,CACrB6G,EAAcc,EAAgB3H,EAAM,WAAW,EAC/C,MAAMvF,EAAYgN,EAAa,QAC/BvM,EAAOT,CAAS,EAChB,KAAM,CACJ,WAAA6M,CACR,EAAU7M,EACA6M,GACFA,EAAW,EAAI,CAElB,EACD,IAAKE,EACL,KAAM,YACN,MAAO,CACL,GAAG1M,EACH,GAAGrB,CACJ,EACD,SAAA8N,EAEA,6BAA8B9G,EAC9B,sBAAuBxG,EACvB,qBAAsB,GACtB,4BAA6B2N,EAAa,UAAYC,EAAY,WAAa,OAC/E,mCAAoC,CAACX,EACrC,8BAA+BS,CACnC,CAAG,CACH,CACAN,GAAkB,YAAc,oBCp0DhC,MAAMe,GAAsB,CAAC,CAC3B,UAAAC,EACA,GAAGrN,CACL,IACEsN,EAAA,IAACC,GAAA,CACC,UAAWC,GACT,oEACAH,CACF,EACC,GAAGrN,CAAA,CACN,EAGIyN,GAAiBC,GAEjBC,GAAkB,CAAC,CACvB,WAAAC,EACA,UAAAP,EACA,GAAGrN,CACL,IAGEsN,EAAA,IAACO,GAAA,CACC,UAAWL,GACT,0oBACAH,CACF,EACC,GAAGrN,EAEH,SAAA4N,SACE,MAAI,CAAA,UAAU,4EACb,SAACN,EAAA,IAAAlR,GAAA,CAAa,UAAU,aAAc,CAAA,CACxC,CAAA,CAAA,CAEJ,ECjCF,SAAwB0R,IAAU,CAChC,OACGC,EAAAA,KAAAX,GAAA,CAAoB,UAAU,aAAa,UAAU,UACpD,SAAA,CAAAE,MAACG,GAAe,CAAA,YAAa,GAC3B,SAAAH,EAAA,IAAC,MAAI,CAAA,UAAU,iDACb,SAAAA,EAAA,IAAC,OAAK,CAAA,UAAU,gBAAgB,SAAA,KAAA,CAAG,CACrC,CAAA,EACF,QACCK,GAAgB,EAAA,EAChBL,MAAAG,GAAA,CAAe,YAAa,GAC3B,eAAC,MAAI,CAAA,UAAU,iDACb,SAAAH,EAAA,IAAC,OAAK,CAAA,UAAU,gBAAgB,SAAA,MAAG,EACrC,CACF,CAAA,CAAA,EACF,CAEJ","x_google_ignoreList":[0,1]}