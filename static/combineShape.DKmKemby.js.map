{"version":3,"file":"combineShape.DKmKemby.js","sources":["../../src/components/react/p5/art/combineShape.tsx"],"sourcesContent":["import type p5 from \"p5\";\nimport Basic from \"@components/react/p5/index.tsx\";\nimport { useCallback } from \"react\";\n\nconst vert = `\n#ifdef GL_ES\nprecision highp float;\nprecision highp int;\n#endif\n\nattribute vec3 aPosition;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvoid main() {\n    gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aPosition, 1.0);\n}`;\n\nconst frag = `\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define PI 3.141592653589793238\n\nuniform vec2 res;\nuniform float time;\n\n// Signed distance function for an octahedron\n\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n    vec3 q;\n    if (3.0 * p.x < m) q = p.xyz;\n    else if (3.0 * p.y < m) q = p.yzx;\n    else if (3.0 * p.z < m) q = p.zxy;\n    else return m * 0.57735027; // 0.57735027 is approximately 1/sqrt(3)\n    \n    float k = clamp(0.5 * (q.z - q.y + s), 0.0, s);\n    return length(vec3(q.x, q.y - s + k, q.z - k));\n}\n\n// Signed distance function for a sphere\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat SDF(vec3 p) {\n  float d = -sin(time * PI / 3.0) * 0.125 + 0.25; \n  return opSmoothUnion(sdOctahedron(p - vec3(d, 0.0, 0.0), 0.2), sdSphere(p + vec3(d, 0.0, 0.0), 0.1), 0.2);\n}\n\nvoid main(void) {\n    float minSide = min(res.x, res.y);\n    vec2 crd = (gl_FragCoord.xy - res * 0.5) / minSide;\n    \n    // Compute distance from the fragment to the shapes\n    float d = SDF(vec3(crd, 0.0));\n    vec3 color = vec3(d);\n\n    // Mix the color based on the distance to the shapes\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 1.0 / minSide, abs(d)));\n    \n    gl_FragColor = vec4(color, 1.0);\n}`;\n\nexport default () => {\n  const sketch = useCallback((p: p5) => {\n    let program: p5.Shader;\n\n    p.setup = () => {\n      p.pixelDensity(1);\n      p.createCanvas(p.windowWidth / 2, 500, p.WEBGL);\n      p.noStroke();\n      p.fill(1);\n      program = p.createShader(vert, frag);\n      p.shader(program);\n      p.frameRate(120);\n    };\n\n    p.draw = () => {\n      p.background(0);\n      program.setUniform(\"res\", [p.width, p.height]);\n      program.setUniform(\"time\", p.frameCount / 120.0);\n      p.translate(-p.width / 2, -p.height / 2);\n      p.rect(0, 0, p.width, p.height);\n    };\n\n    p.windowResized = () => {\n      p.resizeCanvas(p.windowWidth / 2, 500);\n    };\n  }, []);\n\n  return <Basic sketch={sketch} showControls />;\n};\n"],"names":["vert","frag","combineShape","sketch","useCallback","p","program","jsx","Basic"],"mappings":"ssBAIA,MAAMA,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAePC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAyDbC,EAAe,IAAM,CACb,MAAAC,EAASC,cAAaC,GAAU,CAChC,IAAAC,EAEJD,EAAE,MAAQ,IAAM,CACdA,EAAE,aAAa,CAAC,EAChBA,EAAE,aAAaA,EAAE,YAAc,EAAG,IAAKA,EAAE,KAAK,EAC9CA,EAAE,SAAS,EACXA,EAAE,KAAK,CAAC,EACEC,EAAAD,EAAE,aAAaL,EAAMC,CAAI,EACnCI,EAAE,OAAOC,CAAO,EAChBD,EAAE,UAAU,GAAG,CACjB,EAEAA,EAAE,KAAO,IAAM,CACbA,EAAE,WAAW,CAAC,EACdC,EAAQ,WAAW,MAAO,CAACD,EAAE,MAAOA,EAAE,MAAM,CAAC,EAC7CC,EAAQ,WAAW,OAAQD,EAAE,WAAa,GAAK,EAC7CA,EAAA,UAAU,CAACA,EAAE,MAAQ,EAAG,CAACA,EAAE,OAAS,CAAC,EACvCA,EAAE,KAAK,EAAG,EAAGA,EAAE,MAAOA,EAAE,MAAM,CAChC,EAEAA,EAAE,cAAgB,IAAM,CACtBA,EAAE,aAAaA,EAAE,YAAc,EAAG,GAAG,CACvC,CACF,EAAG,EAAE,EAEL,OAAQE,EAAAA,IAAAC,EAAA,CAAM,OAAAL,EAAgB,aAAY,EAAC,CAAA,CAC7C"}