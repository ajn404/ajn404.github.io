{"version":3,"file":"watchfamily.COSvcn0N.js","sources":["../../src/components/vue/challenge/watchfamily.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { ref, watch } from \"vue\";\n\nconst count = ref(0);\n\n/**\n * Challenge 1: Watch once\n * Make sure the watch callback only triggers once\n */\nconst unWatch = watch(count, () => {\n    console.log(\"Only triggered once\");\n    unWatch();\n});\n\ncount.value = 1;\nsetTimeout(() => (count.value = 2));\n\n/**\n * Challenge 2: Watch object\n * Make sure the watch callback is triggered\n */\nconst state = ref({\n    count: 0,\n});\n\nwatch(\n    state,\n    () => {\n        console.log(\"The state.count updated\");\n    },\n    { deep: true }\n);\n\nstate.value.count = 2;\n\n/**\n * Challenge 3: Callback Flush Timing\n * Make sure visited the updated eleRef\n */\n\nconst eleRef = ref();\nconst age = ref(2);\nwatch(\n    age,\n    () => {\n        console.log(eleRef.value);\n    },\n    //想在侦听器回调中能访问被 Vue 更新之后的所属组件的 DOM,你需要指明\n    { flush: \"post\" }\n);\n//设置 flush: 'post' 将会使侦听器延迟到组件渲染之后再执行.\nage.value = 18;\n</script>\n\n<template>\n    <div>\n        <p>\n            count:{{ count }}\n        </p>\n        <p ref=\"eleRef\">\n            age:{{ age }}\n        </p>\n    </div>\n</template>\n"],"names":["count","ref","unWatch","watch","state","eleRef","age","_createElementBlock","_createElementVNode","_toDisplayString","$setup"],"mappings":"wmBAGM,MAAAA,EAAQC,EAAI,CAAC,EAMbC,EAAUC,EAAMH,EAAO,IAAM,CAC/B,QAAQ,IAAI,qBAAqB,EACzBE,EAAA,CAAA,CACX,EAEDF,EAAM,MAAQ,EACH,WAAA,IAAOA,EAAM,MAAQ,CAAE,EAMlC,MAAMI,EAAQH,EAAI,CACd,MAAO,CAAA,CACV,EAEDE,EACIC,EACA,IAAM,CACF,QAAQ,IAAI,yBAAyB,CACzC,EACA,CAAE,KAAM,EAAK,CACjB,EAEAA,EAAM,MAAM,MAAQ,EAOpB,MAAMC,EAASJ,EAAI,EACbK,EAAML,EAAI,CAAC,EACjBE,EACIG,EACA,IAAM,CACM,QAAA,IAAID,EAAO,KAAK,CAC5B,EAEA,CAAE,MAAO,MAAO,CACpB,EAEAC,EAAI,MAAQ,yKAIRC,EAOM,MAAA,KAAA,CANFC,EAEI,IAAA,KAFD,UACOC,EAAGC,EAAK,KAAA,EAAA,CAAA,EAElBF,EAEI,IAFD,CAAA,IAAI,UAAS,QACRC,EAAGC,EAAG,GAAA,EAAA,GAAA,CAAA,CAAA"}