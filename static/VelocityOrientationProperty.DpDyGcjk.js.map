{"version":3,"file":"VelocityOrientationProperty.DpDyGcjk.js","sources":["../../node_modules/.pnpm/@cesium+engine@17.0.0/node_modules/@cesium/engine/Source/DataSources/PolylineGlowMaterialProperty.js","../../node_modules/.pnpm/@cesium+engine@17.0.0/node_modules/@cesium/engine/Source/DataSources/VelocityOrientationProperty.js"],"sourcesContent":["import Color from \"../Core/Color.js\";\nimport Frozen from \"../Core/Frozen.js\";\nimport defined from \"../Core/defined.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport createPropertyDescriptor from \"./createPropertyDescriptor.js\";\nimport Property from \"./Property.js\";\n\nconst defaultColor = Color.WHITE;\nconst defaultGlowPower = 0.25;\nconst defaultTaperPower = 1.0;\n\n/**\n * A {@link MaterialProperty} that maps to polyline glow {@link Material} uniforms.\n * @alias PolylineGlowMaterialProperty\n * @constructor\n *\n * @param {object} [options] Object with the following properties:\n * @param {Property|Color} [options.color=Color.WHITE] A Property specifying the {@link Color} of the line.\n * @param {Property|number} [options.glowPower=0.25] A numeric Property specifying the strength of the glow, as a percentage of the total line width.\n * @param {Property|number} [options.taperPower=1.0] A numeric Property specifying the strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.\n */\nfunction PolylineGlowMaterialProperty(options) {\n  options = options ?? Frozen.EMPTY_OBJECT;\n\n  this._definitionChanged = new Event();\n  this._color = undefined;\n  this._colorSubscription = undefined;\n  this._glowPower = undefined;\n  this._glowPowerSubscription = undefined;\n  this._taperPower = undefined;\n  this._taperPowerSubscription = undefined;\n\n  this.color = options.color;\n  this.glowPower = options.glowPower;\n  this.taperPower = options.taperPower;\n}\n\nObject.defineProperties(PolylineGlowMaterialProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.  A property is considered\n   * constant if getValue always returns the same result for the current definition.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return (\n        Property.isConstant(this._color) && Property.isConstant(this._glow)\n      );\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * The definition is considered to have changed if a call to getValue would return\n   * a different result for the same time.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the Property specifying the {@link Color} of the line.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  color: createPropertyDescriptor(\"color\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the strength of the glow, as a percentage of the total line width (less than 1.0).\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  glowPower: createPropertyDescriptor(\"glowPower\"),\n\n  /**\n   * Gets or sets the numeric Property specifying the strength of the tapering effect, as a percentage of the total line length.  If 1.0 or higher, no taper effect is used.\n   * @memberof PolylineGlowMaterialProperty.prototype\n   * @type {Property|undefined}\n   */\n  taperPower: createPropertyDescriptor(\"taperPower\"),\n});\n\n/**\n * Gets the {@link Material} type at the provided time.\n *\n * @param {JulianDate} time The time for which to retrieve the type.\n * @returns {string} The type of material.\n */\nPolylineGlowMaterialProperty.prototype.getType = function (time) {\n  return \"PolylineGlow\";\n};\n\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {object} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {object} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nPolylineGlowMaterialProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  if (!defined(result)) {\n    result = {};\n  }\n  result.color = Property.getValueOrClonedDefault(\n    this._color,\n    time,\n    defaultColor,\n    result.color,\n  );\n  result.glowPower = Property.getValueOrDefault(\n    this._glowPower,\n    time,\n    defaultGlowPower,\n    result.glowPower,\n  );\n  result.taperPower = Property.getValueOrDefault(\n    this._taperPower,\n    time,\n    defaultTaperPower,\n    result.taperPower,\n  );\n  return result;\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nPolylineGlowMaterialProperty.prototype.equals = function (other) {\n  return (\n    this === other ||\n    (other instanceof PolylineGlowMaterialProperty &&\n      Property.equals(this._color, other._color) &&\n      Property.equals(this._glowPower, other._glowPower) &&\n      Property.equals(this._taperPower, other._taperPower))\n  );\n};\nexport default PolylineGlowMaterialProperty;\n","import Cartesian3 from \"../Core/Cartesian3.js\";\nimport defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport Event from \"../Core/Event.js\";\nimport JulianDate from \"../Core/JulianDate.js\";\nimport Matrix3 from \"../Core/Matrix3.js\";\nimport Quaternion from \"../Core/Quaternion.js\";\nimport Transforms from \"../Core/Transforms.js\";\nimport Property from \"./Property.js\";\nimport VelocityVectorProperty from \"./VelocityVectorProperty.js\";\n\n/**\n * A {@link Property} which evaluates to a {@link Quaternion} rotation\n * based on the velocity of the provided {@link PositionProperty}.\n *\n * @alias VelocityOrientationProperty\n * @constructor\n *\n * @param {PositionProperty} [position] The position property used to compute the orientation.\n * @param {Ellipsoid} [ellipsoid=Ellipsoid.default] The ellipsoid used to determine which way is up.\n *\n * @example\n * //Create an entity with position and orientation.\n * const position = new Cesium.SampledProperty();\n * position.addSamples(...);\n * const entity = viewer.entities.add({\n *   position : position,\n *   orientation : new Cesium.VelocityOrientationProperty(position)\n * }));\n */\nfunction VelocityOrientationProperty(position, ellipsoid) {\n  this._velocityVectorProperty = new VelocityVectorProperty(position, true);\n  this._subscription = undefined;\n  this._ellipsoid = undefined;\n  this._definitionChanged = new Event();\n\n  this.ellipsoid = ellipsoid ?? Ellipsoid.default;\n\n  const that = this;\n  this._velocityVectorProperty.definitionChanged.addEventListener(function () {\n    that._definitionChanged.raiseEvent(that);\n  });\n}\n\nObject.defineProperties(VelocityOrientationProperty.prototype, {\n  /**\n   * Gets a value indicating if this property is constant.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {boolean}\n   * @readonly\n   */\n  isConstant: {\n    get: function () {\n      return Property.isConstant(this._velocityVectorProperty);\n    },\n  },\n  /**\n   * Gets the event that is raised whenever the definition of this property changes.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Event}\n   * @readonly\n   */\n  definitionChanged: {\n    get: function () {\n      return this._definitionChanged;\n    },\n  },\n  /**\n   * Gets or sets the position property used to compute orientation.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property|undefined}\n   */\n  position: {\n    get: function () {\n      return this._velocityVectorProperty.position;\n    },\n    set: function (value) {\n      this._velocityVectorProperty.position = value;\n    },\n  },\n  /**\n   * Gets or sets the ellipsoid used to determine which way is up.\n   * @memberof VelocityOrientationProperty.prototype\n   *\n   * @type {Property|undefined}\n   */\n  ellipsoid: {\n    get: function () {\n      return this._ellipsoid;\n    },\n    set: function (value) {\n      const oldValue = this._ellipsoid;\n      if (oldValue !== value) {\n        this._ellipsoid = value;\n        this._definitionChanged.raiseEvent(this);\n      }\n    },\n  },\n});\n\nconst positionScratch = new Cartesian3();\nconst velocityScratch = new Cartesian3();\nconst rotationScratch = new Matrix3();\nconst timeScratch = new JulianDate();\n\n/**\n * Gets the value of the property at the provided time.\n *\n * @param {JulianDate} [time=JulianDate.now()] The time for which to retrieve the value. If omitted, the current system time is used.\n * @param {Quaternion} [result] The object to store the value into, if omitted, a new instance is created and returned.\n * @returns {Quaternion} The modified result parameter or a new instance if the result parameter was not supplied.\n */\nVelocityOrientationProperty.prototype.getValue = function (time, result) {\n  if (!defined(time)) {\n    time = JulianDate.now(timeScratch);\n  }\n  const velocity = this._velocityVectorProperty._getValue(\n    time,\n    velocityScratch,\n    positionScratch,\n  );\n\n  if (!defined(velocity)) {\n    return undefined;\n  }\n\n  Transforms.rotationMatrixFromPositionVelocity(\n    positionScratch,\n    velocity,\n    this._ellipsoid,\n    rotationScratch,\n  );\n  return Quaternion.fromRotationMatrix(rotationScratch, result);\n};\n\n/**\n * Compares this property to the provided property and returns\n * <code>true</code> if they are equal, <code>false</code> otherwise.\n *\n * @param {Property} [other] The other property.\n * @returns {boolean} <code>true</code> if left and right are equal, <code>false</code> otherwise.\n */\nVelocityOrientationProperty.prototype.equals = function (other) {\n  return (\n    this === other || //\n    (other instanceof VelocityOrientationProperty &&\n      Property.equals(\n        this._velocityVectorProperty,\n        other._velocityVectorProperty,\n      ) &&\n      (this._ellipsoid === other._ellipsoid ||\n        this._ellipsoid.equals(other._ellipsoid)))\n  );\n};\nexport default VelocityOrientationProperty;\n"],"names":["defaultColor","Color","defaultGlowPower","defaultTaperPower","PolylineGlowMaterialProperty","options","Frozen","Event","Property","createPropertyDescriptor","time","timeScratch","JulianDate","result","defined","other","VelocityOrientationProperty","position","ellipsoid","VelocityVectorProperty","Ellipsoid","that","value","positionScratch","Cartesian3","velocityScratch","rotationScratch","Matrix3","velocity","Transforms","Quaternion"],"mappings":"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","x_google_ignoreList":[0,1]}