{"version":3,"file":"textAnimation.uZaeOLIf.js","sources":["../../src/components/react/d3/textAnimation.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\ninterface SvgTextProps {\n  text: string; // 可变的文字内容\n  height?: number; // SVG 高度\n  fontSize?: number; // 字体大小\n  stroke?: string;\n  className?: string;\n}\n// 动画产生的原因是为动态的strokeDashoffset\nconst SvgText: React.FC<SvgTextProps> = ({\n  text,\n  height = 100,\n  fontSize = 60,\n  stroke = \"black\",\n  className = \"\",\n}) => {\n  const [offset, setOffset] = useState(300); // 初始的 stroke-dashoffset 值\n  const [width, setWidth] = useState(0); // 动态宽度\n  const textRef = useRef<SVGTextElement | null>(null); // 引用文本元素\n\n  useEffect(() => {\n    const animate = () => {\n      let start = 300; // strokeDasharray 的值\n      let end = 0; // 动画结束时的值\n      let duration = 5000; // 动画持续时间\n      let startTime: number | null = null;\n\n      const step = (timestamp: number) => {\n        if (!startTime) startTime = timestamp;\n        const progress = timestamp - startTime;\n        const currentOffset = Math.max(\n          end,\n          start - (start * progress) / duration\n        );\n        setOffset(currentOffset);\n\n        if (progress < duration) {\n          requestAnimationFrame(step);\n        } else {\n          // requestAnimationFrame(step); // 重新开始动画\n          setTimeout(() => {\n            // 动画完成后重置 offset 并重新开始动画\n            setOffset(300); // 重置为初始值\n            startTime = null; // 重置开始时间\n            animate();\n          }, 5000);\n        }\n      };\n\n      requestAnimationFrame(step);\n    };\n\n    animate();\n  }, []);\n\n  useEffect(() => {\n    if (textRef.current) {\n      const bbox = textRef.current.getBBox(); // 获取文本的边界框\n      setWidth(bbox.width + 20); // 设置宽度,增加一些边距\n    }\n  }, [text]);\n\n  return (\n    <svg width={width} height={height} className={className}>\n      <text\n        ref={textRef}\n        x=\"50%\"\n        y=\"80\"\n        fontSize={fontSize}\n        textAnchor=\"middle\"\n        fontWeight=\"bold\"\n        fill=\"none\"\n        stroke={stroke}\n        strokeDasharray=\"300\"\n        strokeDashoffset={offset}\n      >\n        {text}\n      </text>\n    </svg>\n  );\n};\n\nexport default SvgText;\n"],"names":["SvgText","text","height","fontSize","stroke","className","offset","setOffset","useState","width","setWidth","textRef","useRef","useEffect","animate","start","end","duration","startTime","step","timestamp","progress","currentOffset","bbox","jsx"],"mappings":"4gBAUA,MAAMA,EAAkC,CAAC,CACvC,KAAAC,EACA,OAAAC,EAAS,IACT,SAAAC,EAAW,GACX,OAAAC,EAAS,QACT,UAAAC,EAAY,EACd,IAAM,CACJ,KAAM,CAACC,EAAQC,CAAS,EAAIC,EAAAA,SAAS,GAAG,EAClC,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAS,CAAC,EAC9BG,EAAUC,SAA8B,IAAI,EAElDC,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAU,IAAM,CACpB,IAAIC,EAAQ,IACRC,EAAM,EACNC,EAAW,IACXC,EAA2B,KAEzB,MAAAC,EAAQC,GAAsB,CAC7BF,IAAuBA,EAAAE,GAC5B,MAAMC,EAAWD,EAAYF,EACvBI,EAAgB,KAAK,IACzBN,EACAD,EAASA,EAAQM,EAAYJ,CAC/B,EACAV,EAAUe,CAAa,EAEnBD,EAAWJ,EACb,sBAAsBE,CAAI,EAG1B,WAAW,IAAM,CAEfZ,EAAU,GAAG,EACDW,EAAA,KACJJ,EAAA,GACP,GAAI,CAEX,EAEA,sBAAsBK,CAAI,CAC5B,EAEQL,EAAA,CACV,EAAG,EAAE,EAELD,EAAAA,UAAU,IAAM,CACd,GAAIF,EAAQ,QAAS,CACb,MAAAY,EAAOZ,EAAQ,QAAQ,QAAQ,EAC5BD,EAAAa,EAAK,MAAQ,EAAE,CAAA,CAC1B,EACC,CAACtB,CAAI,CAAC,EAGNuB,EAAAA,IAAA,MAAA,CAAI,MAAAf,EAAc,OAAAP,EAAgB,UAAAG,EACjC,SAAAmB,EAAA,IAAC,OAAA,CACC,IAAKb,EACL,EAAE,MACF,EAAE,KACF,SAAAR,EACA,WAAW,SACX,WAAW,OACX,KAAK,OACL,OAAAC,EACA,gBAAgB,MAChB,iBAAkBE,EAEjB,SAAAL,CAAA,CAAA,EAEL,CAEJ"}