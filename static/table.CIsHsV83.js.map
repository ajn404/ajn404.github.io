{"version":3,"file":"table.CIsHsV83.js","sources":["../../src/components/react/practice/table.tsx"],"sourcesContent":["import { useState } from \"react\";\n\n// 定义类型\n\nexport interface Column {\n  header: string;\n  accessor: string;\n}\n\nexport interface Row {\n  [key: string]: any;\n}\n\nexport interface TableOptions {\n  className?: string;\n}\n\nexport interface OptionConfig {\n  label: string;\n  name: string;\n  type: \"text\" | \"number\" | \"select\";\n  value: string | number;\n  options?: Array<{ label: string; value: string | number }>; // Only for select type\n}\n\nexport interface TableState {\n  selectedRows: Set<number>;\n  allSelected: boolean;\n}\n\ninterface UseTableOptions {\n  columns: Column[];\n  data: Row[];\n}\n\n//使用 useTable hook 来管理表格的状态和渲染逻辑.\n//在 useTable Hook 中增加管理选中状态的逻辑\n//通过 state 管理选中的行和全选状态.\n\nexport const useTable = ({ columns, data }: UseTableOptions) => {\n  const [rows, setRows] = useState<Row[]>(data);\n  const [state, setState] = useState<TableState>({\n    selectedRows: new Set<number>(),\n    allSelected: false,\n  });\n\n  const toggleRowSelection = (index: number) => {\n    setState(prevState => {\n      const selectedRows = new Set(prevState.selectedRows);\n      if (selectedRows.has(index)) {\n        selectedRows.delete(index);\n      } else {\n        selectedRows.add(index);\n      }\n      return {\n        ...prevState,\n        selectedRows,\n        allSelected: selectedRows.size === rows.length,\n      };\n    });\n  };\n\n  const toggleAllSelection = () => {\n    setState(prevState => {\n      const allSelected = !prevState.allSelected;\n      const selectedRows = allSelected\n        ? new Set(rows.map((_, index) => index))\n        : new Set<number>();\n      return { ...prevState, selectedRows, allSelected };\n    });\n  };\n\n  const getTableProps = () => ({\n    // Add additional table props here\n  });\n\n  const getHeaderProps = () => ({\n    // Add additional header props here\n  });\n\n  const getRowProps = (row: Row, index: number) => ({\n    // Add additional row props here\n    key: index,\n  });\n\n  const getCellProps = (cell: any) => ({\n    // Add additional cell props here\n  });\n\n  return {\n    rows,\n    columns,\n    state,\n    toggleRowSelection,\n    toggleAllSelection,\n    getTableProps,\n    getHeaderProps,\n    getRowProps,\n    getCellProps,\n  };\n};\n\n// 在表头和每一行中添加复选框.\n// 使用 toggleAllSelection 方法处理全选逻辑.\n// 使用 toggleRowSelection 方法处理行选中逻辑.\n\ninterface TableProps {\n  columns: Column[];\n  data: Row[];\n  options: TableOptions;\n}\n\nconst Table: React.FC<TableProps> = ({ columns, data, options }) => {\n  const {\n    rows,\n    state,\n    toggleRowSelection,\n    toggleAllSelection,\n    getTableProps,\n    getHeaderProps,\n    getRowProps,\n    getCellProps,\n  } = useTable({ columns, data });\n\n  return (\n    <table className={options?.className || \"\"} {...getTableProps()}>\n      <thead>\n        <tr {...getHeaderProps()}>\n          <th>\n            <input\n              type=\"checkbox\"\n              checked={state.allSelected}\n              onChange={toggleAllSelection}\n            />\n          </th>\n          {columns.map((col, index) => (\n            <th key={index}>{col.header}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((row, rowIndex) => (\n          <tr key={rowIndex} {...getRowProps(row, rowIndex)}>\n            <td>\n              <input\n                type=\"checkbox\"\n                checked={state.selectedRows.has(rowIndex)}\n                onChange={() => toggleRowSelection(rowIndex)}\n              />\n            </td>\n            {columns.map((col, colIndex) => (\n              <td key={colIndex} {...getCellProps(row[col.accessor])}>\n                {row[col.accessor]}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\n// 管理表格数据和选项的状态.\n// 将初始数据和列配置传递给 Table 组件.\n// 通过 Option 组件来实现数据的选择和过滤,并将结果传递给 Table 组件进行渲染.\n\nconst App: React.FC = () => {\n  const initialData: Row[] = [\n    { name: \"John Doe\", age: 28, country: \"USA\" },\n    { name: \"Jane Smith\", age: 34, country: \"UK\" },\n    { name: \"Sam Green\", age: 23, country: \"Canada\" },\n  ];\n\n  const columns: Column[] = [\n    { header: \"Name\", accessor: \"name\" },\n    { header: \"Age\", accessor: \"age\" },\n    { header: \"Country\", accessor: \"country\" },\n  ];\n\n  const [data, setData] = useState<Row[]>(initialData);\n  const [tableOptions, setTableOptions] = useState({ className: \"my-table\" });\n  const [filterOptions, setFilterOptions] = useState<OptionConfig[]>([\n    {\n      label: \"Filter by Country\",\n      name: \"country\",\n      type: \"select\",\n      value: \"\",\n      options: [\n        { label: \"All\", value: \"\" },\n        { label: \"USA\", value: \"USA\" },\n        { label: \"UK\", value: \"UK\" },\n        { label: \"Canada\", value: \"Canada\" },\n      ],\n    },\n  ]);\n\n  const handleOptionChange = (name: string, value: string | number) => {\n    setFilterOptions(prevOptions =>\n      prevOptions.map(option =>\n        option.name === name ? { ...option, value } : option\n      )\n    );\n\n    if (name === \"country\") {\n      setData(\n        value ? initialData.filter(row => row.country === value) : initialData\n      );\n    }\n  };\n\n  return (\n    <div>\n      <Table columns={columns} data={data} options={tableOptions} />\n    </div>\n  );\n};\n\nexport default App;\n"],"names":["useTable","columns","data","rows","setRows","useState","state","setState","index","prevState","selectedRows","allSelected","_","row","cell","Table","options","toggleRowSelection","toggleAllSelection","getTableProps","getHeaderProps","getRowProps","getCellProps","jsxs","jsx","col","rowIndex","colIndex","App","initialData","setData","tableOptions","setTableOptions","filterOptions","setFilterOptions"],"mappings":"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"}