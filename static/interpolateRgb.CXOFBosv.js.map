{"version":3,"file":"interpolateRgb.CXOFBosv.js","sources":["../../src/components/react/d3/interpolateRgb.tsx"],"sourcesContent":["import * as d3 from \"d3\";\nimport { useEffect, useRef } from \"react\";\n\nexport default () => {\n  const ref = useRef<SVGSVGElement | null>(null);\n  const height = 500;\n  const width = 500;\n\n  const radius = 6;\n\n  const step = radius * 2;\n  const theta = Math.PI * (3 - Math.sqrt(5));\n\n  const data: number[][] = Array.from({ length: 2000 }, (_, i) => {\n    const r = step * Math.sqrt((i += 0.5)),\n      a = theta * i;\n    return [width / 2 + r * Math.cos(a), height / 2 + r * Math.sin(a)];\n  });\n  useEffect(() => {\n    const svgElement = d3.select(ref.current);\n\n    const chart = () => {\n      let currentTransform: d3.ZoomView = [width / 2, height / 2, height];\n\n      const svg = svgElement.attr(\"viewBox\", [0, 0, width, height]);\n\n      const g = svg.append(\"g\");\n\n      g.selectAll(\"circle\")\n        .data(data)\n        .join(\"circle\")\n        .attr(\"cx\", ([x]) => x)\n        .attr(\"cy\", ([, y]) => y)\n        .attr(\"r\", radius)\n        .attr(\"fill\", (d, i) => d3.interpolateRainbow(i / 360));\n\n      function transition() {\n        const d = data[Math.floor(Math.random() * data.length)];\n        const i = d3.interpolateZoom(currentTransform, [\n          ...d,\n          radius * 2 + 1,\n        ] as d3.ZoomView);\n\n        g.transition()\n          .delay(250)\n          .duration(i.duration)\n          .attrTween(\n            \"transform\",\n            () => t => transform((currentTransform = i(t)))\n          )\n          .on(\"end\", transition);\n      }\n\n      function transform([x, y, r]) {\n        return `\n      translate(${width / 2}, ${height / 2})\n      scale(${height / r})\n      translate(${-x}, ${-y})\n    `;\n      }\n      return svg.call(transition).node();\n    };\n    chart();\n    return () => {\n      svgElement.remove();\n    };\n  });\n\n  return <svg ref={ref} className=\"min-h-[50vw] w-[50vw]\"></svg>;\n};\n"],"names":["interpolateRgb","ref","useRef","height","width","radius","step","theta","data","_","i","r","a","useEffect","svgElement","d3.select","currentTransform","svg","g","x","y","d","d3.interpolateRainbow","transition","d3.interpolateZoom","t","transform","jsx"],"mappings":"yoBAGA,MAAAA,EAAe,IAAM,CACb,MAAAC,EAAMC,SAA6B,IAAI,EACvCC,EAAS,IACTC,EAAQ,IAERC,EAAS,EAETC,EAAOD,EAAS,EAChBE,EAAQ,KAAK,IAAM,EAAI,KAAK,KAAK,CAAC,GAElCC,EAAmB,MAAM,KAAK,CAAE,OAAQ,GAAK,EAAG,CAACC,EAAGC,IAAM,CACxD,MAAAC,EAAIL,EAAO,KAAK,KAAMI,GAAK,EAAI,EACnCE,EAAIL,EAAQG,EACd,MAAO,CAACN,EAAQ,EAAIO,EAAI,KAAK,IAAIC,CAAC,EAAGT,EAAS,EAAIQ,EAAI,KAAK,IAAIC,CAAC,CAAC,CAAA,CAClE,EACDC,OAAAA,EAAAA,UAAU,IAAM,CACd,MAAMC,EAAaC,EAAUd,EAAI,OAAO,EA2ClC,OAzCQ,IAAM,CAClB,IAAIe,EAAgC,CAACZ,EAAQ,EAAGD,EAAS,EAAGA,CAAM,EAE5D,MAAAc,EAAMH,EAAW,KAAK,UAAW,CAAC,EAAG,EAAGV,EAAOD,CAAM,CAAC,EAEtDe,EAAID,EAAI,OAAO,GAAG,EAExBC,EAAE,UAAU,QAAQ,EACjB,KAAKV,CAAI,EACT,KAAK,QAAQ,EACb,KAAK,KAAM,CAAC,CAACW,CAAC,IAAMA,CAAC,EACrB,KAAK,KAAM,CAAC,CAAA,CAAGC,CAAC,IAAMA,CAAC,EACvB,KAAK,IAAKf,CAAM,EAChB,KAAK,OAAQ,CAACgB,EAAGX,IAAMY,EAAsBZ,EAAI,GAAG,CAAC,EAExD,SAASa,GAAa,CACd,MAAAF,EAAIb,EAAK,KAAK,MAAM,KAAK,OAAO,EAAIA,EAAK,MAAM,CAAC,EAChDE,EAAIc,EAAmBR,EAAkB,CAC7C,GAAGK,EACHhB,EAAS,EAAI,CAAA,CACC,EAEda,EAAA,aACC,MAAM,GAAG,EACT,SAASR,EAAE,QAAQ,EACnB,UACC,YACA,IAAWe,GAAAC,EAAWV,EAAmBN,EAAEe,CAAC,CAAE,CAAA,EAE/C,GAAG,MAAOF,CAAU,CAAA,CAGzB,SAASG,EAAU,CAACP,EAAGC,EAAGT,CAAC,EAAG,CACrB,MAAA;AAAA,kBACGP,EAAQ,CAAC,KAAKD,EAAS,CAAC;AAAA,cAC5BA,EAASQ,CAAC;AAAA,kBACN,CAACQ,CAAC,KAAK,CAACC,CAAC;AAAA,KAAA,CAGrB,OAAOH,EAAI,KAAKM,CAAU,EAAE,KAAK,CACnC,GACM,EACC,IAAM,CACXT,EAAW,OAAO,CACpB,CAAA,CACD,EAEOa,EAAAA,IAAA,MAAA,CAAI,IAAA1B,EAAU,UAAU,uBAAwB,CAAA,CAC1D"}