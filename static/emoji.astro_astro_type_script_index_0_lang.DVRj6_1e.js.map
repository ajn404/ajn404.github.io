{"version":3,"file":"emoji.astro_astro_type_script_index_0_lang.DVRj6_1e.js","sources":["../../node_modules/.pnpm/emoji-picker-element@1.26.3/node_modules/emoji-picker-element/database.js","../../node_modules/.pnpm/emoji-picker-element@1.26.3/node_modules/emoji-picker-element/picker.js","../../src/components/astro/more/emoji.astro?astro&type=script&index=0&lang.ts"],"sourcesContent":["function assertNonEmptyString (str) {\n  if (typeof str !== 'string' || !str) {\n    throw new Error('expected a non-empty string, got: ' + str)\n  }\n}\n\nfunction assertNumber (number) {\n  if (typeof number !== 'number') {\n    throw new Error('expected a number, got: ' + number)\n  }\n}\n\nconst DB_VERSION_CURRENT = 1;\nconst DB_VERSION_INITIAL = 1;\nconst STORE_EMOJI = 'emoji';\nconst STORE_KEYVALUE = 'keyvalue';\nconst STORE_FAVORITES = 'favorites';\nconst FIELD_TOKENS = 'tokens';\nconst INDEX_TOKENS = 'tokens';\nconst FIELD_UNICODE = 'unicode';\nconst INDEX_COUNT = 'count';\nconst FIELD_GROUP = 'group';\nconst FIELD_ORDER = 'order';\nconst INDEX_GROUP_AND_ORDER = 'group-order';\nconst KEY_ETAG = 'eTag';\nconst KEY_URL = 'url';\nconst KEY_PREFERRED_SKINTONE = 'skinTone';\nconst MODE_READONLY = 'readonly';\nconst MODE_READWRITE = 'readwrite';\nconst INDEX_SKIN_UNICODE = 'skinUnicodes';\nconst FIELD_SKIN_UNICODE = 'skinUnicodes';\n\nconst DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';\nconst DEFAULT_LOCALE = 'en';\n\n// like lodash's uniqBy but much smaller\nfunction uniqBy (arr, func) {\n  const set = new Set();\n  const res = [];\n  for (const item of arr) {\n    const key = func(item);\n    if (!set.has(key)) {\n      set.add(key);\n      res.push(item);\n    }\n  }\n  return res\n}\n\nfunction uniqEmoji (emojis) {\n  return uniqBy(emojis, _ => _.unicode)\n}\n\nfunction initialMigration (db) {\n  function createObjectStore (name, keyPath, indexes) {\n    const store = keyPath\n      ? db.createObjectStore(name, { keyPath })\n      : db.createObjectStore(name);\n    if (indexes) {\n      for (const [indexName, [keyPath, multiEntry]] of Object.entries(indexes)) {\n        store.createIndex(indexName, keyPath, { multiEntry });\n      }\n    }\n    return store\n  }\n\n  createObjectStore(STORE_KEYVALUE);\n  createObjectStore(STORE_EMOJI, /* keyPath */ FIELD_UNICODE, {\n    [INDEX_TOKENS]: [FIELD_TOKENS, /* multiEntry */ true],\n    [INDEX_GROUP_AND_ORDER]: [[FIELD_GROUP, FIELD_ORDER]],\n    [INDEX_SKIN_UNICODE]: [FIELD_SKIN_UNICODE, /* multiEntry */ true]\n  });\n  createObjectStore(STORE_FAVORITES, undefined, {\n    [INDEX_COUNT]: ['']\n  });\n}\n\nconst openIndexedDBRequests = {};\nconst databaseCache = {};\nconst onCloseListeners = {};\n\nfunction handleOpenOrDeleteReq (resolve, reject, req) {\n  // These things are almost impossible to test with fakeIndexedDB sadly\n  /* istanbul ignore next */\n  req.onerror = () => reject(req.error);\n  /* istanbul ignore next */\n  req.onblocked = () => reject(new Error('IDB blocked'));\n  req.onsuccess = () => resolve(req.result);\n}\n\nasync function createDatabase (dbName) {\n  const db = await new Promise((resolve, reject) => {\n    const req = indexedDB.open(dbName, DB_VERSION_CURRENT);\n    openIndexedDBRequests[dbName] = req;\n    req.onupgradeneeded = e => {\n      // Technically there is only one version, so we don't need this `if` check\n      // But if an old version of the JS is in another browser tab\n      // and it gets upgraded in the future and we have a new DB version, well...\n      // better safe than sorry.\n      /* istanbul ignore else */\n      if (e.oldVersion < DB_VERSION_INITIAL) {\n        initialMigration(req.result);\n      }\n    };\n    handleOpenOrDeleteReq(resolve, reject, req);\n  });\n  // Handle abnormal closes, e.g. \"delete database\" in chrome dev tools.\n  // No need for removeEventListener, because once the DB can no longer\n  // fire \"close\" events, it will auto-GC.\n  // Unfortunately cannot test in fakeIndexedDB: https://github.com/dumbmatter/fakeIndexedDB/issues/50\n  /* istanbul ignore next */\n  db.onclose = () => closeDatabase(dbName);\n  return db\n}\n\nfunction openDatabase (dbName) {\n  if (!databaseCache[dbName]) {\n    databaseCache[dbName] = createDatabase(dbName);\n  }\n  return databaseCache[dbName]\n}\n\nfunction dbPromise (db, storeName, readOnlyOrReadWrite, cb) {\n  return new Promise((resolve, reject) => {\n    // Use relaxed durability because neither the emoji data nor the favorites/preferred skin tone\n    // are really irreplaceable data. IndexedDB is just a cache in this case.\n    const txn = db.transaction(storeName, readOnlyOrReadWrite, { durability: 'relaxed' });\n    const store = typeof storeName === 'string'\n      ? txn.objectStore(storeName)\n      : storeName.map(name => txn.objectStore(name));\n    let res;\n    cb(store, txn, (result) => {\n      res = result;\n    });\n\n    txn.oncomplete = () => resolve(res);\n    /* istanbul ignore next */\n    txn.onerror = () => reject(txn.error);\n  })\n}\n\nfunction closeDatabase (dbName) {\n  // close any open requests\n  const req = openIndexedDBRequests[dbName];\n  const db = req && req.result;\n  if (db) {\n    db.close();\n    const listeners = onCloseListeners[dbName];\n    /* istanbul ignore else */\n    if (listeners) {\n      for (const listener of listeners) {\n        listener();\n      }\n    }\n  }\n  delete openIndexedDBRequests[dbName];\n  delete databaseCache[dbName];\n  delete onCloseListeners[dbName];\n}\n\nfunction deleteDatabase (dbName) {\n  return new Promise((resolve, reject) => {\n    // close any open requests\n    closeDatabase(dbName);\n    const req = indexedDB.deleteDatabase(dbName);\n    handleOpenOrDeleteReq(resolve, reject, req);\n  })\n}\n\n// The \"close\" event occurs during an abnormal shutdown, e.g. a user clearing their browser data.\n// However, it doesn't occur with the normal \"close\" event, so we handle that separately.\n// https://www.w3.org/TR/IndexedDB/#close-a-database-connection\nfunction addOnCloseListener (dbName, listener) {\n  let listeners = onCloseListeners[dbName];\n  if (!listeners) {\n    listeners = onCloseListeners[dbName] = [];\n  }\n  listeners.push(listener);\n}\n\n// list of emoticons that don't match a simple \\W+ regex\n// extracted using:\n// require('emoji-picker-element-data/en/emojibase/data.json').map(_ => _.emoticon).filter(Boolean).filter(_ => !/^\\W+$/.test(_))\nconst irregularEmoticons = new Set([\n  ':D', 'XD', \":'D\", 'O:)',\n  ':X', ':P', ';P', 'XP',\n  ':L', ':Z', ':j', '8D',\n  'XO', '8)', ':B', ':O',\n  ':S', \":'o\", 'Dx', 'X(',\n  'D:', ':C', '>0)', ':3',\n  '</3', '<3', '\\\\M/', ':E',\n  '8#'\n]);\n\nfunction extractTokens (str) {\n  return str\n    .split(/[\\s_]+/)\n    .map(word => {\n      if (!word.match(/\\w/) || irregularEmoticons.has(word)) {\n        // for pure emoticons like :) or :-), just leave them as-is\n        return word.toLowerCase()\n      }\n\n      return word\n        .replace(/[)(:,]/g, '')\n        .replace(/’/g, \"'\")\n        .toLowerCase()\n    }).filter(Boolean)\n}\n\nconst MIN_SEARCH_TEXT_LENGTH = 2;\n\n// This is an extra step in addition to extractTokens(). The difference here is that we expect\n// the input to have already been run through extractTokens(). This is useful for cases like\n// emoticons, where we don't want to do any tokenization (because it makes no sense to split up\n// \">:)\" by the colon) but we do want to lowercase it to have consistent search results, so that\n// the user can type ':P' or ':p' and still get the same result.\nfunction normalizeTokens (str) {\n  return str\n    .filter(Boolean)\n    .map(_ => _.toLowerCase())\n    .filter(_ => _.length >= MIN_SEARCH_TEXT_LENGTH)\n}\n\n// Transform emoji data for storage in IDB\nfunction transformEmojiData (emojiData) {\n  const res = emojiData.map(({ annotation, emoticon, group, order, shortcodes, skins, tags, emoji, version }) => {\n    const tokens = [...new Set(\n      normalizeTokens([\n        ...(shortcodes || []).map(extractTokens).flat(),\n        ...(tags || []).map(extractTokens).flat(),\n        ...extractTokens(annotation),\n        emoticon\n      ])\n    )].sort();\n    const res = {\n      annotation,\n      group,\n      order,\n      tags,\n      tokens,\n      unicode: emoji,\n      version\n    };\n    if (emoticon) {\n      res.emoticon = emoticon;\n    }\n    if (shortcodes) {\n      res.shortcodes = shortcodes;\n    }\n    if (skins) {\n      res.skinTones = [];\n      res.skinUnicodes = [];\n      res.skinVersions = [];\n      for (const { tone, emoji, version } of skins) {\n        res.skinTones.push(tone);\n        res.skinUnicodes.push(emoji);\n        res.skinVersions.push(version);\n      }\n    }\n    return res\n  });\n  return res\n}\n\n// helper functions that help compress the code better\n\nfunction callStore (store, method, key, cb) {\n  store[method](key).onsuccess = e => (cb && cb(e.target.result));\n}\n\nfunction getIDB (store, key, cb) {\n  callStore(store, 'get', key, cb);\n}\n\nfunction getAllIDB (store, key, cb) {\n  callStore(store, 'getAll', key, cb);\n}\n\nfunction commit (txn) {\n  /* istanbul ignore else */\n  if (txn.commit) {\n    txn.commit();\n  }\n}\n\n// like lodash's minBy\nfunction minBy (array, func) {\n  let minItem = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const item = array[i];\n    if (func(minItem) > func(item)) {\n      minItem = item;\n    }\n  }\n  return minItem\n}\n\n// return an array of results representing all items that are found in each one of the arrays\n//\n\nfunction findCommonMembers (arrays, uniqByFunc) {\n  const shortestArray = minBy(arrays, _ => _.length);\n  const results = [];\n  for (const item of shortestArray) {\n    // if this item is included in every array in the intermediate results, add it to the final results\n    if (!arrays.some(array => array.findIndex(_ => uniqByFunc(_) === uniqByFunc(item)) === -1)) {\n      results.push(item);\n    }\n  }\n  return results\n}\n\nasync function isEmpty (db) {\n  return !(await get(db, STORE_KEYVALUE, KEY_URL))\n}\n\nasync function hasData (db, url, eTag) {\n  const [oldETag, oldUrl] = await Promise.all([KEY_ETAG, KEY_URL]\n    .map(key => get(db, STORE_KEYVALUE, key)));\n  return (oldETag === eTag && oldUrl === url)\n}\n\nasync function doFullDatabaseScanForSingleResult (db, predicate) {\n  // This batching algorithm is just a perf improvement over a basic\n  // cursor. The BATCH_SIZE is an estimate of what would give the best\n  // perf for doing a full DB scan (worst case).\n  //\n  // Mini-benchmark for determining the best batch size:\n  //\n  // PERF=1 pnpm build:rollup && pnpm test:adhoc\n  //\n  // (async () => {\n  //   performance.mark('start')\n  //   await $('emoji-picker').database.getEmojiByShortcode('doesnotexist')\n  //   performance.measure('total', 'start')\n  //   console.log(performance.getEntriesByName('total').slice(-1)[0].duration)\n  // })()\n  const BATCH_SIZE = 50; // Typically around 150ms for 6x slowdown in Chrome for above benchmark\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    let lastKey;\n\n    const processNextBatch = () => {\n      emojiStore.getAll(lastKey && IDBKeyRange.lowerBound(lastKey, true), BATCH_SIZE).onsuccess = e => {\n        const results = e.target.result;\n        for (const result of results) {\n          lastKey = result.unicode;\n          if (predicate(result)) {\n            return cb(result)\n          }\n        }\n        if (results.length < BATCH_SIZE) {\n          return cb()\n        }\n        processNextBatch();\n      };\n    };\n    processNextBatch();\n  })\n}\n\nasync function loadData (db, emojiData, url, eTag) {\n  try {\n    const transformedData = transformEmojiData(emojiData);\n    await dbPromise(db, [STORE_EMOJI, STORE_KEYVALUE], MODE_READWRITE, ([emojiStore, metaStore], txn) => {\n      let oldETag;\n      let oldUrl;\n      let todo = 0;\n\n      function checkFetched () {\n        if (++todo === 2) { // 2 requests made\n          onFetched();\n        }\n      }\n\n      function onFetched () {\n        if (oldETag === eTag && oldUrl === url) {\n          // check again within the transaction to guard against concurrency, e.g. multiple browser tabs\n          return\n        }\n        // delete old data\n        emojiStore.clear();\n        // insert new data\n        for (const data of transformedData) {\n          emojiStore.put(data);\n        }\n        metaStore.put(eTag, KEY_ETAG);\n        metaStore.put(url, KEY_URL);\n        commit(txn);\n      }\n\n      getIDB(metaStore, KEY_ETAG, result => {\n        oldETag = result;\n        checkFetched();\n      });\n\n      getIDB(metaStore, KEY_URL, result => {\n        oldUrl = result;\n        checkFetched();\n      });\n    });\n  } finally {\n  }\n}\n\nasync function getEmojiByGroup (db, group) {\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    const range = IDBKeyRange.bound([group, 0], [group + 1, 0], false, true);\n    getAllIDB(emojiStore.index(INDEX_GROUP_AND_ORDER), range, cb);\n  })\n}\n\nasync function getEmojiBySearchQuery (db, query) {\n  const tokens = normalizeTokens(extractTokens(query));\n\n  if (!tokens.length) {\n    return []\n  }\n\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    // get all results that contain all tokens (i.e. an AND query)\n    const intermediateResults = [];\n\n    const checkDone = () => {\n      if (intermediateResults.length === tokens.length) {\n        onDone();\n      }\n    };\n\n    const onDone = () => {\n      const results = findCommonMembers(intermediateResults, _ => _.unicode);\n      cb(results.sort((a, b) => a.order < b.order ? -1 : 1));\n    };\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const range = i === tokens.length - 1\n        ? IDBKeyRange.bound(token, token + '\\uffff', false, true) // treat last token as a prefix search\n        : IDBKeyRange.only(token); // treat all other tokens as an exact match\n      getAllIDB(emojiStore.index(INDEX_TOKENS), range, result => {\n        intermediateResults.push(result);\n        checkDone();\n      });\n    }\n  })\n}\n\n// This could have been implemented as an IDB index on shortcodes, but it seemed wasteful to do that\n// when we can already query by tokens and this will give us what we're looking for 99.9% of the time\nasync function getEmojiByShortcode (db, shortcode) {\n  const emojis = await getEmojiBySearchQuery(db, shortcode);\n\n  // In very rare cases (e.g. the shortcode \"v\" as in \"v for victory\"), we cannot search because\n  // there are no usable tokens (too short in this case). In that case, we have to do an inefficient\n  // full-database scan, which I believe is an acceptable tradeoff for not having to have an extra\n  // index on shortcodes.\n\n  if (!emojis.length) {\n    const predicate = _ => ((_.shortcodes || []).includes(shortcode.toLowerCase()));\n    return (await doFullDatabaseScanForSingleResult(db, predicate)) || null\n  }\n\n  return emojis.filter(_ => {\n    const lowerShortcodes = (_.shortcodes || []).map(_ => _.toLowerCase());\n    return lowerShortcodes.includes(shortcode.toLowerCase())\n  })[0] || null\n}\n\nasync function getEmojiByUnicode (db, unicode) {\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => (\n    getIDB(emojiStore, unicode, result => {\n      if (result) {\n        return cb(result)\n      }\n      getIDB(emojiStore.index(INDEX_SKIN_UNICODE), unicode, result => cb(result || null));\n    })\n  ))\n}\n\nfunction get (db, storeName, key) {\n  return dbPromise(db, storeName, MODE_READONLY, (store, txn, cb) => (\n    getIDB(store, key, cb)\n  ))\n}\n\nfunction set (db, storeName, key, value) {\n  return dbPromise(db, storeName, MODE_READWRITE, (store, txn) => {\n    store.put(value, key);\n    commit(txn);\n  })\n}\n\nfunction incrementFavoriteEmojiCount (db, unicode) {\n  return dbPromise(db, STORE_FAVORITES, MODE_READWRITE, (store, txn) => (\n    getIDB(store, unicode, result => {\n      store.put((result || 0) + 1, unicode);\n      commit(txn);\n    })\n  ))\n}\n\nfunction getTopFavoriteEmoji (db, customEmojiIndex, limit) {\n  if (limit === 0) {\n    return []\n  }\n  return dbPromise(db, [STORE_FAVORITES, STORE_EMOJI], MODE_READONLY, ([favoritesStore, emojiStore], txn, cb) => {\n    const results = [];\n    favoritesStore.index(INDEX_COUNT).openCursor(undefined, 'prev').onsuccess = e => {\n      const cursor = e.target.result;\n      if (!cursor) { // no more results\n        return cb(results)\n      }\n\n      function addResult (result) {\n        results.push(result);\n        if (results.length === limit) {\n          return cb(results) // done, reached the limit\n        }\n        cursor.continue();\n      }\n\n      const unicodeOrName = cursor.primaryKey;\n      const custom = customEmojiIndex.byName(unicodeOrName);\n      if (custom) {\n        return addResult(custom)\n      }\n      // This could be done in parallel (i.e. make the cursor and the get()s parallelized),\n      // but my testing suggests it's not actually faster.\n      getIDB(emojiStore, unicodeOrName, emoji => {\n        if (emoji) {\n          return addResult(emoji)\n        }\n        // emoji not found somehow, ignore (may happen if custom emoji change)\n        cursor.continue();\n      });\n    };\n  })\n}\n\n// trie data structure for prefix searches\n// loosely based on https://github.com/nolanlawson/substring-trie\n\nconst CODA_MARKER = ''; // marks the end of the string\n\nfunction trie (arr, itemToTokens) {\n  const map = new Map();\n  for (const item of arr) {\n    const tokens = itemToTokens(item);\n    for (const token of tokens) {\n      let currentMap = map;\n      for (let i = 0; i < token.length; i++) {\n        const char = token.charAt(i);\n        let nextMap = currentMap.get(char);\n        if (!nextMap) {\n          nextMap = new Map();\n          currentMap.set(char, nextMap);\n        }\n        currentMap = nextMap;\n      }\n      let valuesAtCoda = currentMap.get(CODA_MARKER);\n      if (!valuesAtCoda) {\n        valuesAtCoda = [];\n        currentMap.set(CODA_MARKER, valuesAtCoda);\n      }\n      valuesAtCoda.push(item);\n    }\n  }\n\n  const search = (query, exact) => {\n    let currentMap = map;\n    for (let i = 0; i < query.length; i++) {\n      const char = query.charAt(i);\n      const nextMap = currentMap.get(char);\n      if (nextMap) {\n        currentMap = nextMap;\n      } else {\n        return []\n      }\n    }\n\n    if (exact) {\n      const results = currentMap.get(CODA_MARKER);\n      return results || []\n    }\n\n    const results = [];\n    // traverse\n    const queue = [currentMap];\n    while (queue.length) {\n      const currentMap = queue.shift();\n      const entriesSortedByKey = [...currentMap.entries()].sort((a, b) => a[0] < b[0] ? -1 : 1);\n      for (const [key, value] of entriesSortedByKey) {\n        if (key === CODA_MARKER) { // CODA_MARKER always comes first; it's the empty string\n          results.push(...value);\n        } else {\n          queue.push(value);\n        }\n      }\n    }\n    return results\n  };\n\n  return search\n}\n\nconst requiredKeys$1 = [\n  'name',\n  'url'\n];\n\nfunction assertCustomEmojis (customEmojis) {\n  const isArray = customEmojis && Array.isArray(customEmojis);\n  const firstItemIsFaulty = isArray &&\n    customEmojis.length &&\n    (!customEmojis[0] || requiredKeys$1.some(key => !(key in customEmojis[0])));\n  if (!isArray || firstItemIsFaulty) {\n    throw new Error('Custom emojis are in the wrong format')\n  }\n}\n\nfunction customEmojiIndex (customEmojis) {\n  assertCustomEmojis(customEmojis);\n\n  const sortByName = (a, b) => a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1;\n\n  //\n  // all()\n  //\n  const all = customEmojis.sort(sortByName);\n\n  //\n  // search()\n  //\n  const emojiToTokens = emoji => {\n    const set = new Set();\n    if (emoji.shortcodes) {\n      for (const shortcode of emoji.shortcodes) {\n        for (const token of extractTokens(shortcode)) {\n          set.add(token);\n        }\n      }\n    }\n    return set\n  };\n  const searchTrie = trie(customEmojis, emojiToTokens);\n  const searchByExactMatch = _ => searchTrie(_, true);\n  const searchByPrefix = _ => searchTrie(_, false);\n\n  // Search by query for custom emoji. Similar to how we do this in IDB, the last token\n  // is treated as a prefix search, but every other one is treated as an exact match.\n  // Then we AND the results together\n  const search = query => {\n    const tokens = extractTokens(query);\n    const intermediateResults = tokens.map((token, i) => (\n      (i < tokens.length - 1 ? searchByExactMatch : searchByPrefix)(token)\n    ));\n    return findCommonMembers(intermediateResults, _ => _.name).sort(sortByName)\n  };\n\n  //\n  // byShortcode, byName\n  //\n  const shortcodeToEmoji = new Map();\n  const nameToEmoji = new Map();\n  for (const customEmoji of customEmojis) {\n    nameToEmoji.set(customEmoji.name.toLowerCase(), customEmoji);\n    for (const shortcode of (customEmoji.shortcodes || [])) {\n      shortcodeToEmoji.set(shortcode.toLowerCase(), customEmoji);\n    }\n  }\n\n  const byShortcode = shortcode => shortcodeToEmoji.get(shortcode.toLowerCase());\n  const byName = name => nameToEmoji.get(name.toLowerCase());\n\n  return {\n    all,\n    search,\n    byShortcode,\n    byName\n  }\n}\n\nconst isFirefoxContentScript = typeof wrappedJSObject !== 'undefined';\n\n// remove some internal implementation details, i.e. the \"tokens\" array on the emoji object\n// essentially, convert the emoji from the version stored in IDB to the version used in-memory\nfunction cleanEmoji (emoji) {\n  if (!emoji) {\n    return emoji\n  }\n  // if inside a Firefox content script, need to clone the emoji object to prevent Firefox from complaining about\n  // cross-origin object. See: https://github.com/nolanlawson/emoji-picker-element/issues/356\n  /* istanbul ignore if */\n  if (isFirefoxContentScript) {\n    emoji = structuredClone(emoji);\n  }\n  delete emoji.tokens;\n  if (emoji.skinTones) {\n    const len = emoji.skinTones.length;\n    emoji.skins = Array(len);\n    for (let i = 0; i < len; i++) {\n      emoji.skins[i] = {\n        tone: emoji.skinTones[i],\n        unicode: emoji.skinUnicodes[i],\n        version: emoji.skinVersions[i]\n      };\n    }\n    delete emoji.skinTones;\n    delete emoji.skinUnicodes;\n    delete emoji.skinVersions;\n  }\n  return emoji\n}\n\nfunction warnETag (eTag) {\n  if (!eTag) {\n    console.warn('emoji-picker-element is more efficient if the dataSource server exposes an ETag header.');\n  }\n}\n\nconst requiredKeys = [\n  'annotation',\n  'emoji',\n  'group',\n  'order',\n  'version'\n];\n\nfunction assertEmojiData (emojiData) {\n  if (!emojiData ||\n    !Array.isArray(emojiData) ||\n    !emojiData[0] ||\n    (typeof emojiData[0] !== 'object') ||\n    requiredKeys.some(key => (!(key in emojiData[0])))) {\n    throw new Error('Emoji data is in the wrong format')\n  }\n}\n\nfunction assertStatus (response, dataSource) {\n  if (Math.floor(response.status / 100) !== 2) {\n    throw new Error('Failed to fetch: ' + dataSource + ':  ' + response.status)\n  }\n}\n\nasync function getETag (dataSource) {\n  const response = await fetch(dataSource, { method: 'HEAD' });\n  assertStatus(response, dataSource);\n  const eTag = response.headers.get('etag');\n  warnETag(eTag);\n  return eTag\n}\n\nasync function getETagAndData (dataSource) {\n  const response = await fetch(dataSource);\n  assertStatus(response, dataSource);\n  const eTag = response.headers.get('etag');\n  warnETag(eTag);\n  const emojiData = await response.json();\n  assertEmojiData(emojiData);\n  return [eTag, emojiData]\n}\n\n// TODO: including these in blob-util.ts causes typedoc to generate docs for them,\n// even with --excludePrivate ¯\\_(ツ)_/¯\n/** @private */\n/**\n * Convert an `ArrayBuffer` to a binary string.\n *\n * Example:\n *\n * ```js\n * var myString = blobUtil.arrayBufferToBinaryString(arrayBuff)\n * ```\n *\n * @param buffer - array buffer\n * @returns binary string\n */\nfunction arrayBufferToBinaryString(buffer) {\n    var binary = '';\n    var bytes = new Uint8Array(buffer);\n    var length = bytes.byteLength;\n    var i = -1;\n    while (++i < length) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return binary;\n}\n/**\n * Convert a binary string to an `ArrayBuffer`.\n *\n * ```js\n * var myBuffer = blobUtil.binaryStringToArrayBuffer(binaryString)\n * ```\n *\n * @param binary - binary string\n * @returns array buffer\n */\nfunction binaryStringToArrayBuffer(binary) {\n    var length = binary.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    var i = -1;\n    while (++i < length) {\n        arr[i] = binary.charCodeAt(i);\n    }\n    return buf;\n}\n\n// generate a checksum based on the stringified JSON\nasync function jsonChecksum (object) {\n  const inString = JSON.stringify(object);\n  let inBuffer = binaryStringToArrayBuffer(inString);\n\n  // this does not need to be cryptographically secure, SHA-1 is fine\n  const outBuffer = await crypto.subtle.digest('SHA-1', inBuffer);\n  const outBinString = arrayBufferToBinaryString(outBuffer);\n  const res = btoa(outBinString);\n  return res\n}\n\nasync function doCheckForUpdates (db, dataSource) {\n  // just do a simple HEAD request first to see if the eTags match\n  let emojiData;\n  let eTag = await getETag(dataSource);\n  if (!eTag) { // work around lack of ETag/Access-Control-Expose-Headers\n    const eTagAndData = await getETagAndData(dataSource);\n    eTag = eTagAndData[0];\n    emojiData = eTagAndData[1];\n    if (!eTag) {\n      eTag = await jsonChecksum(emojiData);\n    }\n  }\n  if (await hasData(db, dataSource, eTag)) ; else {\n    if (!emojiData) {\n      const eTagAndData = await getETagAndData(dataSource);\n      emojiData = eTagAndData[1];\n    }\n    await loadData(db, emojiData, dataSource, eTag);\n  }\n}\n\nasync function loadDataForFirstTime (db, dataSource) {\n  let [eTag, emojiData] = await getETagAndData(dataSource);\n  if (!eTag) {\n    // Handle lack of support for ETag or Access-Control-Expose-Headers\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers#Browser_compatibility\n    eTag = await jsonChecksum(emojiData);\n  }\n\n  await loadData(db, emojiData, dataSource, eTag);\n}\n\nasync function checkForUpdates (db, dataSource) {\n  try {\n    await doCheckForUpdates(db, dataSource);\n  } catch (err) {\n    // Checking for updates is not a critical operation, and it can fail if e.g. the picker is quickly removed and\n    // re-added to the DOM. In those cases, we may get an IndexedDB InvalidStateError because we are attempting to close\n    // the database connection, possibly while another request is inflight. So there's effectively no way to prevent\n    // InvalidStateErrors unless we were to carefully sequence our IndexedDB operations. Much more simply, we can just\n    // ignore IndexedDB InvalidStateErrors here and give users one less useless error message in their console.\n    if (err.name !== 'InvalidStateError') {\n      throw err\n    }\n  }\n}\n\nclass Database {\n  constructor ({ dataSource = DEFAULT_DATA_SOURCE, locale = DEFAULT_LOCALE, customEmoji = [] } = {}) {\n    this.dataSource = dataSource;\n    this.locale = locale;\n    this._dbName = `emoji-picker-element-${this.locale}`;\n    this._db = undefined;\n    this._lazyUpdate = undefined;\n    this._custom = customEmojiIndex(customEmoji);\n\n    this._clear = this._clear.bind(this);\n    this._ready = this._init();\n  }\n\n  async _init () {\n    const db = this._db = await openDatabase(this._dbName);\n\n    addOnCloseListener(this._dbName, this._clear);\n    const dataSource = this.dataSource;\n    const empty = await isEmpty(db);\n\n    if (empty) {\n      await loadDataForFirstTime(db, dataSource);\n    } else { // offline-first - do an update asynchronously\n      this._lazyUpdate = checkForUpdates(db, dataSource);\n    }\n  }\n\n  async ready () {\n    const checkReady = async () => {\n      if (!this._ready) {\n        this._ready = this._init();\n      }\n      return this._ready\n    };\n    await checkReady();\n    // There's a possibility of a race condition where the element gets added, removed, and then added again\n    // with a particular timing, which would set the _db to undefined.\n    // We *could* do a while loop here, but that seems excessive and could lead to an infinite loop.\n    if (!this._db) {\n      await checkReady();\n    }\n  }\n\n  async getEmojiByGroup (group) {\n    assertNumber(group);\n    await this.ready();\n    return uniqEmoji(await getEmojiByGroup(this._db, group)).map(cleanEmoji)\n  }\n\n  async getEmojiBySearchQuery (query) {\n    assertNonEmptyString(query);\n    await this.ready();\n    const customs = this._custom.search(query);\n    const natives = uniqEmoji(await getEmojiBySearchQuery(this._db, query)).map(cleanEmoji);\n    return [\n      ...customs,\n      ...natives\n    ]\n  }\n\n  async getEmojiByShortcode (shortcode) {\n    assertNonEmptyString(shortcode);\n    await this.ready();\n    const custom = this._custom.byShortcode(shortcode);\n    if (custom) {\n      return custom\n    }\n    return cleanEmoji(await getEmojiByShortcode(this._db, shortcode))\n  }\n\n  async getEmojiByUnicodeOrName (unicodeOrName) {\n    assertNonEmptyString(unicodeOrName);\n    await this.ready();\n    const custom = this._custom.byName(unicodeOrName);\n    if (custom) {\n      return custom\n    }\n    return cleanEmoji(await getEmojiByUnicode(this._db, unicodeOrName))\n  }\n\n  async getPreferredSkinTone () {\n    await this.ready();\n    return (await get(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE)) || 0\n  }\n\n  async setPreferredSkinTone (skinTone) {\n    assertNumber(skinTone);\n    await this.ready();\n    return set(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE, skinTone)\n  }\n\n  async incrementFavoriteEmojiCount (unicodeOrName) {\n    assertNonEmptyString(unicodeOrName);\n    await this.ready();\n    return incrementFavoriteEmojiCount(this._db, unicodeOrName)\n  }\n\n  async getTopFavoriteEmoji (limit) {\n    assertNumber(limit);\n    await this.ready();\n    return (await getTopFavoriteEmoji(this._db, this._custom, limit)).map(cleanEmoji)\n  }\n\n  set customEmoji (customEmojis) {\n    this._custom = customEmojiIndex(customEmojis);\n  }\n\n  get customEmoji () {\n    return this._custom.all\n  }\n\n  async _shutdown () {\n    await this.ready(); // reopen if we've already been closed/deleted\n    try {\n      await this._lazyUpdate; // allow any lazy updates to process before closing/deleting\n    } catch (err) { /* ignore network errors (offline-first) */ }\n  }\n\n  // clear references to IDB, e.g. during a close event\n  _clear () {\n    // We don't need to call removeEventListener or remove the manual \"close\" listeners.\n    // The memory leak tests prove this is unnecessary. It's because:\n    // 1) IDBDatabases that can no longer fire \"close\" automatically have listeners GCed\n    // 2) we clear the manual close listeners in databaseLifecycle.js.\n    this._db = this._ready = this._lazyUpdate = undefined;\n  }\n\n  async close () {\n    await this._shutdown();\n    await closeDatabase(this._dbName);\n  }\n\n  async delete () {\n    await this._shutdown();\n    await deleteDatabase(this._dbName);\n  }\n}\n\nexport { Database as default };\n","import Database from './database.js';\n\n// via https://unpkg.com/browse/emojibase-data@6.0.0/meta/groups.json\nconst allGroups = [\n  [-1, '✨', 'custom'],\n  [0, '😀', 'smileys-emotion'],\n  [1, '👋', 'people-body'],\n  [3, '🐱', 'animals-nature'],\n  [4, '🍎', 'food-drink'],\n  [5, '🏠️', 'travel-places'],\n  [6, '⚽', 'activities'],\n  [7, '📝', 'objects'],\n  [8, '⛔️', 'symbols'],\n  [9, '🏁', 'flags']\n].map(([id, emoji, name]) => ({ id, emoji, name }));\n\nconst groups = allGroups.slice(1);\n\nconst MIN_SEARCH_TEXT_LENGTH = 2;\nconst NUM_SKIN_TONES = 6;\n\n/* istanbul ignore next */\nconst rIC = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n\n// check for ZWJ (zero width joiner) character\nfunction hasZwj (emoji) {\n  return emoji.unicode.includes('\\u200d')\n}\n\n// Find one good representative emoji from each version to test by checking its color.\n// Ideally it should have color in the center. For some inspiration, see:\n// https://about.gitlab.com/blog/2018/05/30/journey-in-native-unicode-emoji/\n//\n// Note that for certain versions (12.1, 13.1), there is no point in testing them explicitly, because\n// all the emoji from this version are compound-emoji from previous versions. So they would pass a color\n// test, even in browsers that display them as double emoji. (E.g. \"face in clouds\" might render as\n// \"face without mouth\" plus \"fog\".) These emoji can only be filtered using the width test,\n// which happens in checkZwjSupport.js.\nconst versionsAndTestEmoji = {\n  '🫩': 16, // face with bags under eyes\n  '🫨': 15.1, // shaking head, technically from v15 but see note above\n  '🫠': 14,\n  '🥲': 13.1, // smiling face with tear, technically from v13 but see note above\n  '🥻': 12.1, // sari, technically from v12 but see note above\n  '🥰': 11,\n  '🤩': 5,\n  '👱‍♀️': 4,\n  '🤣': 3,\n  '👁️‍🗨️': 2,\n  '😀': 1,\n  '😐️': 0.7,\n  '😃': 0.6\n};\n\nconst TIMEOUT_BEFORE_LOADING_MESSAGE = 1000; // 1 second\nconst DEFAULT_SKIN_TONE_EMOJI = '🖐️';\nconst DEFAULT_NUM_COLUMNS = 8;\n\n// Based on https://fivethirtyeight.com/features/the-100-most-used-emojis/ and\n// https://blog.emojipedia.org/facebook-reveals-most-and-least-used-emojis/ with\n// a bit of my own curation. (E.g. avoid the \"OK\" gesture because of connotations:\n// https://emojipedia.org/ok-hand/)\nconst MOST_COMMONLY_USED_EMOJI = [\n  '😊',\n  '😒',\n  '❤️',\n  '👍️',\n  '😍',\n  '😂',\n  '😭',\n  '☺️',\n  '😔',\n  '😩',\n  '😏',\n  '💕',\n  '🙌',\n  '😘'\n];\n\n// It's important to list Twemoji Mozilla before everything else, because Mozilla bundles their\n// own font on some platforms (notably Windows and Linux as of this writing). Typically, Mozilla\n// updates faster than the underlying OS, and we don't want to render older emoji in one font and\n// newer emoji in another font:\n// https://github.com/nolanlawson/emoji-picker-element/pull/268#issuecomment-1073347283\nconst FONT_FAMILY = '\"Twemoji Mozilla\",\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",' +\n  '\"Noto Color Emoji\",\"EmojiOne Color\",\"Android Emoji\",sans-serif';\n\n/* istanbul ignore next */\nconst DEFAULT_CATEGORY_SORTING = (a, b) => a < b ? -1 : a > b ? 1 : 0;\n\n// Test if an emoji is supported by rendering it to canvas and checking that the color is not black\n// See https://about.gitlab.com/blog/2018/05/30/journey-in-native-unicode-emoji/\n// and https://www.npmjs.com/package/if-emoji for inspiration\n// This implementation is largely borrowed from if-emoji, adding the font-family\n\n\nconst getTextFeature = (text, color) => {\n  const canvas = document.createElement('canvas');\n  canvas.width = canvas.height = 1;\n\n  const ctx = canvas.getContext('2d', {\n    // Improves the performance of `getImageData()`\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getContextAttributes#willreadfrequently\n    willReadFrequently: true\n  });\n  ctx.textBaseline = 'top';\n  ctx.font = `100px ${FONT_FAMILY}`;\n  ctx.fillStyle = color;\n  ctx.scale(0.01, 0.01);\n  ctx.fillText(text, 0, 0);\n\n  return ctx.getImageData(0, 0, 1, 1).data\n};\n\nconst compareFeatures = (feature1, feature2) => {\n  const feature1Str = [...feature1].join(',');\n  const feature2Str = [...feature2].join(',');\n  // This is RGBA, so for 0,0,0, we are checking that the first RGB is not all zeroes.\n  // Most of the time when unsupported this is 0,0,0,0, but on Chrome on Mac it is\n  // 0,0,0,61 - there is a transparency here.\n  return feature1Str === feature2Str && !feature1Str.startsWith('0,0,0,')\n};\n\nfunction testColorEmojiSupported (text) {\n  // Render white and black and then compare them to each other and ensure they're the same\n  // color, and neither one is black. This shows that the emoji was rendered in color.\n  const feature1 = getTextFeature(text, '#000');\n  const feature2 = getTextFeature(text, '#fff');\n  return feature1 && feature2 && compareFeatures(feature1, feature2)\n}\n\n// rather than check every emoji ever, which would be expensive, just check some representatives from the\n// different emoji releases to determine what the font supports\n\nfunction determineEmojiSupportLevel () {\n  const entries = Object.entries(versionsAndTestEmoji);\n  try {\n    // start with latest emoji and work backwards\n    for (const [emoji, version] of entries) {\n      if (testColorEmojiSupported(emoji)) {\n        return version\n      }\n    }\n  } catch (e) { // canvas error\n  } finally {\n  }\n  // In case of an error, be generous and just assume all emoji are supported (e.g. for canvas errors\n  // due to anti-fingerprinting add-ons). Better to show some gray boxes than nothing at all.\n  return entries[0][1] // first one in the list is the most recent version\n}\n\n// Check which emojis we know for sure aren't supported, based on Unicode version level\nlet promise;\nconst detectEmojiSupportLevel = () => {\n  if (!promise) {\n    // Delay so it can run while the IDB database is being created by the browser (on another thread).\n    // This helps especially with first load – we want to start pre-populating the database on the main thread,\n    // and then wait for IDB to commit everything, and while waiting we run this check.\n    promise = new Promise(resolve => (\n      rIC(() => (\n        resolve(determineEmojiSupportLevel()) // delay so ideally this can run while IDB is first populating\n      ))\n    ));\n  }\n  return promise\n};\n// determine which emojis containing ZWJ (zero width joiner) characters\n// are supported (rendered as one glyph) rather than unsupported (rendered as two or more glyphs)\nconst supportedZwjEmojis = new Map();\n\nconst VARIATION_SELECTOR = '\\ufe0f';\nconst SKINTONE_MODIFIER = '\\ud83c';\nconst ZWJ = '\\u200d';\nconst LIGHT_SKIN_TONE = 0x1F3FB;\nconst LIGHT_SKIN_TONE_MODIFIER = 0xdffb;\n\n// TODO: this is a naive implementation, we can improve it later\n// It's only used for the skintone picker, so as long as people don't customize with\n// really exotic emoji then it should work fine\nfunction applySkinTone (str, skinTone) {\n  if (skinTone === 0) {\n    return str\n  }\n  const zwjIndex = str.indexOf(ZWJ);\n  if (zwjIndex !== -1) {\n    return str.substring(0, zwjIndex) +\n      String.fromCodePoint(LIGHT_SKIN_TONE + skinTone - 1) +\n      str.substring(zwjIndex)\n  }\n  if (str.endsWith(VARIATION_SELECTOR)) {\n    str = str.substring(0, str.length - 1);\n  }\n  return str + SKINTONE_MODIFIER + String.fromCodePoint(LIGHT_SKIN_TONE_MODIFIER + skinTone - 1)\n}\n\nfunction halt (event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\n// Implementation left/right or up/down navigation, circling back when you\n// reach the start/end of the list\nfunction incrementOrDecrement (decrement, val, arr) {\n  val += (decrement ? -1 : 1);\n  if (val < 0) {\n    val = arr.length - 1;\n  } else if (val >= arr.length) {\n    val = 0;\n  }\n  return val\n}\n\n// like lodash's uniqBy but much smaller\nfunction uniqBy (arr, func) {\n  const set = new Set();\n  const res = [];\n  for (const item of arr) {\n    const key = func(item);\n    if (!set.has(key)) {\n      set.add(key);\n      res.push(item);\n    }\n  }\n  return res\n}\n\n// We don't need all the data on every emoji, and there are specific things we need\n// for the UI, so build a \"view model\" from the emoji object we got from the database\n\nfunction summarizeEmojisForUI (emojis, emojiSupportLevel) {\n  const toSimpleSkinsMap = skins => {\n    const res = {};\n    for (const skin of skins) {\n      // ignore arrays like [1, 2] with multiple skin tones\n      // also ignore variants that are in an unsupported emoji version\n      // (these do exist - variants from a different version than their base emoji)\n      if (typeof skin.tone === 'number' && skin.version <= emojiSupportLevel) {\n        res[skin.tone] = skin.unicode;\n      }\n    }\n    return res\n  };\n\n  return emojis.map(({ unicode, skins, shortcodes, url, name, category, annotation }) => ({\n    unicode,\n    name,\n    shortcodes,\n    url,\n    category,\n    annotation,\n    id: unicode || name,\n    skins: skins && toSimpleSkinsMap(skins)\n  }))\n}\n\n// import rAF from one place so that the bundle size is a bit smaller\nconst rAF = requestAnimationFrame;\n\n// \"Svelte action\"-like utility to detect layout changes via ResizeObserver.\n// If ResizeObserver is unsupported, we just use rAF once and don't bother to update.\n\n\nlet resizeObserverSupported = typeof ResizeObserver === 'function';\n\nfunction resizeObserverAction (node, abortSignal, onUpdate) {\n  let resizeObserver;\n  if (resizeObserverSupported) {\n    resizeObserver = new ResizeObserver(onUpdate);\n    resizeObserver.observe(node);\n  } else { // just run once, don't bother trying to track it\n    rAF(onUpdate);\n  }\n\n  // cleanup function (called on destroy)\n  abortSignal.addEventListener('abort', () => {\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n    }\n  });\n}\n\n// get the width of the text inside of a DOM node, via https://stackoverflow.com/a/59525891/680742\nfunction calculateTextWidth (node) {\n  // skip running this in jest/vitest because we don't need to check for emoji support in that environment\n  /* istanbul ignore else */\n  {\n    const range = document.createRange();\n    range.selectNode(node.firstChild);\n    return range.getBoundingClientRect().width\n  }\n}\n\nlet baselineEmojiWidth;\n\n/**\n * Check if the given emojis containing ZWJ characters are supported by the current browser (don't render\n * as double characters) and return true if all are supported.\n * @param zwjEmojisToCheck\n * @param baselineEmoji\n * @param emojiToDomNode\n */\nfunction checkZwjSupport (zwjEmojisToCheck, baselineEmoji, emojiToDomNode) {\n  let allSupported = true;\n  for (const emoji of zwjEmojisToCheck) {\n    const domNode = emojiToDomNode(emoji);\n    // sanity check to make sure the node is defined properly\n    /* istanbul ignore if */\n    if (!domNode) {\n      // This is a race condition that can occur when the component is unmounted/remounted\n      // It doesn't really matter what we do here since the old context is not going to render anymore.\n      // Just bail out of emoji support detection and return `allSupported=true` since the rendering context is gone\n      continue\n    }\n    const emojiWidth = calculateTextWidth(domNode);\n    if (typeof baselineEmojiWidth === 'undefined') { // calculate the baseline emoji width only once\n      baselineEmojiWidth = calculateTextWidth(baselineEmoji);\n    }\n    // On Windows, some supported emoji are ~50% bigger than the baseline emoji, but what we really want to guard\n    // against are the ones that are 2x the size, because those are truly broken (person with red hair = person with\n    // floating red wig, black cat = cat with black square, polar bear = bear with snowflake, etc.)\n    // So here we set the threshold at 1.8 times the size of the baseline emoji.\n    const supported = emojiWidth / 1.8 < baselineEmojiWidth;\n    supportedZwjEmojis.set(emoji.unicode, supported);\n\n    if (!supported) {\n      allSupported = false;\n    }\n  }\n  return allSupported\n}\n\n// like lodash's uniq\n\nfunction uniq (arr) {\n  return uniqBy(arr, _ => _)\n}\n\n// Note we put this in its own function outside Picker.js to avoid Svelte doing an invalidation on the \"setter\" here.\n// At best the invalidation is useless, at worst it can cause infinite loops:\n// https://github.com/nolanlawson/emoji-picker-element/pull/180\n// https://github.com/sveltejs/svelte/issues/6521\n// Also note tabpanelElement can be null if the element is disconnected immediately after connected\nfunction resetScrollTopIfPossible (element) {\n  /* istanbul ignore else */\n  if (element) { // Makes me nervous not to have this `if` guard\n    element.scrollTop = 0;\n  }\n}\n\nfunction getFromMap (cache, key, func) {\n  let cached = cache.get(key);\n  if (!cached) {\n    cached = func();\n    cache.set(key, cached);\n  }\n  return cached\n}\n\nfunction toString (value) {\n  return '' + value\n}\n\nfunction parseTemplate (htmlString) {\n  const template = document.createElement('template');\n  template.innerHTML = htmlString;\n  return template\n}\n\nconst parseCache = new WeakMap();\nconst domInstancesCache = new WeakMap();\n// This needs to be a symbol because it needs to be different from any possible output of a key function\nconst unkeyedSymbol = Symbol('un-keyed');\n\n// Not supported in Safari <=13\nconst hasReplaceChildren = 'replaceChildren' in Element.prototype;\nfunction replaceChildren (parentNode, newChildren) {\n  /* istanbul ignore else */\n  if (hasReplaceChildren) {\n    parentNode.replaceChildren(...newChildren);\n  } else { // minimal polyfill for Element.prototype.replaceChildren\n    parentNode.innerHTML = '';\n    parentNode.append(...newChildren);\n  }\n}\n\nfunction doChildrenNeedRerender (parentNode, newChildren) {\n  let oldChild = parentNode.firstChild;\n  let oldChildrenCount = 0;\n  // iterate using firstChild/nextSibling because browsers use a linked list under the hood\n  while (oldChild) {\n    const newChild = newChildren[oldChildrenCount];\n    // check if the old child and new child are the same\n    if (newChild !== oldChild) {\n      return true\n    }\n    oldChild = oldChild.nextSibling;\n    oldChildrenCount++;\n  }\n  // if new children length is different from old, we must re-render\n  return oldChildrenCount !== newChildren.length\n}\n\nfunction patchChildren (newChildren, instanceBinding) {\n  const { targetNode } = instanceBinding;\n  let { targetParentNode } = instanceBinding;\n\n  let needsRerender = false;\n\n  if (targetParentNode) { // already rendered once\n    needsRerender = doChildrenNeedRerender(targetParentNode, newChildren);\n  } else { // first render of list\n    needsRerender = true;\n    instanceBinding.targetNode = undefined; // placeholder node not needed anymore, free memory\n    instanceBinding.targetParentNode = targetParentNode = targetNode.parentNode;\n  }\n  // avoid re-rendering list if the dom nodes are exactly the same before and after\n  if (needsRerender) {\n    replaceChildren(targetParentNode, newChildren);\n  }\n}\n\nfunction patch (expressions, instanceBindings) {\n  for (const instanceBinding of instanceBindings) {\n    const {\n      targetNode,\n      currentExpression,\n      binding: {\n        expressionIndex,\n        attributeName,\n        attributeValuePre,\n        attributeValuePost\n      }\n    } = instanceBinding;\n\n    const expression = expressions[expressionIndex];\n\n    if (currentExpression === expression) {\n      // no need to update, same as before\n      continue\n    }\n\n    instanceBinding.currentExpression = expression;\n\n    if (attributeName) { // attribute replacement\n      if (expression === null) {\n        // null is treated as a special case by the framework - we don't render an attribute at all in this case\n        targetNode.removeAttribute(attributeName);\n      } else {\n        // attribute value is not null; set a new attribute\n        const newValue = attributeValuePre + toString(expression) + attributeValuePost;\n        targetNode.setAttribute(attributeName, newValue);\n      }\n    } else { // text node / child element / children replacement\n      let newNode;\n      if (Array.isArray(expression)) { // array of DOM elements produced by tag template literals\n        patchChildren(expression, instanceBinding);\n      } else if (expression instanceof Element) { // html tag template returning a DOM element\n        newNode = expression;\n        targetNode.replaceWith(newNode);\n      } else { // primitive - string, number, etc\n        // nodeValue is faster than textContent supposedly https://www.youtube.com/watch?v=LY6y3HbDVmg\n        // note we may be replacing the value in a placeholder text node\n        targetNode.nodeValue = toString(expression);\n      }\n      if (newNode) {\n        instanceBinding.targetNode = newNode;\n      }\n    }\n  }\n}\n\nfunction parse (tokens) {\n  let htmlString = '';\n\n  let withinTag = false;\n  let withinAttribute = false;\n  let elementIndexCounter = -1; // depth-first traversal order\n\n  const elementsToBindings = new Map();\n  const elementIndexes = [];\n\n  let skipTokenChars = 0;\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const token = tokens[i];\n    htmlString += token.slice(skipTokenChars);\n\n    if (i === len - 1) {\n      break // no need to process characters - no more expressions to be found\n    }\n\n    for (let j = 0; j < token.length; j++) {\n      const char = token.charAt(j);\n      switch (char) {\n        case '<': {\n          const nextChar = token.charAt(j + 1);\n          if (nextChar === '/') { // closing tag\n            // leaving an element\n            elementIndexes.pop();\n          } else { // not a closing tag\n            withinTag = true;\n            elementIndexes.push(++elementIndexCounter);\n          }\n          break\n        }\n        case '>': {\n          withinTag = false;\n          withinAttribute = false;\n          break\n        }\n        case '=': {\n          withinAttribute = true;\n          break\n        }\n      }\n    }\n\n    const elementIndex = elementIndexes[elementIndexes.length - 1];\n    const bindings = getFromMap(elementsToBindings, elementIndex, () => []);\n\n    let attributeName;\n    let attributeValuePre;\n    let attributeValuePost;\n    if (withinAttribute) {\n      // I never use single-quotes for attribute values in HTML, so just support double-quotes or no-quotes\n      const attributePreMatch = /(\\S+)=\"?([^\"=]*)$/.exec(token);\n      attributeName = attributePreMatch[1];\n      attributeValuePre = attributePreMatch[2];\n      const attributePostMatch = /^([^\">]*)(\"?)/.exec(tokens[i + 1]);\n      attributeValuePost = attributePostMatch[1];\n      // Optimization: remove the attribute itself, so we don't create a default attribute which is either empty or just\n      // the \"pre\" text, e.g. `<div foo>` or `<div foo=\"prefix\">`. It will be replaced by the expression anyway.\n      htmlString = htmlString.slice(0, -1 * attributePreMatch[0].length);\n      skipTokenChars = attributePostMatch[0].length;\n    } else {\n      skipTokenChars = 0;\n    }\n\n    const binding = {\n      attributeName,\n      attributeValuePre,\n      attributeValuePost,\n      expressionIndex: i\n    };\n\n    bindings.push(binding);\n\n    if (!withinTag && !withinAttribute) {\n      // Add a placeholder text node, so we can find it later. Note we only support one dynamic child text node\n      htmlString += ' ';\n    }\n  }\n\n  const template = parseTemplate(htmlString);\n\n  return {\n    template,\n    elementsToBindings\n  }\n}\n\nfunction applyBindings (bindings, element, instanceBindings) {\n  for (let i = 0; i < bindings.length; i++) {\n    const binding = bindings[i];\n\n    const targetNode = binding.attributeName\n      ? element // attribute binding, just use the element itself\n      : element.firstChild; // not an attribute binding, so has a placeholder text node\n\n    const instanceBinding = {\n      binding,\n      targetNode,\n      targetParentNode: undefined,\n      currentExpression: undefined\n    };\n\n    instanceBindings.push(instanceBinding);\n  }\n}\n\nfunction traverseAndSetupBindings (rootElement, elementsToBindings) {\n  const instanceBindings = [];\n\n  let topLevelBindings;\n  if (elementsToBindings.size === 1 && (topLevelBindings = elementsToBindings.get(0))) {\n    // Optimization for the common case where there's only one element and one binding\n    // Skip creating a TreeWalker entirely and just handle the root DOM element\n    applyBindings(topLevelBindings, rootElement, instanceBindings);\n  } else {\n    // traverse dom\n    const treeWalker = document.createTreeWalker(rootElement, NodeFilter.SHOW_ELEMENT);\n\n    let element = rootElement;\n    let elementIndex = -1;\n    do {\n      const bindings = elementsToBindings.get(++elementIndex);\n      if (bindings) {\n        applyBindings(bindings, element, instanceBindings);\n      }\n    } while ((element = treeWalker.nextNode()))\n  }\n\n  return instanceBindings\n}\n\nfunction parseHtml (tokens) {\n  // All templates and bound expressions are unique per tokens array\n  const { template, elementsToBindings } = getFromMap(parseCache, tokens, () => parse(tokens));\n\n  // When we parseHtml, we always return a fresh DOM instance ready to be updated\n  const dom = template.cloneNode(true).content.firstElementChild;\n  const instanceBindings = traverseAndSetupBindings(dom, elementsToBindings);\n\n  return function updateDomInstance (expressions) {\n    patch(expressions, instanceBindings);\n    return dom\n  }\n}\n\nfunction createFramework (state) {\n  const domInstances = getFromMap(domInstancesCache, state, () => new Map());\n  let domInstanceCacheKey = unkeyedSymbol;\n\n  function html (tokens, ...expressions) {\n    // Each unique lexical usage of map() is considered unique due to the html`` tagged template call it makes,\n    // which has lexically unique tokens. The unkeyed symbol is just used for html`` usage outside of a map().\n    const domInstancesForTokens = getFromMap(domInstances, tokens, () => new Map());\n    const updateDomInstance = getFromMap(domInstancesForTokens, domInstanceCacheKey, () => parseHtml(tokens));\n\n    return updateDomInstance(expressions) // update with expressions\n  }\n\n  function map (array, callback, keyFunction) {\n    return array.map((item, index) => {\n      const originalCacheKey = domInstanceCacheKey;\n      domInstanceCacheKey = keyFunction(item);\n      try {\n        return callback(item, index)\n      } finally {\n        domInstanceCacheKey = originalCacheKey;\n      }\n    })\n  }\n\n  return { map, html }\n}\n\nfunction render (container, state, helpers, events, actions, refs, abortSignal, actionContext, firstRender) {\n  const { labelWithSkin, titleForEmoji, unicodeWithSkin } = helpers;\n  const { html, map } = createFramework(state);\n\n  function emojiList (emojis, searchMode, prefix) {\n    return map(emojis, (emoji, i) => {\n      return html`<button role=\"${searchMode ? 'option' : 'menuitem'}\" aria-selected=\"${searchMode ? i === state.activeSearchItem : null}\" aria-label=\"${labelWithSkin(emoji, state.currentSkinTone)}\" title=\"${titleForEmoji(emoji)}\" class=\"${\n                'emoji' +\n                (searchMode && i === state.activeSearchItem ? ' active' : '') +\n                (emoji.unicode ? '' : ' custom-emoji')\n              }\" id=\"${`${prefix}-${emoji.id}`}\" style=\"${emoji.unicode ? null : `--custom-emoji-background: url(${JSON.stringify(emoji.url)})`}\">${\n        emoji.unicode\n          ? unicodeWithSkin(emoji, state.currentSkinTone)\n          : ''\n      }</button>`\n      // It's important for the cache key to be unique based on the prefix, because the framework caches based on the\n      // unique tokens + cache key, and the same emoji may be used in the tab as well as in the fav bar\n    }, emoji => `${prefix}-${emoji.id}`)\n  }\n\n  const section = () => {\n    return html`<section data-ref=\"rootElement\" class=\"picker\" aria-label=\"${state.i18n.regionLabel}\" style=\"${state.pickerStyle || ''}\"><div class=\"pad-top\"></div><div class=\"search-row\"><div class=\"search-wrapper\"><input id=\"search\" class=\"search\" type=\"search\" role=\"combobox\" enterkeyhint=\"search\" placeholder=\"${state.i18n.searchLabel}\" autocapitalize=\"none\" autocomplete=\"off\" spellcheck=\"true\" aria-expanded=\"${!!(state.searchMode && state.currentEmojis.length)}\" aria-controls=\"search-results\" aria-describedby=\"search-description\" aria-autocomplete=\"list\" aria-activedescendant=\"${state.activeSearchItemId ? `emo-${state.activeSearchItemId}` : null}\" data-ref=\"searchElement\" data-on-input=\"onSearchInput\" data-on-keydown=\"onSearchKeydown\"><label class=\"sr-only\" for=\"search\">${state.i18n.searchLabel}</label> <span id=\"search-description\" class=\"sr-only\">${state.i18n.searchDescription}</span></div><div class=\"skintone-button-wrapper ${state.skinTonePickerExpandedAfterAnimation ? 'expanded' : ''}\"><button id=\"skintone-button\" class=\"emoji ${state.skinTonePickerExpanded ? 'hide-focus' : ''}\" aria-label=\"${state.skinToneButtonLabel}\" title=\"${state.skinToneButtonLabel}\" aria-describedby=\"skintone-description\" aria-haspopup=\"listbox\" aria-expanded=\"${state.skinTonePickerExpanded}\" aria-controls=\"skintone-list\" data-on-click=\"onClickSkinToneButton\">${state.skinToneButtonText || ''}</button></div><span id=\"skintone-description\" class=\"sr-only\">${state.i18n.skinToneDescription}</span><div data-ref=\"skinToneDropdown\" id=\"skintone-list\" class=\"skintone-list hide-focus ${state.skinTonePickerExpanded ? '' : 'hidden no-animate'}\" style=\"transform:translateY(${state.skinTonePickerExpanded ? 0 : 'calc(-1 * var(--num-skintones) * var(--total-emoji-size))'})\" role=\"listbox\" aria-label=\"${state.i18n.skinTonesLabel}\" aria-activedescendant=\"skintone-${state.activeSkinTone}\" aria-hidden=\"${!state.skinTonePickerExpanded}\" tabIndex=\"-1\" data-on-focusout=\"onSkinToneOptionsFocusOut\" data-on-click=\"onSkinToneOptionsClick\" data-on-keydown=\"onSkinToneOptionsKeydown\" data-on-keyup=\"onSkinToneOptionsKeyup\">${\n    map(state.skinTones, (skinTone, i) => {\n    return html`<div id=\"skintone-${i}\" class=\"emoji ${i === state.activeSkinTone ? 'active' : ''}\" aria-selected=\"${i === state.activeSkinTone}\" role=\"option\" title=\"${state.i18n.skinTones[i]}\" aria-label=\"${state.i18n.skinTones[i]}\">${skinTone}</div>`\n    }, skinTone => skinTone)\n        }</div></div><div class=\"nav\" role=\"tablist\" style=\"grid-template-columns:repeat(${state.groups.length},1fr)\" aria-label=\"${state.i18n.categoriesLabel}\" data-on-keydown=\"onNavKeydown\" data-on-click=\"onNavClick\">${\n            map(state.groups, (group) => {\n              return html`<button role=\"tab\" class=\"nav-button\" aria-controls=\"tab-${group.id}\" aria-label=\"${state.i18n.categories[group.name]}\" aria-selected=\"${!state.searchMode && state.currentGroup.id === group.id}\" title=\"${state.i18n.categories[group.name]}\" data-group-id=\"${group.id}\"><div class=\"nav-emoji emoji\">${group.emoji}</div></button>`\n            }, group => group.id)\n          }</div><div class=\"indicator-wrapper\"><div class=\"indicator\" style=\"transform:translateX(${(/* istanbul ignore next */ (state.isRtl ? -1 : 1)) * state.currentGroupIndex * 100}%)\"></div></div><div class=\"message ${state.message ? '' : 'gone'}\" role=\"alert\" aria-live=\"polite\">${state.message || ''}</div><div data-ref=\"tabpanelElement\" class=\"tabpanel ${(!state.databaseLoaded || state.message) ? 'gone' : ''}\" role=\"${state.searchMode ? 'region' : 'tabpanel'}\" aria-label=\"${state.searchMode ? state.i18n.searchResultsLabel : state.i18n.categories[state.currentGroup.name]}\" id=\"${state.searchMode ? null : `tab-${state.currentGroup.id}`}\" tabIndex=\"0\" data-on-click=\"onEmojiClick\"><div data-action=\"calculateEmojiGridStyle\">${\n              map(state.currentEmojisWithCategories, (emojiWithCategory, i) => {\n                return html`<div><div id=\"menu-label-${i}\" class=\"category ${state.currentEmojisWithCategories.length === 1 && state.currentEmojisWithCategories[0].category === '' ? 'gone' : ''}\" aria-hidden=\"true\">${\n                  state.searchMode\n                    ? state.i18n.searchResultsLabel\n                    : (\n                      emojiWithCategory.category\n                        ? emojiWithCategory.category\n                        : (\n                          state.currentEmojisWithCategories.length > 1\n                            ? state.i18n.categories.custom\n                            : state.i18n.categories[state.currentGroup.name]\n                        )\n                    )\n                }</div><div class=\"emoji-menu ${i !== 0 && !state.searchMode && state.currentGroup.id === -1 ? 'visibility-auto' : ''}\" style=\"${`--num-rows: ${Math.ceil(emojiWithCategory.emojis.length / state.numColumns)}`}\" data-action=\"updateOnIntersection\" role=\"${state.searchMode ? 'listbox' : 'menu'}\" aria-labelledby=\"menu-label-${i}\" id=\"${state.searchMode ? 'search-results' : null}\">${\n              emojiList(emojiWithCategory.emojis, state.searchMode, /* prefix */ 'emo')\n            }</div></div>`\n              }, emojiWithCategory => emojiWithCategory.category)\n            }</div></div><div class=\"favorites onscreen emoji-menu ${state.message ? 'gone' : ''}\" role=\"menu\" aria-label=\"${state.i18n.favoritesLabel}\" data-on-click=\"onEmojiClick\">${\n            emojiList(state.currentFavorites, /* searchMode */ false, /* prefix */ 'fav')\n          }</div><button data-ref=\"baselineEmoji\" aria-hidden=\"true\" tabindex=\"-1\" class=\"abs-pos hidden emoji baseline-emoji\">😀</button></section>`\n  };\n\n  const rootDom = section();\n\n  // helper for traversing the dom, finding elements by an attribute, and getting the attribute value\n  const forElementWithAttribute = (attributeName, callback) => {\n    for (const element of container.querySelectorAll(`[${attributeName}]`)) {\n      callback(element, element.getAttribute(attributeName));\n    }\n  };\n\n  if (firstRender) { // not a re-render\n    container.appendChild(rootDom);\n\n    // we only bind events/refs once - there is no need to find them again given this component structure\n\n    // bind events\n    for (const eventName of ['click', 'focusout', 'input', 'keydown', 'keyup']) {\n      forElementWithAttribute(`data-on-${eventName}`, (element, listenerName) => {\n        element.addEventListener(eventName, events[listenerName]);\n      });\n    }\n\n    // find refs\n    forElementWithAttribute('data-ref', (element, ref) => {\n      refs[ref] = element;\n    });\n\n    // destroy/abort logic\n    abortSignal.addEventListener('abort', () => {\n      container.removeChild(rootDom);\n    });\n  }\n\n  // set up actions - these are re-bound on every render\n  forElementWithAttribute('data-action', (element, action) => {\n    let boundActions = actionContext.get(action);\n    if (!boundActions) {\n      actionContext.set(action, (boundActions = new WeakSet()));\n    }\n\n    // avoid applying the same action to the same element multiple times\n    if (!boundActions.has(element)) {\n      boundActions.add(element);\n      actions[action](element);\n    }\n  });\n}\n\n/* istanbul ignore next */\nconst qM = typeof queueMicrotask === 'function' ? queueMicrotask : callback => Promise.resolve().then(callback);\n\nfunction createState (abortSignal) {\n  let destroyed = false;\n  let currentObserver;\n\n  const propsToObservers = new Map();\n  const dirtyObservers = new Set();\n\n  let queued;\n\n  const flush = () => {\n    if (destroyed) {\n      return\n    }\n    const observersToRun = [...dirtyObservers];\n    dirtyObservers.clear(); // clear before running to force any new updates to run in another tick of the loop\n    try {\n      for (const observer of observersToRun) {\n        observer();\n      }\n    } finally {\n      queued = false;\n      if (dirtyObservers.size) { // new updates, queue another one\n        queued = true;\n        qM(flush);\n      }\n    }\n  };\n\n  const state = new Proxy({}, {\n    get (target, prop) {\n      if (currentObserver) {\n        let observers = propsToObservers.get(prop);\n        if (!observers) {\n          observers = new Set();\n          propsToObservers.set(prop, observers);\n        }\n        observers.add(currentObserver);\n      }\n      return target[prop]\n    },\n    set (target, prop, newValue) {\n      if (target[prop] !== newValue) {\n        target[prop] = newValue;\n        const observers = propsToObservers.get(prop);\n        if (observers) {\n          for (const observer of observers) {\n            dirtyObservers.add(observer);\n          }\n          if (!queued) {\n            queued = true;\n            qM(flush);\n          }\n        }\n      }\n      return true\n    }\n  });\n\n  const createEffect = (callback) => {\n    const runnable = () => {\n      const oldObserver = currentObserver;\n      currentObserver = runnable;\n      try {\n        return callback()\n      } finally {\n        currentObserver = oldObserver;\n      }\n    };\n    return runnable()\n  };\n\n  // destroy logic\n  abortSignal.addEventListener('abort', () => {\n    destroyed = true;\n  });\n\n  return {\n    state,\n    createEffect\n  }\n}\n\n// Compare two arrays, with a function called on each item in the two arrays that returns true if the items are equal\nfunction arraysAreEqualByFunction (left, right, areEqualFunc) {\n  if (left.length !== right.length) {\n    return false\n  }\n  for (let i = 0; i < left.length; i++) {\n    if (!areEqualFunc(left[i], right[i])) {\n      return false\n    }\n  }\n  return true\n}\n\nconst intersectionObserverCache = new WeakMap();\n\nfunction intersectionObserverAction (node, abortSignal, listener) {\n  /* istanbul ignore else */\n  {\n    // The scroll root is always `.tabpanel`\n    const root = node.closest('.tabpanel');\n\n    let observer = intersectionObserverCache.get(root);\n    if (!observer) {\n      // TODO: replace this with the contentvisibilityautostatechange event when all supported browsers support it.\n      // For now we use IntersectionObserver because it has better cross-browser support, and it would be bad for\n      // old Safari versions if they eagerly downloaded all custom emoji all at once.\n      observer = new IntersectionObserver(listener, {\n        root,\n        // trigger if we are 1/2 scroll container height away so that the images load a bit quicker while scrolling\n        rootMargin: '50% 0px 50% 0px',\n        // trigger if any part of the emoji grid is intersecting\n        threshold: 0\n      });\n\n      // avoid creating a new IntersectionObserver for every category; just use one for the whole root\n      intersectionObserverCache.set(root, observer);\n\n      // assume that the abortSignal is always the same for this root node; just add one event listener\n      abortSignal.addEventListener('abort', () => {\n        observer.disconnect();\n      });\n    }\n\n    observer.observe(node);\n  }\n}\n\n/* eslint-disable prefer-const,no-labels,no-inner-declarations */\n\n// constants\nconst EMPTY_ARRAY = [];\n\nconst { assign } = Object;\n\nfunction createRoot (shadowRoot, props) {\n  const refs = {};\n  const abortController = new AbortController();\n  const abortSignal = abortController.signal;\n  const { state, createEffect } = createState(abortSignal);\n  const actionContext = new Map();\n\n  // initial state\n  assign(state, {\n    skinToneEmoji: undefined,\n    i18n: undefined,\n    database: undefined,\n    customEmoji: undefined,\n    customCategorySorting: undefined,\n    emojiVersion: undefined\n  });\n\n  // public props\n  assign(state, props);\n\n  // private props\n  assign(state, {\n    initialLoad: true,\n    currentEmojis: [],\n    currentEmojisWithCategories: [],\n    rawSearchText: '',\n    searchText: '',\n    searchMode: false,\n    activeSearchItem: -1,\n    message: undefined,\n    skinTonePickerExpanded: false,\n    skinTonePickerExpandedAfterAnimation: false,\n    currentSkinTone: 0,\n    activeSkinTone: 0,\n    skinToneButtonText: undefined,\n    pickerStyle: undefined,\n    skinToneButtonLabel: '',\n    skinTones: [],\n    currentFavorites: [],\n    defaultFavoriteEmojis: undefined,\n    numColumns: DEFAULT_NUM_COLUMNS,\n    isRtl: false,\n    currentGroupIndex: 0,\n    groups: groups,\n    databaseLoaded: false,\n    activeSearchItemId: undefined\n  });\n\n  //\n  // Update the current group based on the currentGroupIndex\n  //\n  createEffect(() => {\n    if (state.currentGroup !== state.groups[state.currentGroupIndex]) {\n      state.currentGroup = state.groups[state.currentGroupIndex];\n    }\n  });\n\n  //\n  // Utils/helpers\n  //\n\n  const focus = id => {\n    shadowRoot.getElementById(id).focus();\n  };\n\n  const emojiToDomNode = emoji => shadowRoot.getElementById(`emo-${emoji.id}`);\n\n  // fire a custom event that crosses the shadow boundary\n  const fireEvent = (name, detail) => {\n    refs.rootElement.dispatchEvent(new CustomEvent(name, {\n      detail,\n      bubbles: true,\n      composed: true\n    }));\n  };\n\n  //\n  // Comparison utils\n  //\n\n  const compareEmojiArrays = (a, b) => a.id === b.id;\n\n  const compareCurrentEmojisWithCategories = (a, b) => {\n    const { category: aCategory, emojis: aEmojis } = a;\n    const { category: bCategory, emojis: bEmojis } = b;\n\n    if (aCategory !== bCategory) {\n      return false\n    }\n\n    return arraysAreEqualByFunction(aEmojis, bEmojis, compareEmojiArrays)\n  };\n\n  //\n  // Update utils to avoid excessive re-renders\n  //\n\n  // avoid excessive re-renders by checking the value before setting\n  const updateCurrentEmojis = (newEmojis) => {\n    if (!arraysAreEqualByFunction(state.currentEmojis, newEmojis, compareEmojiArrays)) {\n      state.currentEmojis = newEmojis;\n    }\n  };\n\n  // avoid excessive re-renders\n  const updateSearchMode = (newSearchMode) => {\n    if (state.searchMode !== newSearchMode) {\n      state.searchMode = newSearchMode;\n    }\n  };\n\n  // avoid excessive re-renders\n  const updateCurrentEmojisWithCategories = (newEmojisWithCategories) => {\n    if (!arraysAreEqualByFunction(state.currentEmojisWithCategories, newEmojisWithCategories, compareCurrentEmojisWithCategories)) {\n      state.currentEmojisWithCategories = newEmojisWithCategories;\n    }\n  };\n\n  // Helpers used by PickerTemplate\n\n  const unicodeWithSkin = (emoji, currentSkinTone) => (\n    (currentSkinTone && emoji.skins && emoji.skins[currentSkinTone]) || emoji.unicode\n  );\n\n  const labelWithSkin = (emoji, currentSkinTone) => (\n    uniq([\n      (emoji.name || unicodeWithSkin(emoji, currentSkinTone)),\n      emoji.annotation,\n      ...(emoji.shortcodes || EMPTY_ARRAY)\n    ].filter(Boolean)).join(', ')\n  );\n\n  const titleForEmoji = (emoji) => (\n    emoji.annotation || (emoji.shortcodes || EMPTY_ARRAY).join(', ')\n  );\n\n  const helpers = {\n    labelWithSkin, titleForEmoji, unicodeWithSkin\n  };\n  const events = {\n    onClickSkinToneButton,\n    onEmojiClick,\n    onNavClick,\n    onNavKeydown,\n    onSearchKeydown,\n    onSkinToneOptionsClick,\n    onSkinToneOptionsFocusOut,\n    onSkinToneOptionsKeydown,\n    onSkinToneOptionsKeyup,\n    onSearchInput\n  };\n  const actions = {\n    calculateEmojiGridStyle,\n    updateOnIntersection\n  };\n\n  let firstRender = true;\n  createEffect(() => {\n    render(shadowRoot, state, helpers, events, actions, refs, abortSignal, actionContext, firstRender);\n    firstRender = false;\n  });\n\n  //\n  // Determine the emoji support level (in requestIdleCallback)\n  //\n\n  // mount logic\n  if (!state.emojiVersion) {\n    detectEmojiSupportLevel().then(level => {\n      // Can't actually test emoji support in Jest/Vitest/JSDom, emoji never render in color in Cairo\n      /* istanbul ignore next */\n      if (!level) {\n        state.message = state.i18n.emojiUnsupportedMessage;\n      }\n    });\n  }\n\n  //\n  // Set or update the database object\n  //\n\n  createEffect(() => {\n    // show a Loading message if it takes a long time, or show an error if there's a network/IDB error\n    async function handleDatabaseLoading () {\n      let showingLoadingMessage = false;\n      const timeoutHandle = setTimeout(() => {\n        showingLoadingMessage = true;\n        state.message = state.i18n.loadingMessage;\n      }, TIMEOUT_BEFORE_LOADING_MESSAGE);\n      try {\n        await state.database.ready();\n        state.databaseLoaded = true; // eslint-disable-line no-unused-vars\n      } catch (err) {\n        console.error(err);\n        state.message = state.i18n.networkErrorMessage;\n      } finally {\n        clearTimeout(timeoutHandle);\n        if (showingLoadingMessage) { // Seems safer than checking the i18n string, which may change\n          showingLoadingMessage = false;\n          state.message = ''; // eslint-disable-line no-unused-vars\n        }\n      }\n    }\n\n    if (state.database) {\n      /* no await */\n      handleDatabaseLoading();\n    }\n  });\n\n  //\n  // Global styles for the entire picker\n  //\n\n  createEffect(() => {\n    state.pickerStyle = `\n      --num-groups: ${state.groups.length}; \n      --indicator-opacity: ${state.searchMode ? 0 : 1}; \n      --num-skintones: ${NUM_SKIN_TONES};`;\n  });\n\n  //\n  // Set or update the customEmoji\n  //\n\n  createEffect(() => {\n    if (state.customEmoji && state.database) {\n      updateCustomEmoji(); // re-run whenever customEmoji change\n    }\n  });\n\n  createEffect(() => {\n    if (state.customEmoji && state.customEmoji.length) {\n      if (state.groups !== allGroups) { // don't update unnecessarily\n        state.groups = allGroups;\n      }\n    } else if (state.groups !== groups) {\n      if (state.currentGroupIndex) {\n        // If the current group is anything other than \"custom\" (which is first), decrement.\n        // This fixes the odd case where you set customEmoji, then pick a category, then unset customEmoji\n        state.currentGroupIndex--;\n      }\n      state.groups = groups;\n    }\n  });\n\n  //\n  // Set or update the preferred skin tone\n  //\n\n  createEffect(() => {\n    async function updatePreferredSkinTone () {\n      if (state.databaseLoaded) {\n        state.currentSkinTone = await state.database.getPreferredSkinTone();\n      }\n    }\n\n    /* no await */ updatePreferredSkinTone();\n  });\n\n  createEffect(() => {\n    state.skinTones = Array(NUM_SKIN_TONES).fill().map((_, i) => applySkinTone(state.skinToneEmoji, i));\n  });\n\n  createEffect(() => {\n    state.skinToneButtonText = state.skinTones[state.currentSkinTone];\n  });\n\n  createEffect(() => {\n    state.skinToneButtonLabel = state.i18n.skinToneLabel.replace('{skinTone}', state.i18n.skinTones[state.currentSkinTone]);\n  });\n\n  //\n  // Set or update the favorites emojis\n  //\n\n  createEffect(() => {\n    async function updateDefaultFavoriteEmojis () {\n      const { database } = state;\n      const favs = (await Promise.all(MOST_COMMONLY_USED_EMOJI.map(unicode => (\n        database.getEmojiByUnicodeOrName(unicode)\n      )))).filter(Boolean); // filter because in Jest/Vitest tests we don't have all the emoji in the DB\n      state.defaultFavoriteEmojis = favs;\n    }\n\n    if (state.databaseLoaded) {\n      /* no await */ updateDefaultFavoriteEmojis();\n    }\n  });\n\n  function updateCustomEmoji () {\n    // Certain effects have an implicit dependency on customEmoji since it affects the database\n    // Getting it here on the state ensures this effect re-runs when customEmoji change.\n    const { customEmoji, database } = state;\n    const databaseCustomEmoji = customEmoji || EMPTY_ARRAY;\n    if (database.customEmoji !== databaseCustomEmoji) {\n      // Avoid setting this if the customEmoji have _not_ changed, because the setter triggers a re-computation of the\n      // `customEmojiIndex`. Note we don't bother with deep object changes.\n      database.customEmoji = databaseCustomEmoji;\n    }\n  }\n\n  createEffect(() => {\n    async function updateFavorites () {\n      updateCustomEmoji(); // re-run whenever customEmoji change\n      const { database, defaultFavoriteEmojis, numColumns } = state;\n      const dbFavorites = await database.getTopFavoriteEmoji(numColumns);\n      const favorites = await summarizeEmojis(uniqBy([\n        ...dbFavorites,\n        ...defaultFavoriteEmojis\n      ], _ => (_.unicode || _.name)).slice(0, numColumns));\n      state.currentFavorites = favorites;\n    }\n\n    if (state.databaseLoaded && state.defaultFavoriteEmojis) {\n      /* no await */ updateFavorites();\n    }\n  });\n\n  //\n  // Re-run whenever the emoji grid changes size, and re-calc style/layout-related state variables:\n  // 1) Re-calculate the --num-columns var because it may have changed\n  // 2) Re-calculate whether we're in RTL mode or not.\n  //\n  // The benefit of doing this in one place is to align with rAF/ResizeObserver\n  // and do all the calculations in one go. RTL vs LTR is not strictly layout-related,\n  // but since we're already reading the style here, and since it's already aligned with\n  // the rAF loop, this is the most appropriate place to do it perf-wise.\n  //\n\n  function calculateEmojiGridStyle (node) {\n    resizeObserverAction(node, abortSignal, () => {\n      /* istanbul ignore next */\n      { // jsdom throws errors for this kind of fancy stuff\n        // read all the style/layout calculations we need to make\n        const style = getComputedStyle(refs.rootElement);\n        const newNumColumns = parseInt(style.getPropertyValue('--num-columns'), 10);\n        const newIsRtl = style.getPropertyValue('direction') === 'rtl';\n\n        // write to state variables\n        state.numColumns = newNumColumns;\n        state.isRtl = newIsRtl;\n      }\n    });\n  }\n\n  // Re-run whenever the custom emoji in a category are shown/hidden. This is an optimization that simulates\n  // what we'd get from `<img loading=lazy>` but without rendering an `<img>`.\n  function updateOnIntersection (node) {\n    intersectionObserverAction(node, abortSignal, (entries) => {\n      for (const { target, isIntersecting } of entries) {\n        target.classList.toggle('onscreen', isIntersecting);\n      }\n    });\n  }\n\n  //\n  // Set or update the currentEmojis. Check for invalid ZWJ renderings\n  // (i.e. double emoji).\n  //\n\n  createEffect(() => {\n    async function updateEmojis () {\n      const { searchText, currentGroup, databaseLoaded, customEmoji } = state;\n      if (!databaseLoaded) {\n        state.currentEmojis = [];\n        state.searchMode = false;\n      } else if (searchText.length >= MIN_SEARCH_TEXT_LENGTH) {\n        const newEmojis = await getEmojisBySearchQuery(searchText);\n        if (state.searchText === searchText) { // if the situation changes asynchronously, do not update\n          updateCurrentEmojis(newEmojis);\n          updateSearchMode(true);\n        }\n      } else { // database is loaded and we're not in search mode, so we're in normal category mode\n        const { id: currentGroupId } = currentGroup;\n        // avoid race condition where currentGroupId is -1 and customEmoji is undefined/empty\n        if (currentGroupId !== -1 || (customEmoji && customEmoji.length)) {\n          const newEmojis = await getEmojisByGroup(currentGroupId);\n          if (state.currentGroup.id === currentGroupId) { // if the situation changes asynchronously, do not update\n            updateCurrentEmojis(newEmojis);\n            updateSearchMode(false);\n          }\n        }\n      }\n    }\n\n    /* no await */ updateEmojis();\n  });\n\n  const resetScrollTopInRaf = () => {\n    rAF(() => resetScrollTopIfPossible(refs.tabpanelElement));\n  };\n\n  // Some emojis have their ligatures rendered as two or more consecutive emojis\n  // We want to treat these the same as unsupported emojis, so we compare their\n  // widths against the baseline widths and remove them as necessary\n  createEffect(() => {\n    const { currentEmojis, emojiVersion } = state;\n    const zwjEmojisToCheck = currentEmojis\n      .filter(emoji => emoji.unicode) // filter custom emoji\n      .filter(emoji => hasZwj(emoji) && !supportedZwjEmojis.has(emoji.unicode));\n    if (!emojiVersion && zwjEmojisToCheck.length) {\n      // render now, check their length later\n      updateCurrentEmojis(currentEmojis);\n      rAF(() => checkZwjSupportAndUpdate(zwjEmojisToCheck));\n    } else {\n      const newEmojis = emojiVersion ? currentEmojis : currentEmojis.filter(isZwjSupported);\n      updateCurrentEmojis(newEmojis);\n      // Reset scroll top to 0 when emojis change\n      resetScrollTopInRaf();\n    }\n  });\n\n  function checkZwjSupportAndUpdate (zwjEmojisToCheck) {\n    const allSupported = checkZwjSupport(zwjEmojisToCheck, refs.baselineEmoji, emojiToDomNode);\n    if (allSupported) {\n      // Even if all emoji are supported, we still need to reset the scroll top to 0 when emojis change\n      resetScrollTopInRaf();\n    } else {\n      // Force update. We only do this if there are any unsupported ZWJ characters since otherwise,\n      // for browsers that support all emoji, it would be an unnecessary extra re-render.\n      state.currentEmojis = [...state.currentEmojis];\n    }\n  }\n\n  function isZwjSupported (emoji) {\n    return !emoji.unicode || !hasZwj(emoji) || supportedZwjEmojis.get(emoji.unicode)\n  }\n\n  async function filterEmojisByVersion (emojis) {\n    const emojiSupportLevel = state.emojiVersion || await detectEmojiSupportLevel();\n    // !version corresponds to custom emoji\n    return emojis.filter(({ version }) => !version || version <= emojiSupportLevel)\n  }\n\n  async function summarizeEmojis (emojis) {\n    return summarizeEmojisForUI(emojis, state.emojiVersion || await detectEmojiSupportLevel())\n  }\n\n  async function getEmojisByGroup (group) {\n    // -1 is custom emoji\n    const emoji = group === -1 ? state.customEmoji : await state.database.getEmojiByGroup(group);\n    return summarizeEmojis(await filterEmojisByVersion(emoji))\n  }\n\n  async function getEmojisBySearchQuery (query) {\n    return summarizeEmojis(await filterEmojisByVersion(await state.database.getEmojiBySearchQuery(query)))\n  }\n\n  createEffect(() => {\n  });\n\n  //\n  // Derive currentEmojisWithCategories from currentEmojis. This is always done even if there\n  // are no categories, because it's just easier to code the HTML this way.\n  //\n\n  createEffect(() => {\n    function calculateCurrentEmojisWithCategories () {\n      const { searchMode, currentEmojis } = state;\n      if (searchMode) {\n        return [\n          {\n            category: '',\n            emojis: currentEmojis\n          }\n        ]\n      }\n      const categoriesToEmoji = new Map();\n      for (const emoji of currentEmojis) {\n        const category = emoji.category || '';\n        let emojis = categoriesToEmoji.get(category);\n        if (!emojis) {\n          emojis = [];\n          categoriesToEmoji.set(category, emojis);\n        }\n        emojis.push(emoji);\n      }\n      return [...categoriesToEmoji.entries()]\n        .map(([category, emojis]) => ({ category, emojis }))\n        .sort((a, b) => state.customCategorySorting(a.category, b.category))\n    }\n\n    const newEmojisWithCategories = calculateCurrentEmojisWithCategories();\n    updateCurrentEmojisWithCategories(newEmojisWithCategories);\n  });\n\n  //\n  // Handle active search item (i.e. pressing up or down while searching)\n  //\n\n  createEffect(() => {\n    state.activeSearchItemId = state.activeSearchItem !== -1 && state.currentEmojis[state.activeSearchItem].id;\n  });\n\n  //\n  // Handle user input on the search input\n  //\n\n  createEffect(() => {\n    const { rawSearchText } = state;\n    rIC(() => {\n      state.searchText = (rawSearchText || '').trim(); // defer to avoid input delays, plus we can trim here\n      state.activeSearchItem = -1;\n    });\n  });\n\n  function onSearchKeydown (event) {\n    if (!state.searchMode || !state.currentEmojis.length) {\n      return\n    }\n\n    const goToNextOrPrevious = (previous) => {\n      halt(event);\n      state.activeSearchItem = incrementOrDecrement(previous, state.activeSearchItem, state.currentEmojis);\n    };\n\n    switch (event.key) {\n      case 'ArrowDown':\n        return goToNextOrPrevious(false)\n      case 'ArrowUp':\n        return goToNextOrPrevious(true)\n      case 'Enter':\n        if (state.activeSearchItem === -1) {\n          // focus the first option in the list since the list must be non-empty at this point (it's verified above)\n          state.activeSearchItem = 0;\n        } else { // there is already an active search item\n          halt(event);\n          return clickEmoji(state.currentEmojis[state.activeSearchItem].id)\n        }\n    }\n  }\n\n  //\n  // Handle user input on nav\n  //\n\n  function onNavClick (event) {\n    const { target } = event;\n    const closestTarget = target.closest('.nav-button');\n    /* istanbul ignore if */\n    if (!closestTarget) {\n      return // This should never happen, but makes me nervous not to have it\n    }\n    const groupId = parseInt(closestTarget.dataset.groupId, 10);\n    refs.searchElement.value = ''; // clear search box input\n    state.rawSearchText = '';\n    state.searchText = '';\n    state.activeSearchItem = -1;\n    state.currentGroupIndex = state.groups.findIndex(_ => _.id === groupId);\n  }\n\n  function onNavKeydown (event) {\n    const { target, key } = event;\n\n    const doFocus = el => {\n      if (el) {\n        halt(event);\n        el.focus();\n      }\n    };\n\n    switch (key) {\n      case 'ArrowLeft':\n        return doFocus(target.previousElementSibling)\n      case 'ArrowRight':\n        return doFocus(target.nextElementSibling)\n      case 'Home':\n        return doFocus(target.parentElement.firstElementChild)\n      case 'End':\n        return doFocus(target.parentElement.lastElementChild)\n    }\n  }\n\n  //\n  // Handle user input on an emoji\n  //\n\n  async function clickEmoji (unicodeOrName) {\n    const emoji = await state.database.getEmojiByUnicodeOrName(unicodeOrName);\n    const emojiSummary = [...state.currentEmojis, ...state.currentFavorites]\n      .find(_ => (_.id === unicodeOrName));\n    const skinTonedUnicode = emojiSummary.unicode && unicodeWithSkin(emojiSummary, state.currentSkinTone);\n    await state.database.incrementFavoriteEmojiCount(unicodeOrName);\n    fireEvent('emoji-click', {\n      emoji,\n      skinTone: state.currentSkinTone,\n      ...(skinTonedUnicode && { unicode: skinTonedUnicode }),\n      ...(emojiSummary.name && { name: emojiSummary.name })\n    });\n  }\n\n  async function onEmojiClick (event) {\n    const { target } = event;\n    /* istanbul ignore if */\n    if (!target.classList.contains('emoji')) {\n      // This should never happen, but makes me nervous not to have it\n      return\n    }\n    halt(event);\n    const id = target.id.substring(4); // replace 'emo-' or 'fav-' prefix\n\n    /* no await */ clickEmoji(id);\n  }\n\n  //\n  // Handle user input on the skintone picker\n  //\n\n  function changeSkinTone (skinTone) {\n    state.currentSkinTone = skinTone;\n    state.skinTonePickerExpanded = false;\n    focus('skintone-button');\n    fireEvent('skin-tone-change', { skinTone });\n    /* no await */ state.database.setPreferredSkinTone(skinTone);\n  }\n\n  function onSkinToneOptionsClick (event) {\n    const { target: { id } } = event;\n    const match = id && id.match(/^skintone-(\\d)/); // skintone option format\n    /* istanbul ignore if */\n    if (!match) { // not a skintone option\n      return // This should never happen, but makes me nervous not to have it\n    }\n    halt(event);\n    const skinTone = parseInt(match[1], 10); // remove 'skintone-' prefix\n    changeSkinTone(skinTone);\n  }\n\n  function onClickSkinToneButton (event) {\n    state.skinTonePickerExpanded = !state.skinTonePickerExpanded;\n    state.activeSkinTone = state.currentSkinTone;\n    // this should always be true, since the button is obscured by the listbox, so this `if` is just to be sure\n    if (state.skinTonePickerExpanded) {\n      halt(event);\n      rAF(() => focus('skintone-list'));\n    }\n  }\n\n  // To make the animation nicer, change the z-index of the skintone picker button\n  // *after* the animation has played. This makes it appear that the picker box\n  // is expanding \"below\" the button\n  createEffect(() => {\n    if (state.skinTonePickerExpanded) {\n      refs.skinToneDropdown.addEventListener('transitionend', () => {\n        state.skinTonePickerExpandedAfterAnimation = true; // eslint-disable-line no-unused-vars\n      }, { once: true });\n    } else {\n      state.skinTonePickerExpandedAfterAnimation = false; // eslint-disable-line no-unused-vars\n    }\n  });\n\n  function onSkinToneOptionsKeydown (event) {\n    // this should never happen, but makes me nervous not to have it\n    /* istanbul ignore if */\n    if (!state.skinTonePickerExpanded) {\n      return\n    }\n    const changeActiveSkinTone = async nextSkinTone => {\n      halt(event);\n      state.activeSkinTone = nextSkinTone;\n    };\n\n    switch (event.key) {\n      case 'ArrowUp':\n        return changeActiveSkinTone(incrementOrDecrement(true, state.activeSkinTone, state.skinTones))\n      case 'ArrowDown':\n        return changeActiveSkinTone(incrementOrDecrement(false, state.activeSkinTone, state.skinTones))\n      case 'Home':\n        return changeActiveSkinTone(0)\n      case 'End':\n        return changeActiveSkinTone(state.skinTones.length - 1)\n      case 'Enter':\n        // enter on keydown, space on keyup. this is just how browsers work for buttons\n        // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html\n        halt(event);\n        return changeSkinTone(state.activeSkinTone)\n      case 'Escape':\n        halt(event);\n        state.skinTonePickerExpanded = false;\n        return focus('skintone-button')\n    }\n  }\n\n  function onSkinToneOptionsKeyup (event) {\n    // this should never happen, but makes me nervous not to have it\n    /* istanbul ignore if */\n    if (!state.skinTonePickerExpanded) {\n      return\n    }\n    switch (event.key) {\n      case ' ':\n        // enter on keydown, space on keyup. this is just how browsers work for buttons\n        // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html\n        halt(event);\n        return changeSkinTone(state.activeSkinTone)\n    }\n  }\n\n  async function onSkinToneOptionsFocusOut (event) {\n    // On blur outside of the skintone listbox, collapse the skintone picker.\n    const { relatedTarget } = event;\n    // The `else` should never happen, but makes me nervous not to have it\n    /* istanbul ignore else */\n    if (!relatedTarget || relatedTarget.id !== 'skintone-list') {\n      state.skinTonePickerExpanded = false;\n    }\n  }\n\n  function onSearchInput (event) {\n    state.rawSearchText = event.target.value;\n  }\n\n  return {\n    $set (newState) {\n      assign(state, newState);\n    },\n    $destroy () {\n      abortController.abort();\n    }\n  }\n}\n\nconst DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';\nconst DEFAULT_LOCALE = 'en';\n\nvar enI18n = {\n  categoriesLabel: 'Categories',\n  emojiUnsupportedMessage: 'Your browser does not support color emoji.',\n  favoritesLabel: 'Favorites',\n  loadingMessage: 'Loading…',\n  networkErrorMessage: 'Could not load emoji.',\n  regionLabel: 'Emoji picker',\n  searchDescription: 'When search results are available, press up or down to select and enter to choose.',\n  searchLabel: 'Search',\n  searchResultsLabel: 'Search results',\n  skinToneDescription: 'When expanded, press up or down to select and enter to choose.',\n  skinToneLabel: 'Choose a skin tone (currently {skinTone})',\n  skinTonesLabel: 'Skin tones',\n  skinTones: [\n    'Default',\n    'Light',\n    'Medium-Light',\n    'Medium',\n    'Medium-Dark',\n    'Dark'\n  ],\n  categories: {\n    custom: 'Custom',\n    'smileys-emotion': 'Smileys and emoticons',\n    'people-body': 'People and body',\n    'animals-nature': 'Animals and nature',\n    'food-drink': 'Food and drink',\n    'travel-places': 'Travel and places',\n    activities: 'Activities',\n    objects: 'Objects',\n    symbols: 'Symbols',\n    flags: 'Flags'\n  }\n};\n\nvar baseStyles = \":host{--emoji-size:1.375rem;--emoji-padding:0.5rem;--category-emoji-size:var(--emoji-size);--category-emoji-padding:var(--emoji-padding);--indicator-height:3px;--input-border-radius:0.5rem;--input-border-size:1px;--input-font-size:1rem;--input-line-height:1.5;--input-padding:0.25rem;--num-columns:8;--outline-size:2px;--border-size:1px;--border-radius:0;--skintone-border-radius:1rem;--category-font-size:1rem;display:flex;width:min-content;height:400px}:host,:host(.light){color-scheme:light;--background:#fff;--border-color:#e0e0e0;--indicator-color:#385ac1;--input-border-color:#999;--input-font-color:#111;--input-placeholder-color:#999;--outline-color:#999;--category-font-color:#111;--button-active-background:#e6e6e6;--button-hover-background:#d9d9d9}:host(.dark){color-scheme:dark;--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}@media (prefers-color-scheme:dark){:host{color-scheme:dark;--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}}:host([hidden]){display:none}button{margin:0;padding:0;border:0;background:0 0;box-shadow:none;-webkit-tap-highlight-color:transparent}button::-moz-focus-inner{border:0}input{padding:0;margin:0;line-height:1.15;font-family:inherit}input[type=search]{-webkit-appearance:none}:focus{outline:var(--outline-color) solid var(--outline-size);outline-offset:calc(-1*var(--outline-size))}:host([data-js-focus-visible]) :focus:not([data-focus-visible-added]){outline:0}:focus:not(:focus-visible){outline:0}.hide-focus{outline:0}*{box-sizing:border-box}.picker{contain:content;display:flex;flex-direction:column;background:var(--background);border:var(--border-size) solid var(--border-color);border-radius:var(--border-radius);width:100%;height:100%;overflow:hidden;--total-emoji-size:calc(var(--emoji-size) + (2 * var(--emoji-padding)));--total-category-emoji-size:calc(var(--category-emoji-size) + (2 * var(--category-emoji-padding)))}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.hidden{opacity:0;pointer-events:none}.abs-pos{position:absolute;left:0;top:0}.gone{display:none!important}.skintone-button-wrapper,.skintone-list{background:var(--background);z-index:3}.skintone-button-wrapper.expanded{z-index:1}.skintone-list{position:absolute;inset-inline-end:0;top:0;z-index:2;overflow:visible;border-bottom:var(--border-size) solid var(--border-color);border-radius:0 0 var(--skintone-border-radius) var(--skintone-border-radius);will-change:transform;transition:transform .2s ease-in-out;transform-origin:center 0}@media (prefers-reduced-motion:reduce){.skintone-list{transition-duration:.001s}}@supports not (inset-inline-end:0){.skintone-list{right:0}}.skintone-list.no-animate{transition:none}.tabpanel{overflow-y:auto;scrollbar-gutter:stable;-webkit-overflow-scrolling:touch;will-change:transform;min-height:0;flex:1;contain:content}.emoji-menu{display:grid;grid-template-columns:repeat(var(--num-columns),var(--total-emoji-size));justify-content:space-around;align-items:flex-start;width:100%}.emoji-menu.visibility-auto{content-visibility:auto;contain-intrinsic-size:calc(var(--num-columns)*var(--total-emoji-size)) calc(var(--num-rows)*var(--total-emoji-size))}.category{padding:var(--emoji-padding);font-size:var(--category-font-size);color:var(--category-font-color)}.emoji,button.emoji{font-size:var(--emoji-size);display:flex;align-items:center;justify-content:center;border-radius:100%;height:var(--total-emoji-size);width:var(--total-emoji-size);line-height:1;overflow:hidden;font-family:var(--emoji-font-family);cursor:pointer}@media (hover:hover) and (pointer:fine){.emoji:hover,button.emoji:hover{background:var(--button-hover-background)}}.emoji.active,.emoji:active,button.emoji.active,button.emoji:active{background:var(--button-active-background)}.onscreen .custom-emoji::after{content:\\\"\\\";width:var(--emoji-size);height:var(--emoji-size);background-repeat:no-repeat;background-position:center center;background-size:contain;background-image:var(--custom-emoji-background)}.nav,.nav-button{align-items:center}.nav{display:grid;justify-content:space-between;contain:content}.nav-button{display:flex;justify-content:center}.nav-emoji{font-size:var(--category-emoji-size);width:var(--total-category-emoji-size);height:var(--total-category-emoji-size)}.indicator-wrapper{display:flex;border-bottom:1px solid var(--border-color)}.indicator{width:calc(100%/var(--num-groups));height:var(--indicator-height);opacity:var(--indicator-opacity);background-color:var(--indicator-color);will-change:transform,opacity;transition:opacity .1s linear,transform .25s ease-in-out}@media (prefers-reduced-motion:reduce){.indicator{will-change:opacity;transition:opacity .1s linear}}.pad-top,input.search{background:var(--background);width:100%}.pad-top{height:var(--emoji-padding);z-index:3}.search-row{display:flex;align-items:center;position:relative;padding-inline-start:var(--emoji-padding);padding-bottom:var(--emoji-padding)}.search-wrapper{flex:1;min-width:0}input.search{padding:var(--input-padding);border-radius:var(--input-border-radius);border:var(--input-border-size) solid var(--input-border-color);color:var(--input-font-color);font-size:var(--input-font-size);line-height:var(--input-line-height)}input.search::placeholder{color:var(--input-placeholder-color)}.favorites{overflow-y:auto;scrollbar-gutter:stable;display:flex;flex-direction:row;border-top:var(--border-size) solid var(--border-color);contain:content}.message{padding:var(--emoji-padding)}\";\n\nconst PROPS = [\n  'customEmoji',\n  'customCategorySorting',\n  'database',\n  'dataSource',\n  'i18n',\n  'locale',\n  'skinToneEmoji',\n  'emojiVersion'\n];\n\n// Styles injected ourselves, so we can declare the FONT_FAMILY variable in one place\nconst EXTRA_STYLES = `:host{--emoji-font-family:${FONT_FAMILY}}`;\n\nclass PickerElement extends HTMLElement {\n  constructor (props) {\n    super();\n    this.attachShadow({ mode: 'open' });\n    const style = document.createElement('style');\n    style.textContent = baseStyles + EXTRA_STYLES;\n    this.shadowRoot.appendChild(style);\n    this._ctx = {\n      // Set defaults\n      locale: DEFAULT_LOCALE,\n      dataSource: DEFAULT_DATA_SOURCE,\n      skinToneEmoji: DEFAULT_SKIN_TONE_EMOJI,\n      customCategorySorting: DEFAULT_CATEGORY_SORTING,\n      customEmoji: null,\n      i18n: enI18n,\n      emojiVersion: null,\n      ...props\n    };\n    // Handle properties set before the element was upgraded\n    for (const prop of PROPS) {\n      if (prop !== 'database' && Object.prototype.hasOwnProperty.call(this, prop)) {\n        this._ctx[prop] = this[prop];\n        delete this[prop];\n      }\n    }\n    this._dbFlush(); // wait for a flush before creating the db, in case the user calls e.g. a setter or setAttribute\n  }\n\n  connectedCallback () {\n    // The _cmp may be defined if the component was immediately disconnected and then reconnected. In that case,\n    // do nothing (preserve the state)\n    if (!this._cmp) {\n      this._cmp = createRoot(this.shadowRoot, this._ctx);\n    }\n  }\n\n  disconnectedCallback () {\n    // Check in a microtask if the element is still connected. If so, treat this as a \"move\" rather than a disconnect\n    // Inspired by Vue: https://vuejs.org/guide/extras/web-components.html#building-custom-elements-with-vue\n    qM(() => {\n      // this._cmp may be defined if connect-disconnect-connect-disconnect occurs synchronously\n      if (!this.isConnected && this._cmp) {\n        this._cmp.$destroy();\n        this._cmp = undefined;\n\n        const { database } = this._ctx;\n        database.close()\n          // only happens if the database failed to load in the first place, so we don't care\n          .catch(err => console.error(err));\n      }\n    });\n  }\n\n  static get observedAttributes () {\n    return ['locale', 'data-source', 'skin-tone-emoji', 'emoji-version'] // complex objects aren't supported, also use kebab-case\n  }\n\n  attributeChangedCallback (attrName, oldValue, newValue) {\n    this._set(\n      // convert from kebab-case to camelcase\n      // see https://github.com/sveltejs/svelte/issues/3852#issuecomment-665037015\n      attrName.replace(/-([a-z])/g, (_, up) => up.toUpperCase()),\n      // convert string attribute to float if necessary\n      attrName === 'emoji-version' ? parseFloat(newValue) : newValue\n    );\n  }\n\n  _set (prop, newValue) {\n    this._ctx[prop] = newValue;\n    if (this._cmp) {\n      this._cmp.$set({ [prop]: newValue });\n    }\n    if (['locale', 'dataSource'].includes(prop)) {\n      this._dbFlush();\n    }\n  }\n\n  _dbCreate () {\n    const { locale, dataSource, database } = this._ctx;\n    // only create a new database if we really need to\n    if (!database || database.locale !== locale || database.dataSource !== dataSource) {\n      this._set('database', new Database({ locale, dataSource }));\n    }\n  }\n\n  // Update the Database in one microtask if the locale/dataSource change. We do one microtask\n  // so we don't create two Databases if e.g. both the locale and the dataSource change\n  _dbFlush () {\n    qM(() => (\n      this._dbCreate()\n    ));\n  }\n}\n\nconst definitions = {};\n\nfor (const prop of PROPS) {\n  definitions[prop] = {\n    get () {\n      if (prop === 'database') {\n        // in rare cases, the microtask may not be flushed yet, so we need to instantiate the DB\n        // now if the user is asking for it\n        this._dbCreate();\n      }\n      return this._ctx[prop]\n    },\n    set (val) {\n      if (prop === 'database') {\n        throw new Error('database is read-only')\n      }\n      this._set(prop, val);\n    }\n  };\n}\n\nObject.defineProperties(PickerElement.prototype, definitions);\n\n/* istanbul ignore else */\nif (!customElements.get('emoji-picker')) { // if already defined, do nothing (e.g. same script imported twice)\n  customElements.define('emoji-picker', PickerElement);\n}\n\nexport { PickerElement as default };\n","  import \"emoji-picker-element\";\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    document\n      .querySelector(\"emoji-picker\")\n      .addEventListener(\"emoji-click\", event => console.log(event.detail));\n  });\n\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyAidmVyc2lvbiI6IDMsICJzb3VyY2VzIjogWyIvaG9tZS9ydW5uZXIvd29yay9ham40MDQuZ2l0aHViLmlvL2FqbjQwNC5naXRodWIuaW8vc3JjL2NvbXBvbmVudHMvYXN0cm8vbW9yZS9lbW9qaS5hc3RybyJdLCAic291cmNlc0NvbnRlbnQiOiBbIi0tLVxuXG4tLS1cblx1MDAzY2Vtb2ppLXBpY2tlciBjbGFzcz1cIm1heC13LWZ1bGxcIlx1MDAzZVx1MDAzYy9lbW9qaS1waWNrZXJcdTAwM2VcblxuXHUwMDNjc2NyaXB0XHUwMDNlXG4gIGltcG9ydCBcImVtb2ppLXBpY2tlci1lbGVtZW50XCI7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID1cdTAwM2Uge1xuICAgIGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihcImVtb2ppLXBpY2tlclwiKVxuICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJlbW9qaS1jbGlja1wiLCBldmVudCA9XHUwMDNlIGNvbnNvbGUubG9nKGV2ZW50LmRldGFpbCkpO1xuICB9KTtcblx1MDAzYy9zY3JpcHRcdTAwM2UiXSwgIm1hcHBpbmdzIjogIkFBTUEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN0RCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDWCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxRSxFQUFFLENBQUMsQ0FBQztBQUFBOyIsICJuYW1lcyI6IFtdIH0="],"names":["e","n","assertNonEmptyString","str","assertNumber","number","DB_VERSION_CURRENT","DB_VERSION_INITIAL","STORE_EMOJI","STORE_KEYVALUE","STORE_FAVORITES","FIELD_TOKENS","INDEX_TOKENS","FIELD_UNICODE","INDEX_COUNT","FIELD_GROUP","FIELD_ORDER","INDEX_GROUP_AND_ORDER","KEY_ETAG","KEY_URL","KEY_PREFERRED_SKINTONE","MODE_READONLY","MODE_READWRITE","INDEX_SKIN_UNICODE","FIELD_SKIN_UNICODE","DEFAULT_DATA_SOURCE","DEFAULT_LOCALE","uniqBy","arr","func","set","res","item","key","uniqEmoji","emojis","_","initialMigration","db","createObjectStore","name","keyPath","indexes","store","indexName","multiEntry","openIndexedDBRequests","databaseCache","onCloseListeners","handleOpenOrDeleteReq","resolve","reject","req","createDatabase","dbName","closeDatabase","openDatabase","dbPromise","storeName","readOnlyOrReadWrite","cb","txn","result","listeners","listener","deleteDatabase","addOnCloseListener","irregularEmoticons","extractTokens","word","MIN_SEARCH_TEXT_LENGTH","normalizeTokens","transformEmojiData","emojiData","annotation","emoticon","group","order","shortcodes","skins","tags","emoji","version","tokens","tone","callStore","method","getIDB","getAllIDB","commit","minBy","array","minItem","findCommonMembers","arrays","uniqByFunc","shortestArray","results","isEmpty","get","hasData","url","eTag","oldETag","oldUrl","doFullDatabaseScanForSingleResult","predicate","emojiStore","lastKey","processNextBatch","loadData","transformedData","metaStore","todo","checkFetched","onFetched","data","getEmojiByGroup","range","getEmojiBySearchQuery","query","intermediateResults","checkDone","onDone","a","b","i","token","getEmojiByShortcode","shortcode","getEmojiByUnicode","unicode","value","incrementFavoriteEmojiCount","getTopFavoriteEmoji","customEmojiIndex","limit","favoritesStore","cursor","addResult","unicodeOrName","custom","CODA_MARKER","trie","itemToTokens","map","currentMap","char","nextMap","valuesAtCoda","exact","queue","entriesSortedByKey","requiredKeys$1","assertCustomEmojis","customEmojis","isArray","firstItemIsFaulty","sortByName","all","searchTrie","searchByExactMatch","searchByPrefix","search","shortcodeToEmoji","nameToEmoji","customEmoji","isFirefoxContentScript","cleanEmoji","len","warnETag","requiredKeys","assertEmojiData","assertStatus","response","dataSource","getETag","getETagAndData","arrayBufferToBinaryString","buffer","binary","bytes","length","binaryStringToArrayBuffer","buf","jsonChecksum","object","inString","inBuffer","outBuffer","outBinString","doCheckForUpdates","eTagAndData","loadDataForFirstTime","checkForUpdates","err","Database","locale","checkReady","customs","natives","skinTone","allGroups","id","groups","NUM_SKIN_TONES","rIC","hasZwj","versionsAndTestEmoji","TIMEOUT_BEFORE_LOADING_MESSAGE","DEFAULT_SKIN_TONE_EMOJI","DEFAULT_NUM_COLUMNS","MOST_COMMONLY_USED_EMOJI","FONT_FAMILY","DEFAULT_CATEGORY_SORTING","getTextFeature","text","color","canvas","ctx","compareFeatures","feature1","feature2","feature1Str","feature2Str","testColorEmojiSupported","determineEmojiSupportLevel","entries","promise","detectEmojiSupportLevel","supportedZwjEmojis","VARIATION_SELECTOR","SKINTONE_MODIFIER","ZWJ","LIGHT_SKIN_TONE","LIGHT_SKIN_TONE_MODIFIER","applySkinTone","zwjIndex","halt","event","incrementOrDecrement","decrement","val","summarizeEmojisForUI","emojiSupportLevel","toSimpleSkinsMap","skin","category","rAF","resizeObserverSupported","resizeObserverAction","node","abortSignal","onUpdate","resizeObserver","calculateTextWidth","baselineEmojiWidth","checkZwjSupport","zwjEmojisToCheck","baselineEmoji","emojiToDomNode","allSupported","domNode","emojiWidth","supported","uniq","resetScrollTopIfPossible","element","getFromMap","cache","cached","toString","parseTemplate","htmlString","template","parseCache","domInstancesCache","unkeyedSymbol","hasReplaceChildren","replaceChildren","parentNode","newChildren","doChildrenNeedRerender","oldChild","oldChildrenCount","patchChildren","instanceBinding","targetNode","targetParentNode","needsRerender","patch","expressions","instanceBindings","currentExpression","expressionIndex","attributeName","attributeValuePre","attributeValuePost","expression","newValue","newNode","parse","withinTag","withinAttribute","elementIndexCounter","elementsToBindings","elementIndexes","skipTokenChars","j","elementIndex","bindings","attributePreMatch","attributePostMatch","binding","applyBindings","traverseAndSetupBindings","rootElement","topLevelBindings","treeWalker","parseHtml","dom","createFramework","state","domInstances","domInstanceCacheKey","html","domInstancesForTokens","callback","keyFunction","index","originalCacheKey","render","container","helpers","events","actions","refs","actionContext","firstRender","labelWithSkin","titleForEmoji","unicodeWithSkin","emojiList","searchMode","prefix","rootDom","emojiWithCategory","forElementWithAttribute","eventName","listenerName","ref","action","boundActions","qM","createState","destroyed","currentObserver","propsToObservers","dirtyObservers","queued","flush","observersToRun","observer","target","prop","observers","createEffect","runnable","oldObserver","arraysAreEqualByFunction","left","right","areEqualFunc","intersectionObserverCache","intersectionObserverAction","root","EMPTY_ARRAY","assign","createRoot","shadowRoot","props","abortController","focus","fireEvent","detail","compareEmojiArrays","compareCurrentEmojisWithCategories","aCategory","aEmojis","bCategory","bEmojis","updateCurrentEmojis","newEmojis","updateSearchMode","newSearchMode","updateCurrentEmojisWithCategories","newEmojisWithCategories","currentSkinTone","onClickSkinToneButton","onEmojiClick","onNavClick","onNavKeydown","onSearchKeydown","onSkinToneOptionsClick","onSkinToneOptionsFocusOut","onSkinToneOptionsKeydown","onSkinToneOptionsKeyup","onSearchInput","calculateEmojiGridStyle","updateOnIntersection","level","handleDatabaseLoading","showingLoadingMessage","timeoutHandle","updateCustomEmoji","updatePreferredSkinTone","updateDefaultFavoriteEmojis","database","favs","databaseCustomEmoji","updateFavorites","defaultFavoriteEmojis","numColumns","dbFavorites","favorites","summarizeEmojis","style","newNumColumns","newIsRtl","isIntersecting","updateEmojis","searchText","currentGroup","databaseLoaded","getEmojisBySearchQuery","currentGroupId","getEmojisByGroup","resetScrollTopInRaf","currentEmojis","emojiVersion","checkZwjSupportAndUpdate","isZwjSupported","filterEmojisByVersion","calculateCurrentEmojisWithCategories","categoriesToEmoji","rawSearchText","goToNextOrPrevious","previous","clickEmoji","closestTarget","groupId","doFocus","el","emojiSummary","skinTonedUnicode","changeSkinTone","match","changeActiveSkinTone","nextSkinTone","relatedTarget","newState","enI18n","baseStyles","PROPS","EXTRA_STYLES","PickerElement","attrName","oldValue","up","definitions"],"mappings":"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","x_google_ignoreList":[0,1]}