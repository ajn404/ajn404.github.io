{"version":3,"file":"tone.BPQMXI6f.js","sources":["../../node_modules/.pnpm/tone@15.1.22/node_modules/tone/build/esm/component/channel/Split.js","../../node_modules/.pnpm/tone@15.1.22/node_modules/tone/build/esm/component/analysis/Analyser.js","../../node_modules/.pnpm/tone@15.1.22/node_modules/tone/build/esm/component/analysis/MeterBase.js","../../node_modules/.pnpm/tone@15.1.22/node_modules/tone/build/esm/component/analysis/FFT.js","../../node_modules/.pnpm/tone@15.1.22/node_modules/tone/build/esm/component/analysis/Waveform.js","../../src/components/react/p5/little/tone.tsx"],"sourcesContent":["import { ToneAudioNode, } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Split.getDefaults(), arguments, [\n            \"channels\",\n        ]);\n        super(options);\n        this.name = \"Split\";\n        this._splitter =\n            this.input =\n                this.output =\n                    this.context.createChannelSplitter(options.channels);\n        this._internalChannels = [this._splitter];\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            channels: 2,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._splitter.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=Split.js.map","import { ToneAudioNode, } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Split } from \"../channel/Split.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { assert, assertRange } from \"../../core/util/Debug.js\";\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\nexport class Analyser extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n        super(options);\n        this.name = \"Analyser\";\n        /**\n         * The analyser node.\n         */\n        this._analysers = [];\n        /**\n         * The buffer that the FFT data is written to\n         */\n        this._buffers = [];\n        this.input =\n            this.output =\n                this._gain =\n                    new Gain({ context: this.context });\n        this._split = new Split({\n            context: this.context,\n            channels: options.channels,\n        });\n        this.input.connect(this._split);\n        assertRange(options.channels, 1);\n        // create the analysers\n        for (let channel = 0; channel < options.channels; channel++) {\n            this._analysers[channel] = this.context.createAnalyser();\n            this._split.connect(this._analysers[channel], channel, 0);\n        }\n        // set the values initially\n        this.size = options.size;\n        this.type = options.type;\n        this.smoothing = options.smoothing;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            size: 1024,\n            smoothing: 0.8,\n            type: \"fft\",\n            channels: 1,\n        });\n    }\n    /**\n     * Run the analysis given the current settings. If {@link channels} = 1,\n     * it will return a Float32Array. If {@link channels} > 1, it will\n     * return an array of Float32Arrays where each index in the array\n     * represents the analysis done on a channel.\n     */\n    getValue() {\n        this._analysers.forEach((analyser, index) => {\n            const buffer = this._buffers[index];\n            if (this._type === \"fft\") {\n                analyser.getFloatFrequencyData(buffer);\n            }\n            else if (this._type === \"waveform\") {\n                analyser.getFloatTimeDomainData(buffer);\n            }\n        });\n        if (this.channels === 1) {\n            return this._buffers[0];\n        }\n        else {\n            return this._buffers;\n        }\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     */\n    get size() {\n        return this._analysers[0].frequencyBinCount;\n    }\n    set size(size) {\n        this._analysers.forEach((analyser, index) => {\n            analyser.fftSize = size * 2;\n            this._buffers[index] = new Float32Array(size);\n        });\n    }\n    /**\n     * The number of channels the analyser does the analysis on. Channel\n     * separation is done using {@link Split}\n     */\n    get channels() {\n        return this._analysers.length;\n    }\n    /**\n     * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n     */\n    get type() {\n        return this._type;\n    }\n    set type(type) {\n        assert(type === \"waveform\" || type === \"fft\", `Analyser: invalid type: ${type}`);\n        this._type = type;\n    }\n    /**\n     * 0 represents no time averaging with the last analysis frame.\n     */\n    get smoothing() {\n        return this._analysers[0].smoothingTimeConstant;\n    }\n    set smoothing(val) {\n        this._analysers.forEach((a) => (a.smoothingTimeConstant = val));\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._analysers.forEach((a) => a.disconnect());\n        this._split.dispose();\n        this._gain.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Analyser.js.map","import { ToneAudioNode, } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Analyser } from \"./Analyser.js\";\n/**\n * The base class for Metering classes.\n */\nexport class MeterBase extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(MeterBase.getDefaults(), arguments));\n        this.name = \"MeterBase\";\n        this.input =\n            this.output =\n                this._analyser =\n                    new Analyser({\n                        context: this.context,\n                        size: 256,\n                        type: \"waveform\",\n                    });\n    }\n    dispose() {\n        super.dispose();\n        this._analyser.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=MeterBase.js.map","import { ToneAudioNode } from \"../../core/context/ToneAudioNode.js\";\nimport { dbToGain } from \"../../core/type/Conversions.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase } from \"./MeterBase.js\";\nimport { assert } from \"../../core/util/Debug.js\";\n/**\n * Get the current frequency data of the connected audio source using a fast Fourier transform.\n * Read more about FFT algorithms on [Wikipedia] (https://en.wikipedia.org/wiki/Fast_Fourier_transform).\n * @category Component\n */\nexport class FFT extends MeterBase {\n    constructor() {\n        const options = optionsFromArguments(FFT.getDefaults(), arguments, [\n            \"size\",\n        ]);\n        super(options);\n        this.name = \"FFT\";\n        this.normalRange = options.normalRange;\n        this._analyser.type = \"fft\";\n        this.size = options.size;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            normalRange: false,\n            size: 1024,\n            smoothing: 0.8,\n        });\n    }\n    /**\n     * Gets the current frequency data from the connected audio source.\n     * Returns the frequency data of length {@link size} as a Float32Array of decibel values.\n     */\n    getValue() {\n        const values = this._analyser.getValue();\n        return values.map((v) => (this.normalRange ? dbToGain(v) : v));\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     * Determines the size of the array returned by {@link getValue} (i.e. the number of\n     * frequency bins). Large FFT sizes may be costly to compute.\n     */\n    get size() {\n        return this._analyser.size;\n    }\n    set size(size) {\n        this._analyser.size = size;\n    }\n    /**\n     * 0 represents no time averaging with the last analysis frame.\n     */\n    get smoothing() {\n        return this._analyser.smoothing;\n    }\n    set smoothing(val) {\n        this._analyser.smoothing = val;\n    }\n    /**\n     * Returns the frequency value in hertz of each of the indices of the FFT's {@link getValue} response.\n     * @example\n     * const fft = new Tone.FFT(32);\n     * console.log([0, 1, 2, 3, 4].map(index => fft.getFrequencyOfIndex(index)));\n     */\n    getFrequencyOfIndex(index) {\n        assert(0 <= index && index < this.size, `index must be greater than or equal to 0 and less than ${this.size}`);\n        return (index * this.context.sampleRate) / (this.size * 2);\n    }\n}\n//# sourceMappingURL=FFT.js.map","import { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { MeterBase } from \"./MeterBase.js\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\nexport class Waveform extends MeterBase {\n    constructor() {\n        const options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n        super(options);\n        this.name = \"Waveform\";\n        this._analyser.type = \"waveform\";\n        this.size = options.size;\n    }\n    static getDefaults() {\n        return Object.assign(MeterBase.getDefaults(), {\n            size: 1024,\n        });\n    }\n    /**\n     * Return the waveform for the current time as a Float32Array where each value in the array\n     * represents a sample in the waveform.\n     */\n    getValue() {\n        return this._analyser.getValue();\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     * Determines the size of the array returned by {@link getValue}.\n     */\n    get size() {\n        return this._analyser.size;\n    }\n    set size(size) {\n        this._analyser.size = size;\n    }\n}\n//# sourceMappingURL=Waveform.js.map","import type p5 from \"p5\";\nimport * as Tone from \"tone\";\nimport Basic from \"../index.tsx\";\nimport { Button } from \"@shadcn/ui/button\";\n\nexport default ({ curve }: { curve?: Boolean }) => {\n  let fft,\n    player: Tone.Player,\n    drawMe = false,\n    waveform;\n\n  let play = () => {\n    player && player.start();\n    drawMe = true;\n  };\n  let pause = () => {\n    player && player.stop();\n    drawMe = false;\n  };\n  const sketch = (p: p5) => {\n    const setup = async () => {\n      await Tone.start();\n      player = new Tone.Player(\"/assets/sorry.mp3\").toDestination();\n      fft = new Tone.FFT(2048).toDestination();\n      waveform = new Tone.Waveform(2048);\n      if (curve) player.connect(waveform);\n      else player.connect(fft);\n      p.createCanvas(p.windowWidth - 100, 240);\n      p.frameRate(120); // 设置帧率\n      p.background(255, 255, 255);\n    };\n    const draw = () => {\n      if (drawMe && fft && waveform) {\n        p.background(255, 255, 255);\n        p.strokeWeight(4);\n        p.stroke(255);\n        if (!curve) {\n          let spectrum = fft.getValue();\n          p.noStroke();\n          p.fill(0, 0, 0);\n          for (let i = 0; i < spectrum.length; i++) {\n            let x = p.map(i, 0, spectrum.length, 0, p.width);\n            let h = p.map(spectrum[i], -100, 0, 0, p.height);\n            // 绘制频谱条\n            p.rect(x, p.height, p.width / spectrum.length, -h);\n          }\n        } else {\n          let wave = waveform.getValue();\n          // 绘制正弦曲线\n          let colorValue = p.map(wave[0], -1, 1, 0, 255);\n          let c = p.noise(p.frameCount);\n          p.stroke(colorValue, 255 - colorValue, c * 255);\n          p.noFill();\n          p.beginShape();\n          for (let i = 0; i < wave.length; i++) {\n            let x = p.map(i, 0, wave.length, 0, p.width);\n            let y = p.map(wave[i], -1, 1, p.height, 0); // 反转 y 轴\n            p.vertex(x, y);\n          }\n          p.endShape();\n        }\n      }\n    };\n    const resize = () => {\n      p.resizeCanvas(p.windowWidth - 100, 240);\n    };\n    p.setup = setup;\n    p.draw = draw;\n    p.windowResized = resize;\n  };\n  return (\n    <>\n      <Basic sketch={sketch}></Basic>\n      <div className=\"flex gap-10\">\n        <Button className=\"m-auto\" onClick={play}>\n          播放\n        </Button>\n        <Button className=\"m-auto\" onClick={pause}>\n          结束\n        </Button>\n      </div>\n    </>\n  );\n};\n"],"names":["Split","ToneAudioNode","options","optionsFromArguments","Analyser","Gain","assertRange","channel","analyser","index","buffer","size","type","assert","val","a","MeterBase","FFT","v","dbToGain","Waveform","tone","curve","fft","player","drawMe","waveform","play","pause","sketch","p","setup","Tone.start","Tone.Player","Tone.FFT","Tone.Waveform","draw","wave","colorValue","c","i","x","y","spectrum","h","resize","jsxs","Fragment","jsx","Basic","Button"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}