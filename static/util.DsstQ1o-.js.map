{"version":3,"file":"util.DsstQ1o-.js","sources":["../../src/components/vue/challenge/util.vue"],"sourcesContent":["<script setup lang='ts'>\nimport { onUnmounted, ref } from \"vue\"\n\nconst count = ref(0)\n\n/**\n * Implement the until function\n*/\n\nfunction until(initial) {\n    function toBe(value) {\n        return new Promise((resolve, reject) => {\n            if (initial.value === value) {\n                resolve(true)\n            }\n            else {\n                setTimeout(() => {\n                    toBe(value).then(resolve).catch(reject)\n                }, 100);\n            }\n        })\n    }\n\n    return {\n        toBe,\n    }\n}\n\nlet timer: NodeJS.Timeout;\n\nasync function increase() {\n    count.value = 0\n    timer = setInterval(() => {\n        count.value++\n    }, 1000)\n    await until(count).toBe(3);\n    console.log(count.value === 3) // Make sure the output is true\n}\n\nonUnmounted(() => {\n    clearInterval(timer)\n})\n\n</script>\n\n<template>\n    <p @click=\"increase\">\n        Increase{{ count }}\n    </p>\n</template>\n"],"names":["count","ref","until","initial","toBe","value","resolve","reject","timer","increase","onUnmounted","_openBlock","_createElementBlock","$setup","_toDisplayString"],"mappings":"0lBAGM,MAAAA,EAAQC,EAAI,CAAC,EAMnB,SAASC,EAAMC,EAAS,CACpB,SAASC,EAAKC,EAAO,CACjB,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CAChCJ,EAAQ,QAAUE,EAClBC,EAAQ,EAAI,EAGZ,WAAW,IAAM,CACbF,EAAKC,CAAK,EAAE,KAAKC,CAAO,EAAE,MAAMC,CAAM,GACvC,GAAG,CACV,CACH,CAAA,CAGE,MAAA,CACH,KAAAH,CACJ,CAAA,CAGA,IAAAI,EAEJ,eAAeC,GAAW,CACtBT,EAAM,MAAQ,EACdQ,EAAQ,YAAY,IAAM,CAChBR,EAAA,SACP,GAAI,EACP,MAAME,EAAMF,CAAK,EAAE,KAAK,CAAC,EACjB,QAAA,IAAIA,EAAM,QAAU,CAAC,CAAA,CAGjCU,EAAY,IAAM,CACd,cAAcF,CAAK,CAAA,CACtB,uLAKG,OAAAG,EAAA,EAAAC,EAEI,KAFA,QAAOC,EAAA,QAAU,EAAA,YACTC,EAAGD,EAAK,KAAA,EAAA,CAAA"}