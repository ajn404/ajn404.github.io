{"version":3,"file":"reverse.CJyOsb0K.js","sources":["../../node_modules/.pnpm/d3-array@3.2.4/node_modules/d3-array/src/greatest.js","../../node_modules/.pnpm/d3-array@3.2.4/node_modules/d3-array/src/reverse.js"],"sourcesContent":["import ascending from \"./ascending.js\";\n\nexport default function greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n  if (compare.length === 1) {\n    let maxValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, maxValue) > 0\n          : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, max) > 0\n          : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n  return max;\n}\n","export default function reverse(values) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  return Array.from(values).reverse();\n}\n"],"names":["greatest","values","compare","ascending","max","defined","maxValue","element","value","reverse"],"mappings":"sYAEe,SAASA,EAASC,EAAQC,EAAUC,EAAW,CAC5D,IAAIC,EACAC,EAAU,GACd,GAAIH,EAAQ,SAAW,EAAG,CACxB,IAAII,EACJ,UAAWC,KAAWN,EAAQ,CAC5B,MAAMO,EAAQN,EAAQK,CAAO,GACzBF,EACEF,EAAUK,EAAOF,CAAQ,EAAI,EAC7BH,EAAUK,EAAOA,CAAK,IAAM,KAChCJ,EAAMG,EACND,EAAWE,EACXH,EAAU,GAElB,CACA,KACI,WAAWG,KAASP,GACdI,EACEH,EAAQM,EAAOJ,CAAG,EAAI,EACtBF,EAAQM,EAAOA,CAAK,IAAM,KAC9BJ,EAAMI,EACNH,EAAU,IAIhB,OAAOD,CACT,CC5Be,SAASK,EAAQR,EAAQ,CACtC,GAAI,OAAOA,EAAO,OAAO,QAAQ,GAAM,WAAY,MAAM,IAAI,UAAU,wBAAwB,EAC/F,OAAO,MAAM,KAAKA,CAAM,EAAE,QAAS,CACrC","x_google_ignoreList":[0,1]}