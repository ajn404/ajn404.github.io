{"version":3,"file":"index.C510FebL.js","sources":["../../src/components/react/p5/shader/index.tsx"],"sourcesContent":["import { useCallback, useState, useEffect } from \"react\";\nimport type p5 from \"p5\";\nimport Basic from \"@components/react/p5/index.tsx\";\n\nconst vertexShaderInit = `\nprecision highp float;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n  vTexCoord = aTexCoord;\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n}\n`;\n\nconst fragmentShaderInit = `\nprecision highp float;\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / u_resolution;\n  float color = 0.5 + 0.5 * sin(u_time + uv.x * 10.0);\n  vec3 dynamicColor = vec3(color, 0.5, 1.0 - color);\n  gl_FragColor = vec4(dynamicColor, 1.0);\n}\n`;\n\ninterface ShaderProps {\n  vertexShader: string;\n  fragmentShader: string;\n}\n\nconst ShaderComponent = ({\n  vertexShader = vertexShaderInit,\n  fragmentShader = fragmentShaderInit,\n}: ShaderProps) => {\n  const sketch = useCallback(\n    (p: p5) => {\n      let myShader;\n\n      p.preload = () => {};\n\n      const setup = () => {\n        p.createCanvas(p.windowWidth / 2, 240, p.WEBGL);\n        myShader = p.createShader(vertexShader, fragmentShader);\n        p.frameRate(120);\n      };\n\n      const draw = () => {\n        if (!myShader) {\n          myShader = p.createShader(vertexShader, fragmentShader);\n          return;\n        }\n        p.background(0);\n        p.shader(myShader);\n\n        // Pass uniforms\n        myShader.setUniform(\"u_resolution\", [p.width, p.height]);\n        myShader.setUniform(\"u_mouse\", [p.mouseX, p.mouseY]);\n        myShader.setUniform(\"u_time\", p.frameCount / 40);\n        p.rect(-p.width / 2, -p.height / 2, p.width, p.height); // Draw rectangle\n      };\n\n      const resize = () => {\n        p.resizeCanvas(p.windowWidth / 2, 240);\n      };\n\n      p.setup = setup;\n      p.draw = draw;\n      p.windowResized = resize;\n    },\n    [vertexShader, fragmentShader]\n  );\n\n  return (\n    <>\n      <Basic sketch={sketch} />\n    </>\n  );\n};\n\nexport default ShaderComponent;\n"],"names":["vertexShaderInit","fragmentShaderInit","ShaderComponent","vertexShader","fragmentShader","sketch","useCallback","p","myShader","setup","draw","resize","jsx","Fragment","Basic"],"mappings":"ssBAIA,MAAMA,EAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBnBC,EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBrBC,EAAkB,CAAC,CACvB,aAAAC,EAAeH,EACf,eAAAI,EAAiBH,CACnB,IAAmB,CACjB,MAAMI,EAASC,EAAA,YACZC,GAAU,CACL,IAAAC,EAEJD,EAAE,QAAU,IAAM,CAAC,EAEnB,MAAME,EAAQ,IAAM,CAClBF,EAAE,aAAaA,EAAE,YAAc,EAAG,IAAKA,EAAE,KAAK,EACnCC,EAAAD,EAAE,aAAaJ,EAAcC,CAAc,EACtDG,EAAE,UAAU,GAAG,CACjB,EAEMG,EAAO,IAAM,CACjB,GAAI,CAACF,EAAU,CACFA,EAAAD,EAAE,aAAaJ,EAAcC,CAAc,EACtD,MAAA,CAEFG,EAAE,WAAW,CAAC,EACdA,EAAE,OAAOC,CAAQ,EAGjBA,EAAS,WAAW,eAAgB,CAACD,EAAE,MAAOA,EAAE,MAAM,CAAC,EACvDC,EAAS,WAAW,UAAW,CAACD,EAAE,OAAQA,EAAE,MAAM,CAAC,EACnDC,EAAS,WAAW,SAAUD,EAAE,WAAa,EAAE,EAC/CA,EAAE,KAAK,CAACA,EAAE,MAAQ,EAAG,CAACA,EAAE,OAAS,EAAGA,EAAE,MAAOA,EAAE,MAAM,CACvD,EAEMI,EAAS,IAAM,CACnBJ,EAAE,aAAaA,EAAE,YAAc,EAAG,GAAG,CACvC,EAEAA,EAAE,MAAQE,EACVF,EAAE,KAAOG,EACTH,EAAE,cAAgBI,CACpB,EACA,CAACR,EAAcC,CAAc,CAC/B,EAEA,OAEIQ,EAAA,IAAAC,EAAA,SAAA,CAAA,SAAAD,EAAA,IAACE,EAAM,CAAA,OAAAT,CAAgB,CAAA,EACzB,CAEJ"}