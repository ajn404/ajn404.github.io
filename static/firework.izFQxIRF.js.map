{"version":3,"file":"firework.izFQxIRF.js","sources":["../../src/components/react/p5/art/firework.tsx"],"sourcesContent":["import type p5 from \"p5\";\nimport Basic from \"@components/react/p5/index.tsx\";\n\nlet centre = [185, 180];\nlet color_orig = \"#798e9a\",\n  circle_radius = 15,\n  draw_radius = 100,\n  line_distanceIn = 14,\n  dash_gap_from_circles = 10,\n  centre_dashes_num = 200,\n  centre_dashes_radius = 30,\n  dashes_num = 600,\n  yTop = 170,\n  y2 = 235,\n  y3 = 300,\n  golden_ratio = 1.618033988749895,\n  golden_angle = 2.3999632297286535;\n\nexport default () => {\n  const sketch = (p: p5) => {\n    let pg = p.createGraphics(\n      p.windowWidth / 4,\n      ((p.windowWidth / 4) * 80) / 37\n    );\n    pg.fill(\"rgba(166,54,62, 0.8)\");\n    pg.ellipse(centre[0], centre[1] + yTop, 30, 30);\n    pg.fill(\"rgba(219,186,83, 0.8)\");\n    pg.ellipse(centre[0], centre[1] + y2, 30, 30);\n    pg.fill(\"rgba(81,132,123, 0.8)\");\n    pg.ellipse(centre[0], centre[1] + y3, 30, 30);\n    pg.filter(p.BLUR, 30);\n    p.draw = function () {\n      let delay = 6;\n      if (p.frameCount % delay == 0) {\n        p.createCanvas(400, 600);\n        p.fill(\"rgba(46,50,43,0)\");\n        p.image(pg, 0, 0);\n        p.stroke(\"rgb(255,255,255)\");\n        p.strokeWeight(40);\n        p.fill(\"rgba(46,50,43,0)\");\n        p.rect(0, 0, centre[0] * 2, 600, 40);\n        p.stroke(\"rgb(202,197,169)\");\n        p.strokeWeight(4);\n        p.rect(30, 30, 310, 540, 10);\n        p.strokeWeight(2);\n        p.stroke(\"rgb(196,105,79)\");\n        p.fill(\"rgb(196,105,79)\");\n\n        for (let i = 0; i < dashes_num; i++) {\n          const angle = i * golden_angle;\n          const r = Math.sqrt(i / dashes_num);\n          const x =\n            centre[0] +\n            (draw_radius -\n              dash_gap_from_circles -\n              p.random(dash_gap_from_circles)) *\n              Math.cos(angle) *\n              r;\n          const y =\n            centre[1] +\n            (draw_radius -\n              dash_gap_from_circles -\n              p.random(dash_gap_from_circles)) *\n              Math.sin(angle) *\n              r;\n          let dist_ratio = p.random(0.2);\n          let [x1, y1] = [\n            (1 - dist_ratio) * x + dist_ratio * centre[0],\n            (1 - dist_ratio) * y + dist_ratio * centre[1],\n          ];\n          p.strokeWeight(p.random(2));\n          p.line(x, y, x1, y1);\n        }\n\n        for (let i = 0; i < centre_dashes_num; i++) {\n          let angle = p.random(Math.PI * 2),\n            centre_dash_radius = p.random(Math.PI * 2);\n\n          let x = centre[0] + p.random(centre_dashes_radius) * Math.cos(angle),\n            y = centre[1] + p.random(centre_dashes_radius) * Math.sin(angle);\n          p.strokeWeight(p.random(2));\n          p.line(x, y, centre[0], centre[1]);\n        }\n\n        let color = color_orig;\n\n        let line_ang = Math.PI * 0.004;\n        let circles_num = (2 * Math.PI * draw_radius) / (circle_radius * 1.3);\n        for (let i = 0; i < circles_num; i++) {\n          p.stroke(color);\n          p.fill(color);\n          let angle = 2 * Math.PI * (i / circles_num),\n            draw_radius_add = p.random(2),\n            x = centre[0] + (draw_radius + draw_radius_add) * Math.cos(angle),\n            xa =\n              centre[0] +\n              (draw_radius + draw_radius_add - circle_radius / 2) *\n                Math.cos(angle - line_ang),\n            xb =\n              centre[0] +\n              (draw_radius + draw_radius_add - circle_radius / 2) *\n                Math.cos(angle + line_ang),\n            x1 =\n              centre[0] +\n              (draw_radius + draw_radius_add - line_distanceIn) *\n                Math.cos(angle),\n            y = centre[1] + (draw_radius + draw_radius_add) * Math.sin(angle),\n            ya =\n              centre[1] +\n              (draw_radius + draw_radius_add - circle_radius / 2) *\n                Math.sin(angle - line_ang),\n            yb =\n              centre[1] +\n              (draw_radius + draw_radius_add - circle_radius / 2) *\n                Math.sin(angle + line_ang),\n            y1 =\n              centre[1] +\n              (draw_radius + draw_radius_add - line_distanceIn) *\n                Math.sin(angle);\n          p.strokeWeight(1);\n          p.circle(x, y, circle_radius);\n\n          p.strokeWeight(2);\n          p.line(xa, ya, x1, y1);\n          p.line(xb, yb, x1, y1);\n        }\n\n        function drawStarBelow(color, y_pos) {\n          p.stroke(color);\n          for (let i = 0; i < 40; i++) {\n            let angle = p.random(Math.PI * 2),\n              centre_dash_radius = p.random(15, 22);\n            let x = centre[0] + centre_dash_radius * Math.cos(angle),\n              y = centre[1] + y_pos + centre_dash_radius * Math.sin(angle);\n            p.strokeWeight(p.random(2));\n            p.line(x, y, centre[0], centre[1] + y_pos);\n            for (let i = 0; i <= 1; i++) {\n              angle = p.random(Math.PI * 2);\n              p.strokeWeight(p.random(1, 1.5));\n              centre_dash_radius = p.random(8, 15);\n              (x = centre[0] + centre_dash_radius * Math.cos(angle)),\n                (y = centre[1] + y_pos + centre_dash_radius * Math.sin(angle));\n              p.line(x, y, centre[0], centre[1] + y_pos);\n            }\n          }\n        }\n\n        drawStarBelow(\"rgb(166,54,62)\", yTop);\n        drawStarBelow(\"rgb(219,186,83)\", y2);\n        drawStarBelow(\"rgb(81,132,123)\", y3);\n      }\n    };\n    const resize = () => {\n      p.resizeCanvas(p.windowWidth / 2, 240);\n    };\n    p.windowResized = resize;\n  };\n  return <Basic sketch={sketch} showControls></Basic>;\n};\n"],"names":["centre","color_orig","circle_radius","draw_radius","line_distanceIn","dash_gap_from_circles","centre_dashes_num","centre_dashes_radius","dashes_num","yTop","y2","y3","golden_angle","firework","sketch","p","pg","drawStarBelow","color","y_pos","i","angle","centre_dash_radius","x","y","r","dist_ratio","x1","y1","line_ang","circles_num","draw_radius_add","xa","xb","ya","yb","resize","jsx","Basic"],"mappings":"qrBAGA,IAAIA,EAAS,CAAC,IAAK,GAAG,EAClBC,EAAa,UACfC,EAAgB,GAChBC,EAAc,IACdC,EAAkB,GAClBC,EAAwB,GACxBC,EAAoB,IACpBC,EAAuB,GACvBC,EAAa,IACbC,EAAO,IACPC,EAAK,IACLC,EAAK,IAELC,EAAe,mBAEjB,MAAAC,EAAe,IAAM,CACb,MAAAC,EAAUC,GAAU,CACxB,IAAIC,EAAKD,EAAE,eACTA,EAAE,YAAc,EACdA,EAAE,YAAc,EAAK,GAAM,EAC/B,EACAC,EAAG,KAAK,sBAAsB,EAC3BA,EAAA,QAAQhB,EAAO,CAAC,EAAGA,EAAO,CAAC,EAAIS,EAAM,GAAI,EAAE,EAC9CO,EAAG,KAAK,uBAAuB,EAC5BA,EAAA,QAAQhB,EAAO,CAAC,EAAGA,EAAO,CAAC,EAAIU,EAAI,GAAI,EAAE,EAC5CM,EAAG,KAAK,uBAAuB,EAC5BA,EAAA,QAAQhB,EAAO,CAAC,EAAGA,EAAO,CAAC,EAAIW,EAAI,GAAI,EAAE,EACzCK,EAAA,OAAOD,EAAE,KAAM,EAAE,EACpBA,EAAE,KAAO,UAAY,CAEf,GAAAA,EAAE,WADM,GACgB,EAAG,CA8FpB,IAAAE,EAAT,SAAuBC,EAAOC,EAAO,CACnCJ,EAAE,OAAOG,CAAK,EACd,QAASE,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACvB,IAAAC,EAAQN,EAAE,OAAO,KAAK,GAAK,CAAC,EAC9BO,EAAqBP,EAAE,OAAO,GAAI,EAAE,EAClCQ,EAAIvB,EAAO,CAAC,EAAIsB,EAAqB,KAAK,IAAID,CAAK,EACrDG,EAAIxB,EAAO,CAAC,EAAImB,EAAQG,EAAqB,KAAK,IAAID,CAAK,EAC7DN,EAAE,aAAaA,EAAE,OAAO,CAAC,CAAC,EACxBA,EAAA,KAAKQ,EAAGC,EAAGxB,EAAO,CAAC,EAAGA,EAAO,CAAC,EAAImB,CAAK,EACzC,QAASC,EAAI,EAAGA,GAAK,EAAGA,IACtBC,EAAQN,EAAE,OAAO,KAAK,GAAK,CAAC,EAC5BA,EAAE,aAAaA,EAAE,OAAO,EAAG,GAAG,CAAC,EACVO,EAAAP,EAAE,OAAO,EAAG,EAAE,EAClCQ,EAAIvB,EAAO,CAAC,EAAIsB,EAAqB,KAAK,IAAID,CAAK,EACjDG,EAAIxB,EAAO,CAAC,EAAImB,EAAQG,EAAqB,KAAK,IAAID,CAAK,EAC5DN,EAAA,KAAKQ,EAAGC,EAAGxB,EAAO,CAAC,EAAGA,EAAO,CAAC,EAAImB,CAAK,CAC3C,CAEJ,EA/GEJ,EAAA,aAAa,IAAK,GAAG,EACvBA,EAAE,KAAK,kBAAkB,EACvBA,EAAA,MAAMC,EAAI,EAAG,CAAC,EAChBD,EAAE,OAAO,kBAAkB,EAC3BA,EAAE,aAAa,EAAE,EACjBA,EAAE,KAAK,kBAAkB,EACvBA,EAAA,KAAK,EAAG,EAAGf,EAAO,CAAC,EAAI,EAAG,IAAK,EAAE,EACnCe,EAAE,OAAO,kBAAkB,EAC3BA,EAAE,aAAa,CAAC,EAChBA,EAAE,KAAK,GAAI,GAAI,IAAK,IAAK,EAAE,EAC3BA,EAAE,aAAa,CAAC,EAChBA,EAAE,OAAO,iBAAiB,EAC1BA,EAAE,KAAK,iBAAiB,EAExB,QAASK,EAAI,EAAGA,EAAIZ,EAAYY,IAAK,CACnC,MAAMC,EAAQD,EAAIR,EACZa,EAAI,KAAK,KAAKL,EAAIZ,CAAU,EAC5Be,EACJvB,EAAO,CAAC,GACPG,EACCE,EACAU,EAAE,OAAOV,CAAqB,GAC9B,KAAK,IAAIgB,CAAK,EACdI,EACED,EACJxB,EAAO,CAAC,GACPG,EACCE,EACAU,EAAE,OAAOV,CAAqB,GAC9B,KAAK,IAAIgB,CAAK,EACdI,EACA,IAAAC,EAAaX,EAAE,OAAO,EAAG,EACzB,CAACY,EAAIC,CAAE,EAAI,EACZ,EAAIF,GAAcH,EAAIG,EAAa1B,EAAO,CAAC,GAC3C,EAAI0B,GAAcF,EAAIE,EAAa1B,EAAO,CAAC,CAC9C,EACAe,EAAE,aAAaA,EAAE,OAAO,CAAC,CAAC,EAC1BA,EAAE,KAAKQ,EAAGC,EAAGG,EAAIC,CAAE,CAAA,CAGrB,QAASR,EAAI,EAAGA,EAAId,EAAmBc,IAAK,CAC1C,IAAIC,EAAQN,EAAE,OAAO,KAAK,GAAK,CAAC,EACTA,EAAE,OAAO,KAAK,GAAK,CAAC,EAEvC,IAAAQ,EAAIvB,EAAO,CAAC,EAAIe,EAAE,OAAOR,CAAoB,EAAI,KAAK,IAAIc,CAAK,EACjEG,EAAIxB,EAAO,CAAC,EAAIe,EAAE,OAAOR,CAAoB,EAAI,KAAK,IAAIc,CAAK,EACjEN,EAAE,aAAaA,EAAE,OAAO,CAAC,CAAC,EACxBA,EAAA,KAAKQ,EAAGC,EAAGxB,EAAO,CAAC,EAAGA,EAAO,CAAC,CAAC,CAAA,CAGnC,IAAIkB,EAAQjB,EAER4B,EAAW,KAAK,GAAK,KACrBC,EAAe,EAAI,KAAK,GAAK3B,GAAgBD,EAAgB,KACjE,QAASkB,EAAI,EAAGA,EAAIU,EAAaV,IAAK,CACpCL,EAAE,OAAOG,CAAK,EACdH,EAAE,KAAKG,CAAK,EACR,IAAAG,EAAQ,EAAI,KAAK,IAAMD,EAAIU,GAC7BC,EAAkBhB,EAAE,OAAO,CAAC,EAC5BQ,EAAIvB,EAAO,CAAC,GAAKG,EAAc4B,GAAmB,KAAK,IAAIV,CAAK,EAChEW,EACEhC,EAAO,CAAC,GACPG,EAAc4B,EAAkB7B,EAAgB,GAC/C,KAAK,IAAImB,EAAQQ,CAAQ,EAC7BI,EACEjC,EAAO,CAAC,GACPG,EAAc4B,EAAkB7B,EAAgB,GAC/C,KAAK,IAAImB,EAAQQ,CAAQ,EAC7BF,EACE3B,EAAO,CAAC,GACPG,EAAc4B,EAAkB3B,GAC/B,KAAK,IAAIiB,CAAK,EAClBG,EAAIxB,EAAO,CAAC,GAAKG,EAAc4B,GAAmB,KAAK,IAAIV,CAAK,EAChEa,EACElC,EAAO,CAAC,GACPG,EAAc4B,EAAkB7B,EAAgB,GAC/C,KAAK,IAAImB,EAAQQ,CAAQ,EAC7BM,EACEnC,EAAO,CAAC,GACPG,EAAc4B,EAAkB7B,EAAgB,GAC/C,KAAK,IAAImB,EAAQQ,CAAQ,EAC7BD,EACE5B,EAAO,CAAC,GACPG,EAAc4B,EAAkB3B,GAC/B,KAAK,IAAIiB,CAAK,EACpBN,EAAE,aAAa,CAAC,EACdA,EAAA,OAAOQ,EAAGC,EAAGtB,CAAa,EAE5Ba,EAAE,aAAa,CAAC,EAChBA,EAAE,KAAKiB,EAAIE,EAAIP,EAAIC,CAAE,EACrBb,EAAE,KAAKkB,EAAIE,EAAIR,EAAIC,CAAE,CAAA,CAuBvBX,EAAc,iBAAkBR,CAAI,EACpCQ,EAAc,kBAAmBP,CAAE,EACnCO,EAAc,kBAAmBN,CAAE,CAAA,CAEvC,EACA,MAAMyB,EAAS,IAAM,CACnBrB,EAAE,aAAaA,EAAE,YAAc,EAAG,GAAG,CACvC,EACAA,EAAE,cAAgBqB,CACpB,EACA,OAAQC,EAAAA,IAAAC,EAAA,CAAM,OAAAxB,EAAgB,aAAY,EAAC,CAAA,CAC7C"}